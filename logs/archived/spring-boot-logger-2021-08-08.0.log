2021-08-08 02:21:10,989 WARN com.zaxxer.hikari.pool.HikariPool$HouseKeeper [HikariPool-1 housekeeper] HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=3h27s679ms611µs200ns).
2021-08-08 08:44:40,961 WARN com.zaxxer.hikari.pool.HikariPool$HouseKeeper [HikariPool-1 housekeeper] HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=6h23m40s896ms382µs700ns).
2021-08-08 08:45:10,361 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 08:46:50,369 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 08:48:30,391 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 08:50:10,418 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 08:51:50,433 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 08:53:30,458 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 08:55:10,474 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 08:56:50,502 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 08:58:30,525 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 09:00:10,548 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 09:01:50,576 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 09:03:30,605 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 09:05:10,621 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 09:06:50,648 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 09:08:30,665 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 09:10:10,701 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 09:11:50,710 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 09:13:30,737 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 09:15:10,779 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 09:16:50,797 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 09:18:30,816 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 09:20:10,827 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 09:21:50,849 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 09:23:30,874 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 09:25:10,891 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 09:26:50,917 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 09:28:30,940 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 09:30:10,964 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 09:31:50,977 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 09:33:31,013 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 09:35:11,024 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 09:36:51,036 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 09:38:31,048 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 09:40:11,073 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 09:41:51,088 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 09:43:31,117 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 09:45:11,138 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 09:46:51,165 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 09:48:31,184 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 09:50:11,207 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 09:51:51,232 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 09:53:31,250 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 09:55:11,278 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 09:56:51,296 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 09:58:31,314 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 10:00:11,332 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 10:01:51,351 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 10:03:31,364 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 10:05:11,386 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 10:06:51,406 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 10:08:31,422 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 10:10:11,442 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 10:11:51,465 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 10:13:31,490 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 10:15:11,513 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 10:16:51,524 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 10:18:31,541 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 10:20:11,553 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 10:21:51,577 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 10:23:31,586 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 10:25:11,605 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 10:26:51,623 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 10:28:31,647 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 13:18:41,236 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting AvtcApplication using Java 11.0.10 on DESKTOP-BIBH7GP with PID 29824 (C:\Users\sonna\IdeaProjects\avtc\target\classes started by sonna in C:\Users\sonna\IdeaProjects\avtc)
2021-08-08 13:18:41,232 INFO org.hibernate.validator.internal.util.Version [background-preinit] HV000001: Hibernate Validator 6.2.0.Final
2021-08-08 13:18:41,244 DEBUG org.springframework.boot.StartupInfoLogger [restartedMain] Running with Spring Boot v2.5.0, Spring v5.3.7
2021-08-08 13:18:41,244 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2021-08-08 13:18:41,346 INFO org.springframework.boot.logging.DeferredLog [restartedMain] The Class-Path manifest attribute in C:\Users\sonna\.m2\repository\org\glassfish\hk2\hk2\2.6.1\hk2-2.6.1.jar referenced one or more files that do not exist: file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/hk2-utils.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/jakarta.annotation-api.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/jakarta.inject.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/hk2-api.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/aopalliance-repackaged.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/hk2-core.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/hk2-locator.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/javassist.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/hk2-runlevel.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/class-model.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/asm.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/asm-analysis.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/asm-commons.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/asm-tree.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/asm-util.jar
2021-08-08 13:18:41,347 INFO org.springframework.boot.logging.DeferredLog [restartedMain] The Class-Path manifest attribute in C:\Users\sonna\.m2\repository\io\grpc\grpc-netty-shaded\1.23.0\grpc-netty-shaded-1.23.0.jar referenced one or more files that do not exist: file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/grpc-core-1.23.0.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/grpc-api-1.23.0.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/gson-2.7.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/annotations-4.1.1.4.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/perfmark-api-0.17.0.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/opencensus-contrib-grpc-metrics-0.21.0.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/opencensus-api-0.21.0.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/grpc-context-1.23.0.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/error_prone_annotations-2.3.2.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/jsr305-3.0.2.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/animal-sniffer-annotations-1.17.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/guava-26.0-android.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/checker-compat-qual-2.5.2.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/j2objc-annotations-1.1.jar
2021-08-08 13:18:41,348 INFO org.springframework.boot.logging.DeferredLog [restartedMain] Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2021-08-08 13:18:41,348 INFO org.springframework.boot.logging.DeferredLog [restartedMain] For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2021-08-08 13:18:41,951 WARN org.springframework.core.log.CompositeLog [background-preinit] For Jackson Kotlin classes support please add "com.fasterxml.jackson.module:jackson-module-kotlin" to the classpath
2021-08-08 13:18:43,354 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [restartedMain] Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2021-08-08 13:18:43,679 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [restartedMain] Finished Spring Data repository scanning in 305 ms. Found 12 JPA repository interfaces.
2021-08-08 13:18:44,554 INFO org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [restartedMain] Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@74054626' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-08-08 13:18:44,570 INFO org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [restartedMain] Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-08-08 13:18:45,319 INFO org.springframework.boot.web.embedded.tomcat.TomcatWebServer [restartedMain] Tomcat initialized with port(s): 8082 (http)
2021-08-08 13:18:45,343 INFO org.apache.juli.logging.DirectJDKLog [restartedMain] Initializing ProtocolHandler ["http-nio-8082"]
2021-08-08 13:18:45,344 INFO org.apache.juli.logging.DirectJDKLog [restartedMain] Starting service [Tomcat]
2021-08-08 13:18:45,345 INFO org.apache.juli.logging.DirectJDKLog [restartedMain] Starting Servlet engine: [Apache Tomcat/9.0.46]
2021-08-08 13:18:45,633 INFO org.apache.juli.logging.DirectJDKLog [restartedMain] Initializing Spring embedded WebApplicationContext
2021-08-08 13:18:45,634 INFO org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext [restartedMain] Root WebApplicationContext: initialization completed in 4284 ms
2021-08-08 13:18:46,099 DEBUG org.springframework.web.filter.GenericFilterBean [restartedMain] Filter 'securityFilter' configured for use
2021-08-08 13:18:46,444 INFO org.hibernate.jpa.internal.util.LogHelper [restartedMain] HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2021-08-08 13:18:46,624 INFO org.hibernate.Version [restartedMain] HHH000412: Hibernate Core {5.2.17.Final}
2021-08-08 13:18:46,628 INFO org.hibernate.cfg.Environment [restartedMain] HHH000206: hibernate.properties not found
2021-08-08 13:18:46,730 INFO org.hibernate.annotations.common.reflection.java.JavaReflectionManager [restartedMain] HCANN000001: Hibernate Commons Annotations {5.0.1.Final}
2021-08-08 13:18:47,075 INFO com.zaxxer.hikari.HikariDataSource [restartedMain] HikariPool-1 - Starting...
2021-08-08 13:18:47,750 INFO com.zaxxer.hikari.HikariDataSource [restartedMain] HikariPool-1 - Start completed.
2021-08-08 13:18:47,777 INFO org.hibernate.dialect.Dialect [restartedMain] HHH000400: Using dialect: org.hibernate.dialect.MySQL55Dialect
2021-08-08 13:18:49,760 INFO org.springframework.orm.jpa.AbstractEntityManagerFactoryBean [restartedMain] Initialized JPA EntityManagerFactory for persistence unit 'default'
2021-08-08 13:18:51,185 INFO org.hibernate.hql.internal.QueryTranslatorFactoryInitiator [restartedMain] HHH000397: Using ASTQueryTranslatorFactory
2021-08-08 13:18:52,074 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] 
 _    _                           _     _
| |  | |                         (_)   | |
| |__| |_   _ _ __   ___ _ __ ___ _ ___| |_ ___ _ __   ___ ___
|  __  | | | | '_ \ / _ \ '__/ __| / __| __/ _ \ '_ \ / __/ _ \
| |  | | |_| | |_) |  __/ |  \__ \ \__ \ ||  __/ | | | (_|  __/
|_|  |_|\__, | .__/ \___|_|  |___/_|___/\__\___|_| |_|\___\___|
         __/ | |
        |___/|_|

           ____        _   _           _
          / __ \      | | (_)         (_)
         | |  | |_ __ | |_ _ _ __ ___  _ _______ _ __
         | |  | | '_ \| __| | '_ ` _ \| |_  / _ \ '__|
         | |__| | |_) | |_| | | | | | | |/ /  __/ |
          \____/| .__/ \__|_|_| |_| |_|_/___\___|_|
                | |
                |_|

2021-08-08 13:18:52,124 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - TableGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Team] entity uses the TABLE strategy, which does not scale very well. Consider using the IDENTITY identifier strategy instead, even if it does not allow JDBC batch inserts. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#TableGeneratorEvent
2021-08-08 13:18:52,132 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [agents] attribute in the [org.heartfulness.avtc.model.Team] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 13:18:52,135 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - ManyToManyCascadeRemoveEvent - The [agents] many-to-many association in the [org.heartfulness.avtc.model.Team] entity cascades the REMOVE operation. Cascading the REMOVE operation is not needed since the other side is also a parent association. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#ManyToManyCascadeRemoveEvent
2021-08-08 13:18:52,138 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [agents] collection in the [org.heartfulness.avtc.model.Team] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 13:18:52,144 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [language] attribute in the [org.heartfulness.avtc.model.Team] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 13:18:52,147 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [manager] attribute in the [org.heartfulness.avtc.model.Team] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 13:18:52,148 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - OneToOneWithoutMapsIdEvent - The [manager] one-to-one association in the [org.heartfulness.avtc.model.Team] entity is using a separate Foreign Key to reference the parent record. Consider using @MapsId so that the identifier is shared with the parent row. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#OneToOneWithoutMapsIdEvent
2021-08-08 13:18:52,151 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [service] attribute in the [org.heartfulness.avtc.model.Team] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 13:18:52,154 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [timeSlots] attribute in the [org.heartfulness.avtc.model.Team] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 13:18:52,154 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - ManyToManyCascadeRemoveEvent - The [timeSlots] many-to-many association in the [org.heartfulness.avtc.model.Team] entity cascades the REMOVE operation. Cascading the REMOVE operation is not needed since the other side is also a parent association. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#ManyToManyCascadeRemoveEvent
2021-08-08 13:18:52,156 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [timeSlots] bidirectional association in the [org.heartfulness.avtc.model.Team] entity requires both ends to be synchronized. Only the [addTimeSlot(org.heartfulness.avtc.model.TimeSlot timeSlot)] could be found. Consider adding the [removeTimeSlot(org.heartfulness.avtc.model.TimeSlot timeSlot)]  synchronization method as well. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 13:18:52,156 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [timeSlots] collection in the [org.heartfulness.avtc.model.Team] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 13:18:52,160 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - TableGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Service] entity uses the TABLE strategy, which does not scale very well. Consider using the IDENTITY identifier strategy instead, even if it does not allow JDBC batch inserts. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#TableGeneratorEvent
2021-08-08 13:18:52,164 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [Departments] attribute in the [org.heartfulness.avtc.model.Service] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 13:18:52,164 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [Departments] bidirectional association in the [org.heartfulness.avtc.model.Service] entity requires both ends to be synchronized. Consider adding the [addDepartment(org.heartfulness.avtc.model.Department department)] and [removeDepartment(org.heartfulness.avtc.model.Department department)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 13:18:52,164 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [Departments] collection in the [org.heartfulness.avtc.model.Service] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 13:18:52,169 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [teams] attribute in the [org.heartfulness.avtc.model.Service] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 13:18:52,169 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [teams] bidirectional association in the [org.heartfulness.avtc.model.Service] entity requires both ends to be synchronized. Consider adding the [addTeam(org.heartfulness.avtc.model.Team team)] and [removeTeam(org.heartfulness.avtc.model.Team team)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 13:18:52,170 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [teams] collection in the [org.heartfulness.avtc.model.Service] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 13:18:52,174 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - TableGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.TimeSlot] entity uses the TABLE strategy, which does not scale very well. Consider using the IDENTITY identifier strategy instead, even if it does not allow JDBC batch inserts. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#TableGeneratorEvent
2021-08-08 13:18:52,180 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [scheduleExceptions] attribute in the [org.heartfulness.avtc.model.TimeSlot] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 13:18:52,181 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [scheduleExceptions] bidirectional association in the [org.heartfulness.avtc.model.TimeSlot] entity requires both ends to be synchronized. Only the [addScheduleException(org.heartfulness.avtc.model.ScheduleException scheduleException)] could be found. Consider adding the [removeScheduleException(org.heartfulness.avtc.model.ScheduleException scheduleException)]  synchronization method as well. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 13:18:52,181 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [scheduleExceptions] collection in the [org.heartfulness.avtc.model.TimeSlot] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 13:18:52,186 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [teams] attribute in the [org.heartfulness.avtc.model.TimeSlot] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 13:18:52,186 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - ManyToManyCascadeRemoveEvent - The [teams] many-to-many association in the [org.heartfulness.avtc.model.TimeSlot] entity cascades the REMOVE operation. Cascading the REMOVE operation is not needed since the other side is also a parent association. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#ManyToManyCascadeRemoveEvent
2021-08-08 13:18:52,186 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [teams] collection in the [org.heartfulness.avtc.model.TimeSlot] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 13:18:52,193 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - TableGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.ScheduleException] entity uses the TABLE strategy, which does not scale very well. Consider using the IDENTITY identifier strategy instead, even if it does not allow JDBC batch inserts. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#TableGeneratorEvent
2021-08-08 13:18:52,199 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [agent] attribute in the [org.heartfulness.avtc.model.ScheduleException] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 13:18:52,204 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [slot] attribute in the [org.heartfulness.avtc.model.ScheduleException] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 13:18:52,207 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - TableGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Schedule] entity uses the TABLE strategy, which does not scale very well. Consider using the IDENTITY identifier strategy instead, even if it does not allow JDBC batch inserts. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#TableGeneratorEvent
2021-08-08 13:18:52,211 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [agent] attribute in the [org.heartfulness.avtc.model.Schedule] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 13:18:52,214 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - LargeColumnEvent - The [endTime] attribute in the [org.heartfulness.avtc.model.Schedule] entity is mapped to a large column type. Consider using either compact types or moving the large columns to separate tables or using multiple entities mapped to the same database table so that you can choose which properties are to be fetched from the database based on the entity type. You should use the @Basic(fetch=LAZY) annotation and activate the bytecode enhancement lazy loading mechanism as, otherwise, the column is fetched eagerly when loading the entity. You should use the @DynamicUpdate annotation so that the UPDATE statement contains only the columns that have been modified by the currently running Persistence Context. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#LargeColumnEvent
2021-08-08 13:18:52,217 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - LargeColumnEvent - The [startTime] attribute in the [org.heartfulness.avtc.model.Schedule] entity is mapped to a large column type. Consider using either compact types or moving the large columns to separate tables or using multiple entities mapped to the same database table so that you can choose which properties are to be fetched from the database based on the entity type. You should use the @Basic(fetch=LAZY) annotation and activate the bytecode enhancement lazy loading mechanism as, otherwise, the column is fetched eagerly when loading the entity. You should use the @DynamicUpdate annotation so that the UPDATE statement contains only the columns that have been modified by the currently running Persistence Context. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#LargeColumnEvent
2021-08-08 13:18:52,220 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - TableGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Logger] entity uses the TABLE strategy, which does not scale very well. Consider using the IDENTITY identifier strategy instead, even if it does not allow JDBC batch inserts. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#TableGeneratorEvent
2021-08-08 13:18:52,224 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [agent] attribute in the [org.heartfulness.avtc.model.Logger] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 13:18:52,232 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - TableGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Call] entity uses the TABLE strategy, which does not scale very well. Consider using the IDENTITY identifier strategy instead, even if it does not allow JDBC batch inserts. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#TableGeneratorEvent
2021-08-08 13:18:52,235 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [agent] attribute in the [org.heartfulness.avtc.model.Call] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 13:18:52,239 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - EnumTypeStringEvent - The [callStatus] enum attribute in the [org.heartfulness.avtc.model.Call] entity uses the EnumType.STRING strategy, which has a bigger memory footprint than EnumType.ORDINAL. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EnumTypeStringEvent
2021-08-08 13:18:52,241 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [caller] attribute in the [org.heartfulness.avtc.model.Call] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 13:18:52,244 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - EnumTypeStringEvent - The [category] enum attribute in the [org.heartfulness.avtc.model.Call] entity uses the EnumType.STRING strategy, which has a bigger memory footprint than EnumType.ORDINAL. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EnumTypeStringEvent
2021-08-08 13:18:52,257 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [leasing] bidirectional association in the [org.heartfulness.avtc.model.Call] entity requires both ends to be synchronized. Consider adding the [addAgent(org.heartfulness.avtc.model.Agent agent)] and [removeAgent(org.heartfulness.avtc.model.Agent agent)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 13:18:52,257 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [leasing] collection in the [org.heartfulness.avtc.model.Call] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 13:18:52,273 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - TableGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Agent] entity uses the TABLE strategy, which does not scale very well. Consider using the IDENTITY identifier strategy instead, even if it does not allow JDBC batch inserts. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#TableGeneratorEvent
2021-08-08 13:18:52,280 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [calls] bidirectional association in the [org.heartfulness.avtc.model.Agent] entity requires both ends to be synchronized. Consider adding the [addCall(org.heartfulness.avtc.model.Call call)] and [removeCall(org.heartfulness.avtc.model.Call call)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 13:18:52,281 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [calls] collection in the [org.heartfulness.avtc.model.Agent] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 13:18:52,295 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [departments] attribute in the [org.heartfulness.avtc.model.Agent] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 13:18:52,295 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - ManyToManyCascadeRemoveEvent - The [departments] many-to-many association in the [org.heartfulness.avtc.model.Agent] entity cascades the REMOVE operation. Cascading the REMOVE operation is not needed since the other side is also a parent association. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#ManyToManyCascadeRemoveEvent
2021-08-08 13:18:52,296 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [departments] collection in the [org.heartfulness.avtc.model.Agent] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 13:18:52,313 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [leasedBy] attribute in the [org.heartfulness.avtc.model.Agent] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 13:18:52,320 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [loggerSet] bidirectional association in the [org.heartfulness.avtc.model.Agent] entity requires both ends to be synchronized. Consider adding the [addLogger(org.heartfulness.avtc.model.Logger logger)] and [removeLogger(org.heartfulness.avtc.model.Logger logger)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 13:18:52,320 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [loggerSet] collection in the [org.heartfulness.avtc.model.Agent] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 13:18:52,340 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - EnumTypeStringEvent - The [role] enum attribute in the [org.heartfulness.avtc.model.Agent] entity uses the EnumType.STRING strategy, which has a bigger memory footprint than EnumType.ORDINAL. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EnumTypeStringEvent
2021-08-08 13:18:52,342 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [scheduleExceptions] attribute in the [org.heartfulness.avtc.model.Agent] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 13:18:52,343 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [scheduleExceptions] bidirectional association in the [org.heartfulness.avtc.model.Agent] entity requires both ends to be synchronized. Consider adding the [addScheduleException(org.heartfulness.avtc.model.ScheduleException scheduleException)] and [removeScheduleException(org.heartfulness.avtc.model.ScheduleException scheduleException)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 13:18:52,343 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [scheduleExceptions] collection in the [org.heartfulness.avtc.model.Agent] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 13:18:52,345 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [schedules] bidirectional association in the [org.heartfulness.avtc.model.Agent] entity requires both ends to be synchronized. Only the [addSchedule(org.heartfulness.avtc.model.Schedule schedule)] could be found. Consider adding the [removeSchedule(org.heartfulness.avtc.model.Schedule schedule)]  synchronization method as well. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 13:18:52,346 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [schedules] collection in the [org.heartfulness.avtc.model.Agent] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 13:18:52,363 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - ManyToManyCascadeRemoveEvent - The [teams] many-to-many association in the [org.heartfulness.avtc.model.Agent] entity cascades the REMOVE operation. Cascading the REMOVE operation is not needed since the other side is also a parent association. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#ManyToManyCascadeRemoveEvent
2021-08-08 13:18:52,364 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [teams] collection in the [org.heartfulness.avtc.model.Agent] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 13:18:52,372 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [teamManaged] attribute in the [org.heartfulness.avtc.model.Agent] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 13:18:52,375 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - OneToOneParentSideEvent - The [teamManaged] one-to-one association in the [class org.heartfulness.avtc.model.Agent] entity is mapped as the parent-side of this relationship. The parent-side of a one-to-one association is fetched eagerly unless bytecode enhancement lazy loading is enabled and the association is annotated with @LazyToOne(LazyToOneOption.NO_PROXY). For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#OneToOneParentSideEvent
2021-08-08 13:18:52,379 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - TableGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Department] entity uses the TABLE strategy, which does not scale very well. Consider using the IDENTITY identifier strategy instead, even if it does not allow JDBC batch inserts. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#TableGeneratorEvent
2021-08-08 13:18:52,383 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [agents] bidirectional association in the [org.heartfulness.avtc.model.Department] entity requires both ends to be synchronized. Only the [addAgent(org.heartfulness.avtc.model.Agent agent)] could be found. Consider adding the [removeAgent(org.heartfulness.avtc.model.Agent agent)]  synchronization method as well. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 13:18:52,383 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [agents] collection in the [org.heartfulness.avtc.model.Department] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 13:18:52,387 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [language] attribute in the [org.heartfulness.avtc.model.Department] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 13:18:52,390 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [service] attribute in the [org.heartfulness.avtc.model.Department] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 13:18:52,393 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - TableGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Language] entity uses the TABLE strategy, which does not scale very well. Consider using the IDENTITY identifier strategy instead, even if it does not allow JDBC batch inserts. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#TableGeneratorEvent
2021-08-08 13:18:52,397 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [Departments] attribute in the [org.heartfulness.avtc.model.Language] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 13:18:52,398 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [Departments] bidirectional association in the [org.heartfulness.avtc.model.Language] entity requires both ends to be synchronized. Consider adding the [addDepartment(org.heartfulness.avtc.model.Department department)] and [removeDepartment(org.heartfulness.avtc.model.Department department)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 13:18:52,398 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [Departments] collection in the [org.heartfulness.avtc.model.Language] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 13:18:52,400 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [callers] attribute in the [org.heartfulness.avtc.model.Language] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 13:18:52,401 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [callers] bidirectional association in the [org.heartfulness.avtc.model.Language] entity requires both ends to be synchronized. Consider adding the [addCaller(org.heartfulness.avtc.model.Caller caller)] and [removeCaller(org.heartfulness.avtc.model.Caller caller)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 13:18:52,402 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [callers] collection in the [org.heartfulness.avtc.model.Language] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 13:18:52,406 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [teams] attribute in the [org.heartfulness.avtc.model.Language] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 13:18:52,407 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [teams] bidirectional association in the [org.heartfulness.avtc.model.Language] entity requires both ends to be synchronized. Consider adding the [addTeam(org.heartfulness.avtc.model.Team team)] and [removeTeam(org.heartfulness.avtc.model.Team team)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 13:18:52,407 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [teams] collection in the [org.heartfulness.avtc.model.Language] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 13:18:52,411 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - TableGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Caller] entity uses the TABLE strategy, which does not scale very well. Consider using the IDENTITY identifier strategy instead, even if it does not allow JDBC batch inserts. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#TableGeneratorEvent
2021-08-08 13:18:52,416 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - EnumTypeStringEvent - The [ageGroup] enum attribute in the [org.heartfulness.avtc.model.Caller] entity uses the EnumType.STRING strategy, which has a bigger memory footprint than EnumType.ORDINAL. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EnumTypeStringEvent
2021-08-08 13:18:52,422 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [calls] attribute in the [org.heartfulness.avtc.model.Caller] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 13:18:52,423 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [calls] bidirectional association in the [org.heartfulness.avtc.model.Caller] entity requires both ends to be synchronized. Only the [addCall(org.heartfulness.avtc.model.Call call)] could be found. Consider adding the [removeCall(org.heartfulness.avtc.model.Call call)]  synchronization method as well. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 13:18:52,424 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [calls] collection in the [org.heartfulness.avtc.model.Caller] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 13:18:52,426 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - EnumTypeStringEvent - The [category] enum attribute in the [org.heartfulness.avtc.model.Caller] entity uses the EnumType.STRING strategy, which has a bigger memory footprint than EnumType.ORDINAL. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EnumTypeStringEvent
2021-08-08 13:18:52,456 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [languages] collection in the [org.heartfulness.avtc.model.Caller] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 13:18:52,507 INFO org.hibernate.dialect.Dialect [restartedMain] HHH000400: Using dialect: org.hibernate.dialect.MySQL57Dialect
2021-08-08 13:18:52,510 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - DialectVersionEvent - Your application is using the [org.hibernate.dialect.MySQL55Dialect] Hibernate-specific Dialect. Consider using the [org.hibernate.dialect.MySQL57Dialect] instead, as it's closer to your current database server version [MySQL 5.7]. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#DialectVersionEvent
2021-08-08 13:18:52,516 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - SkipAutoCommitCheckEvent - You should set the [hibernate.connection.provider_disables_autocommit] configuration property to [true] while also making sure that the underlying DataSource is configured to disable the auto-commit flag whenever a new Connection is being acquired. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#SkipAutoCommitCheckEvent
2021-08-08 13:18:52,527 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - JdbcBatchSizeEvent - If you set the [hibernate.jdbc.batch_size] configuration property to a value greater than 1 (usually between 5 and 30), Hibernate can then execute SQL statements in batches, therefore reducing the number of database network roundtrips. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#JdbcBatchSizeEvent
2021-08-08 13:18:52,535 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] BLOCKER - SchemaGenerationEvent - You should not set the [hibernate.hbm2ddl.auto] configuration property to the value of [update], as Hibernate will then manage the database schema for you. Instead, you should use an incremental schema migration tool (e.g., Flyway, Liquibase), which allows you to use any database-specific DDL construct. By storing the migration scripts in the Version Control System along with the application source code, you will always remember why a certain schema change was done. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#SchemaGenerationEvent
2021-08-08 13:18:52,540 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - QueryPaginationCollectionFetchingEvent - You should set the [hibernate.query.fail_on_pagination_over_collection_fetch] configuration property to the value of [true], as Hibernate can then prevent in-memory pagination when join fetching a child entity collection. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#QueryPaginationCollectionFetchingEvent
2021-08-08 13:18:52,542 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - DefaultQueryPlanCacheMaxSizeEvent - You should set the [hibernate.query.plan_cache_max_size] configuration property to a value that allows you to hold all JPQL, Criteria API, or SQL queries executed with Hibernate. The default query plan cache size is [2048] and might not be enough for a non-trivial application. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#DefaultQueryPlanCacheMaxSizeEvent
2021-08-08 13:18:52,549 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - JdbcStatementCacheSizeEvent - The JDBC statement cache is disabled. You should consider enabling it, as follows. You should set the [cachePrepStmts] JDBC configuration property to the value of [true] and the [prepStmtCacheSize] property to the value of [256] . Consider lowering the statement cache size if you don't have enough memory and increasing it if you have plenty of memory and need to execute lots of distinct SQL statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#JdbcStatementCacheSizeEvent
2021-08-08 13:18:52,551 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] 90 issues were found: 1 BLOCKER, 61 CRITICAL, 9 MAJOR, 19 MINOR
2021-08-08 13:18:52,717 INFO org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration [restartedMain] 

Using generated security password: 18d5db16-483b-4d2f-97d3-e35dd747ae1b

2021-08-08 13:18:53,226 INFO org.springframework.security.web.DefaultSecurityFilterChain [restartedMain] Will secure any request with [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@21f5d698, org.springframework.security.web.context.SecurityContextPersistenceFilter@3311356f, org.springframework.security.web.header.HeaderWriterFilter@62ef04e7, org.springframework.web.filter.CorsFilter@74896173, org.springframework.security.web.authentication.logout.LogoutFilter@34144e9f, org.heartfulness.avtc.security.auth.SecurityFilter@1c5714b4, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@6a228595, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@3c6dc6a4, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@64e89af5, org.springframework.security.web.session.SessionManagementFilter@77df9824, org.springframework.security.web.access.ExceptionTranslationFilter@7d8ba719, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@63423ebb]
2021-08-08 13:18:56,270 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [restartedMain] LiveReload server is running on port 35729
2021-08-08 13:18:56,324 INFO org.apache.juli.logging.DirectJDKLog [restartedMain] Starting ProtocolHandler ["http-nio-8082"]
2021-08-08 13:18:56,366 INFO org.springframework.boot.web.embedded.tomcat.TomcatWebServer [restartedMain] Tomcat started on port(s): 8082 (http) with context path ''
2021-08-08 13:18:56,397 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Started AvtcApplication in 16.029 seconds (JVM running for 21.218)
2021-08-08 13:18:56,401 INFO org.springframework.boot.availability.ApplicationAvailabilityBean [restartedMain] Application availability state LivenessState changed to CORRECT
2021-08-08 13:18:56,405 INFO org.springframework.boot.availability.ApplicationAvailabilityBean [restartedMain] Application availability state ReadinessState changed to ACCEPTING_TRAFFIC
2021-08-08 13:18:56,577 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 13:20:36,601 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 13:20:53,752 INFO org.hibernate.validator.internal.util.Version [background-preinit] HV000001: Hibernate Validator 6.2.0.Final
2021-08-08 13:20:53,755 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting AvtcApplication using Java 11.0.10 on DESKTOP-BIBH7GP with PID 29920 (C:\Users\sonna\IdeaProjects\avtc\target\classes started by sonna in C:\Users\sonna\IdeaProjects\avtc)
2021-08-08 13:20:53,763 DEBUG org.springframework.boot.StartupInfoLogger [restartedMain] Running with Spring Boot v2.5.0, Spring v5.3.7
2021-08-08 13:20:53,764 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2021-08-08 13:20:53,849 INFO org.springframework.boot.logging.DeferredLog [restartedMain] The Class-Path manifest attribute in C:\Users\sonna\.m2\repository\org\glassfish\hk2\hk2\2.6.1\hk2-2.6.1.jar referenced one or more files that do not exist: file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/hk2-utils.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/jakarta.annotation-api.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/jakarta.inject.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/hk2-api.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/aopalliance-repackaged.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/hk2-core.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/hk2-locator.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/javassist.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/hk2-runlevel.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/class-model.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/asm.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/asm-analysis.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/asm-commons.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/asm-tree.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/asm-util.jar
2021-08-08 13:20:53,850 INFO org.springframework.boot.logging.DeferredLog [restartedMain] The Class-Path manifest attribute in C:\Users\sonna\.m2\repository\io\grpc\grpc-netty-shaded\1.23.0\grpc-netty-shaded-1.23.0.jar referenced one or more files that do not exist: file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/grpc-core-1.23.0.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/grpc-api-1.23.0.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/gson-2.7.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/annotations-4.1.1.4.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/perfmark-api-0.17.0.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/opencensus-contrib-grpc-metrics-0.21.0.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/opencensus-api-0.21.0.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/grpc-context-1.23.0.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/error_prone_annotations-2.3.2.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/jsr305-3.0.2.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/animal-sniffer-annotations-1.17.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/guava-26.0-android.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/checker-compat-qual-2.5.2.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/j2objc-annotations-1.1.jar
2021-08-08 13:20:53,851 INFO org.springframework.boot.logging.DeferredLog [restartedMain] Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2021-08-08 13:20:53,851 INFO org.springframework.boot.logging.DeferredLog [restartedMain] For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2021-08-08 13:20:54,333 WARN org.springframework.core.log.CompositeLog [background-preinit] For Jackson Kotlin classes support please add "com.fasterxml.jackson.module:jackson-module-kotlin" to the classpath
2021-08-08 13:20:55,501 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [restartedMain] Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2021-08-08 13:20:55,787 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [restartedMain] Finished Spring Data repository scanning in 269 ms. Found 12 JPA repository interfaces.
2021-08-08 13:20:56,618 INFO org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [restartedMain] Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@242bc798' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-08-08 13:20:56,634 INFO org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [restartedMain] Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-08-08 13:20:57,354 INFO org.springframework.boot.web.embedded.tomcat.TomcatWebServer [restartedMain] Tomcat initialized with port(s): 8082 (http)
2021-08-08 13:20:57,370 INFO org.apache.juli.logging.DirectJDKLog [restartedMain] Initializing ProtocolHandler ["http-nio-8082"]
2021-08-08 13:20:57,371 INFO org.apache.juli.logging.DirectJDKLog [restartedMain] Starting service [Tomcat]
2021-08-08 13:20:57,371 INFO org.apache.juli.logging.DirectJDKLog [restartedMain] Starting Servlet engine: [Apache Tomcat/9.0.46]
2021-08-08 13:20:57,637 INFO org.apache.juli.logging.DirectJDKLog [restartedMain] Initializing Spring embedded WebApplicationContext
2021-08-08 13:20:57,637 INFO org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext [restartedMain] Root WebApplicationContext: initialization completed in 3784 ms
2021-08-08 13:20:58,073 DEBUG org.springframework.web.filter.GenericFilterBean [restartedMain] Filter 'securityFilter' configured for use
2021-08-08 13:20:58,395 INFO org.hibernate.jpa.internal.util.LogHelper [restartedMain] HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2021-08-08 13:20:58,535 INFO org.hibernate.Version [restartedMain] HHH000412: Hibernate Core {5.2.17.Final}
2021-08-08 13:20:58,539 INFO org.hibernate.cfg.Environment [restartedMain] HHH000206: hibernate.properties not found
2021-08-08 13:20:58,620 INFO org.hibernate.annotations.common.reflection.java.JavaReflectionManager [restartedMain] HCANN000001: Hibernate Commons Annotations {5.0.1.Final}
2021-08-08 13:20:58,903 INFO com.zaxxer.hikari.HikariDataSource [restartedMain] HikariPool-1 - Starting...
2021-08-08 13:20:59,509 INFO com.zaxxer.hikari.HikariDataSource [restartedMain] HikariPool-1 - Start completed.
2021-08-08 13:20:59,534 INFO org.hibernate.dialect.Dialect [restartedMain] HHH000400: Using dialect: org.hibernate.dialect.MySQL55Dialect
2021-08-08 13:21:02,993 INFO org.hibernate.tool.schema.internal.SchemaCreatorImpl [restartedMain] HHH000476: Executing import script 'org.hibernate.tool.schema.internal.exec.ScriptSourceInputNonExistentImpl@79bfae3f'
2021-08-08 13:21:03,006 INFO org.springframework.orm.jpa.AbstractEntityManagerFactoryBean [restartedMain] Initialized JPA EntityManagerFactory for persistence unit 'default'
2021-08-08 13:21:04,405 INFO org.hibernate.hql.internal.QueryTranslatorFactoryInitiator [restartedMain] HHH000397: Using ASTQueryTranslatorFactory
2021-08-08 13:21:05,290 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] 
 _    _                           _     _
| |  | |                         (_)   | |
| |__| |_   _ _ __   ___ _ __ ___ _ ___| |_ ___ _ __   ___ ___
|  __  | | | | '_ \ / _ \ '__/ __| / __| __/ _ \ '_ \ / __/ _ \
| |  | | |_| | |_) |  __/ |  \__ \ \__ \ ||  __/ | | | (_|  __/
|_|  |_|\__, | .__/ \___|_|  |___/_|___/\__\___|_| |_|\___\___|
         __/ | |
        |___/|_|

           ____        _   _           _
          / __ \      | | (_)         (_)
         | |  | |_ __ | |_ _ _ __ ___  _ _______ _ __
         | |  | | '_ \| __| | '_ ` _ \| |_  / _ \ '__|
         | |__| | |_) | |_| | | | | | | |/ /  __/ |
          \____/| .__/ \__|_|_| |_| |_|_/___\___|_|
                | |
                |_|

2021-08-08 13:21:05,336 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - TableGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Team] entity uses the TABLE strategy, which does not scale very well. Consider using the IDENTITY identifier strategy instead, even if it does not allow JDBC batch inserts. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#TableGeneratorEvent
2021-08-08 13:21:05,345 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [agents] attribute in the [org.heartfulness.avtc.model.Team] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 13:21:05,349 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - ManyToManyCascadeRemoveEvent - The [agents] many-to-many association in the [org.heartfulness.avtc.model.Team] entity cascades the REMOVE operation. Cascading the REMOVE operation is not needed since the other side is also a parent association. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#ManyToManyCascadeRemoveEvent
2021-08-08 13:21:05,353 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [agents] collection in the [org.heartfulness.avtc.model.Team] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 13:21:05,360 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [language] attribute in the [org.heartfulness.avtc.model.Team] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 13:21:05,363 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [manager] attribute in the [org.heartfulness.avtc.model.Team] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 13:21:05,364 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - OneToOneWithoutMapsIdEvent - The [manager] one-to-one association in the [org.heartfulness.avtc.model.Team] entity is using a separate Foreign Key to reference the parent record. Consider using @MapsId so that the identifier is shared with the parent row. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#OneToOneWithoutMapsIdEvent
2021-08-08 13:21:05,367 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [service] attribute in the [org.heartfulness.avtc.model.Team] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 13:21:05,370 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [timeSlots] attribute in the [org.heartfulness.avtc.model.Team] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 13:21:05,371 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - ManyToManyCascadeRemoveEvent - The [timeSlots] many-to-many association in the [org.heartfulness.avtc.model.Team] entity cascades the REMOVE operation. Cascading the REMOVE operation is not needed since the other side is also a parent association. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#ManyToManyCascadeRemoveEvent
2021-08-08 13:21:05,373 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [timeSlots] bidirectional association in the [org.heartfulness.avtc.model.Team] entity requires both ends to be synchronized. Only the [addTimeSlot(org.heartfulness.avtc.model.TimeSlot timeSlot)] could be found. Consider adding the [removeTimeSlot(org.heartfulness.avtc.model.TimeSlot timeSlot)]  synchronization method as well. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 13:21:05,373 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [timeSlots] collection in the [org.heartfulness.avtc.model.Team] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 13:21:05,377 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - TableGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Service] entity uses the TABLE strategy, which does not scale very well. Consider using the IDENTITY identifier strategy instead, even if it does not allow JDBC batch inserts. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#TableGeneratorEvent
2021-08-08 13:21:05,381 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [Departments] attribute in the [org.heartfulness.avtc.model.Service] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 13:21:05,381 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [Departments] bidirectional association in the [org.heartfulness.avtc.model.Service] entity requires both ends to be synchronized. Consider adding the [addDepartment(org.heartfulness.avtc.model.Department department)] and [removeDepartment(org.heartfulness.avtc.model.Department department)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 13:21:05,382 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [Departments] collection in the [org.heartfulness.avtc.model.Service] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 13:21:05,387 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [teams] attribute in the [org.heartfulness.avtc.model.Service] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 13:21:05,387 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [teams] bidirectional association in the [org.heartfulness.avtc.model.Service] entity requires both ends to be synchronized. Consider adding the [addTeam(org.heartfulness.avtc.model.Team team)] and [removeTeam(org.heartfulness.avtc.model.Team team)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 13:21:05,388 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [teams] collection in the [org.heartfulness.avtc.model.Service] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 13:21:05,392 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - TableGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.TimeSlot] entity uses the TABLE strategy, which does not scale very well. Consider using the IDENTITY identifier strategy instead, even if it does not allow JDBC batch inserts. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#TableGeneratorEvent
2021-08-08 13:21:05,398 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [scheduleExceptions] attribute in the [org.heartfulness.avtc.model.TimeSlot] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 13:21:05,398 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [scheduleExceptions] bidirectional association in the [org.heartfulness.avtc.model.TimeSlot] entity requires both ends to be synchronized. Only the [addScheduleException(org.heartfulness.avtc.model.ScheduleException scheduleException)] could be found. Consider adding the [removeScheduleException(org.heartfulness.avtc.model.ScheduleException scheduleException)]  synchronization method as well. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 13:21:05,399 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [scheduleExceptions] collection in the [org.heartfulness.avtc.model.TimeSlot] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 13:21:05,403 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [teams] attribute in the [org.heartfulness.avtc.model.TimeSlot] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 13:21:05,404 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - ManyToManyCascadeRemoveEvent - The [teams] many-to-many association in the [org.heartfulness.avtc.model.TimeSlot] entity cascades the REMOVE operation. Cascading the REMOVE operation is not needed since the other side is also a parent association. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#ManyToManyCascadeRemoveEvent
2021-08-08 13:21:05,404 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [teams] collection in the [org.heartfulness.avtc.model.TimeSlot] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 13:21:05,411 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - TableGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.ScheduleException] entity uses the TABLE strategy, which does not scale very well. Consider using the IDENTITY identifier strategy instead, even if it does not allow JDBC batch inserts. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#TableGeneratorEvent
2021-08-08 13:21:05,417 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [agent] attribute in the [org.heartfulness.avtc.model.ScheduleException] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 13:21:05,422 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [slot] attribute in the [org.heartfulness.avtc.model.ScheduleException] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 13:21:05,426 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - TableGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Schedule] entity uses the TABLE strategy, which does not scale very well. Consider using the IDENTITY identifier strategy instead, even if it does not allow JDBC batch inserts. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#TableGeneratorEvent
2021-08-08 13:21:05,429 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [agent] attribute in the [org.heartfulness.avtc.model.Schedule] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 13:21:05,434 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - LargeColumnEvent - The [endTime] attribute in the [org.heartfulness.avtc.model.Schedule] entity is mapped to a large column type. Consider using either compact types or moving the large columns to separate tables or using multiple entities mapped to the same database table so that you can choose which properties are to be fetched from the database based on the entity type. You should use the @Basic(fetch=LAZY) annotation and activate the bytecode enhancement lazy loading mechanism as, otherwise, the column is fetched eagerly when loading the entity. You should use the @DynamicUpdate annotation so that the UPDATE statement contains only the columns that have been modified by the currently running Persistence Context. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#LargeColumnEvent
2021-08-08 13:21:05,436 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - LargeColumnEvent - The [startTime] attribute in the [org.heartfulness.avtc.model.Schedule] entity is mapped to a large column type. Consider using either compact types or moving the large columns to separate tables or using multiple entities mapped to the same database table so that you can choose which properties are to be fetched from the database based on the entity type. You should use the @Basic(fetch=LAZY) annotation and activate the bytecode enhancement lazy loading mechanism as, otherwise, the column is fetched eagerly when loading the entity. You should use the @DynamicUpdate annotation so that the UPDATE statement contains only the columns that have been modified by the currently running Persistence Context. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#LargeColumnEvent
2021-08-08 13:21:05,440 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - TableGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Logger] entity uses the TABLE strategy, which does not scale very well. Consider using the IDENTITY identifier strategy instead, even if it does not allow JDBC batch inserts. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#TableGeneratorEvent
2021-08-08 13:21:05,444 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [agent] attribute in the [org.heartfulness.avtc.model.Logger] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 13:21:05,452 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - TableGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Call] entity uses the TABLE strategy, which does not scale very well. Consider using the IDENTITY identifier strategy instead, even if it does not allow JDBC batch inserts. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#TableGeneratorEvent
2021-08-08 13:21:05,455 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [agent] attribute in the [org.heartfulness.avtc.model.Call] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 13:21:05,459 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - EnumTypeStringEvent - The [callStatus] enum attribute in the [org.heartfulness.avtc.model.Call] entity uses the EnumType.STRING strategy, which has a bigger memory footprint than EnumType.ORDINAL. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EnumTypeStringEvent
2021-08-08 13:21:05,462 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [caller] attribute in the [org.heartfulness.avtc.model.Call] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 13:21:05,465 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - EnumTypeStringEvent - The [category] enum attribute in the [org.heartfulness.avtc.model.Call] entity uses the EnumType.STRING strategy, which has a bigger memory footprint than EnumType.ORDINAL. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EnumTypeStringEvent
2021-08-08 13:21:05,482 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [leasing] bidirectional association in the [org.heartfulness.avtc.model.Call] entity requires both ends to be synchronized. Consider adding the [addAgent(org.heartfulness.avtc.model.Agent agent)] and [removeAgent(org.heartfulness.avtc.model.Agent agent)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 13:21:05,483 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [leasing] collection in the [org.heartfulness.avtc.model.Call] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 13:21:05,503 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - TableGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Agent] entity uses the TABLE strategy, which does not scale very well. Consider using the IDENTITY identifier strategy instead, even if it does not allow JDBC batch inserts. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#TableGeneratorEvent
2021-08-08 13:21:05,513 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [calls] bidirectional association in the [org.heartfulness.avtc.model.Agent] entity requires both ends to be synchronized. Consider adding the [addCall(org.heartfulness.avtc.model.Call call)] and [removeCall(org.heartfulness.avtc.model.Call call)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 13:21:05,514 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [calls] collection in the [org.heartfulness.avtc.model.Agent] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 13:21:05,531 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [departments] attribute in the [org.heartfulness.avtc.model.Agent] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 13:21:05,532 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - ManyToManyCascadeRemoveEvent - The [departments] many-to-many association in the [org.heartfulness.avtc.model.Agent] entity cascades the REMOVE operation. Cascading the REMOVE operation is not needed since the other side is also a parent association. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#ManyToManyCascadeRemoveEvent
2021-08-08 13:21:05,532 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [departments] collection in the [org.heartfulness.avtc.model.Agent] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 13:21:05,550 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [leasedBy] attribute in the [org.heartfulness.avtc.model.Agent] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 13:21:05,554 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [loggerSet] bidirectional association in the [org.heartfulness.avtc.model.Agent] entity requires both ends to be synchronized. Consider adding the [addLogger(org.heartfulness.avtc.model.Logger logger)] and [removeLogger(org.heartfulness.avtc.model.Logger logger)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 13:21:05,555 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [loggerSet] collection in the [org.heartfulness.avtc.model.Agent] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 13:21:05,574 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - EnumTypeStringEvent - The [role] enum attribute in the [org.heartfulness.avtc.model.Agent] entity uses the EnumType.STRING strategy, which has a bigger memory footprint than EnumType.ORDINAL. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EnumTypeStringEvent
2021-08-08 13:21:05,577 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [scheduleExceptions] attribute in the [org.heartfulness.avtc.model.Agent] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 13:21:05,578 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [scheduleExceptions] bidirectional association in the [org.heartfulness.avtc.model.Agent] entity requires both ends to be synchronized. Consider adding the [addScheduleException(org.heartfulness.avtc.model.ScheduleException scheduleException)] and [removeScheduleException(org.heartfulness.avtc.model.ScheduleException scheduleException)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 13:21:05,578 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [scheduleExceptions] collection in the [org.heartfulness.avtc.model.Agent] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 13:21:05,582 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [schedules] bidirectional association in the [org.heartfulness.avtc.model.Agent] entity requires both ends to be synchronized. Only the [addSchedule(org.heartfulness.avtc.model.Schedule schedule)] could be found. Consider adding the [removeSchedule(org.heartfulness.avtc.model.Schedule schedule)]  synchronization method as well. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 13:21:05,582 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [schedules] collection in the [org.heartfulness.avtc.model.Agent] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 13:21:05,597 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - ManyToManyCascadeRemoveEvent - The [teams] many-to-many association in the [org.heartfulness.avtc.model.Agent] entity cascades the REMOVE operation. Cascading the REMOVE operation is not needed since the other side is also a parent association. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#ManyToManyCascadeRemoveEvent
2021-08-08 13:21:05,598 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [teams] collection in the [org.heartfulness.avtc.model.Agent] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 13:21:05,606 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [teamManaged] attribute in the [org.heartfulness.avtc.model.Agent] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 13:21:05,609 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - OneToOneParentSideEvent - The [teamManaged] one-to-one association in the [class org.heartfulness.avtc.model.Agent] entity is mapped as the parent-side of this relationship. The parent-side of a one-to-one association is fetched eagerly unless bytecode enhancement lazy loading is enabled and the association is annotated with @LazyToOne(LazyToOneOption.NO_PROXY). For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#OneToOneParentSideEvent
2021-08-08 13:21:05,613 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - TableGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Department] entity uses the TABLE strategy, which does not scale very well. Consider using the IDENTITY identifier strategy instead, even if it does not allow JDBC batch inserts. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#TableGeneratorEvent
2021-08-08 13:21:05,617 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [agents] bidirectional association in the [org.heartfulness.avtc.model.Department] entity requires both ends to be synchronized. Only the [addAgent(org.heartfulness.avtc.model.Agent agent)] could be found. Consider adding the [removeAgent(org.heartfulness.avtc.model.Agent agent)]  synchronization method as well. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 13:21:05,617 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [agents] collection in the [org.heartfulness.avtc.model.Department] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 13:21:05,619 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [language] attribute in the [org.heartfulness.avtc.model.Department] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 13:21:05,622 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [service] attribute in the [org.heartfulness.avtc.model.Department] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 13:21:05,626 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - TableGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Language] entity uses the TABLE strategy, which does not scale very well. Consider using the IDENTITY identifier strategy instead, even if it does not allow JDBC batch inserts. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#TableGeneratorEvent
2021-08-08 13:21:05,630 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [Departments] attribute in the [org.heartfulness.avtc.model.Language] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 13:21:05,630 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [Departments] bidirectional association in the [org.heartfulness.avtc.model.Language] entity requires both ends to be synchronized. Consider adding the [addDepartment(org.heartfulness.avtc.model.Department department)] and [removeDepartment(org.heartfulness.avtc.model.Department department)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 13:21:05,631 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [Departments] collection in the [org.heartfulness.avtc.model.Language] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 13:21:05,633 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [callers] attribute in the [org.heartfulness.avtc.model.Language] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 13:21:05,634 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [callers] bidirectional association in the [org.heartfulness.avtc.model.Language] entity requires both ends to be synchronized. Consider adding the [addCaller(org.heartfulness.avtc.model.Caller caller)] and [removeCaller(org.heartfulness.avtc.model.Caller caller)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 13:21:05,634 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [callers] collection in the [org.heartfulness.avtc.model.Language] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 13:21:05,639 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [teams] attribute in the [org.heartfulness.avtc.model.Language] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 13:21:05,639 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [teams] bidirectional association in the [org.heartfulness.avtc.model.Language] entity requires both ends to be synchronized. Consider adding the [addTeam(org.heartfulness.avtc.model.Team team)] and [removeTeam(org.heartfulness.avtc.model.Team team)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 13:21:05,640 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [teams] collection in the [org.heartfulness.avtc.model.Language] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 13:21:05,644 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - TableGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Caller] entity uses the TABLE strategy, which does not scale very well. Consider using the IDENTITY identifier strategy instead, even if it does not allow JDBC batch inserts. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#TableGeneratorEvent
2021-08-08 13:21:05,649 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - EnumTypeStringEvent - The [ageGroup] enum attribute in the [org.heartfulness.avtc.model.Caller] entity uses the EnumType.STRING strategy, which has a bigger memory footprint than EnumType.ORDINAL. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EnumTypeStringEvent
2021-08-08 13:21:05,655 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [calls] attribute in the [org.heartfulness.avtc.model.Caller] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 13:21:05,656 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [calls] bidirectional association in the [org.heartfulness.avtc.model.Caller] entity requires both ends to be synchronized. Only the [addCall(org.heartfulness.avtc.model.Call call)] could be found. Consider adding the [removeCall(org.heartfulness.avtc.model.Call call)]  synchronization method as well. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 13:21:05,656 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [calls] collection in the [org.heartfulness.avtc.model.Caller] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 13:21:05,659 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - EnumTypeStringEvent - The [category] enum attribute in the [org.heartfulness.avtc.model.Caller] entity uses the EnumType.STRING strategy, which has a bigger memory footprint than EnumType.ORDINAL. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EnumTypeStringEvent
2021-08-08 13:21:05,695 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [languages] collection in the [org.heartfulness.avtc.model.Caller] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 13:21:05,741 INFO org.hibernate.dialect.Dialect [restartedMain] HHH000400: Using dialect: org.hibernate.dialect.MySQL57Dialect
2021-08-08 13:21:05,744 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - DialectVersionEvent - Your application is using the [org.hibernate.dialect.MySQL55Dialect] Hibernate-specific Dialect. Consider using the [org.hibernate.dialect.MySQL57Dialect] instead, as it's closer to your current database server version [MySQL 5.7]. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#DialectVersionEvent
2021-08-08 13:21:05,749 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - SkipAutoCommitCheckEvent - You should set the [hibernate.connection.provider_disables_autocommit] configuration property to [true] while also making sure that the underlying DataSource is configured to disable the auto-commit flag whenever a new Connection is being acquired. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#SkipAutoCommitCheckEvent
2021-08-08 13:21:05,758 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - JdbcBatchSizeEvent - If you set the [hibernate.jdbc.batch_size] configuration property to a value greater than 1 (usually between 5 and 30), Hibernate can then execute SQL statements in batches, therefore reducing the number of database network roundtrips. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#JdbcBatchSizeEvent
2021-08-08 13:21:05,769 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] BLOCKER - SchemaGenerationEvent - You should not set the [hibernate.hbm2ddl.auto] configuration property to the value of [create], as Hibernate will then manage the database schema for you. Instead, you should use an incremental schema migration tool (e.g., Flyway, Liquibase), which allows you to use any database-specific DDL construct. By storing the migration scripts in the Version Control System along with the application source code, you will always remember why a certain schema change was done. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#SchemaGenerationEvent
2021-08-08 13:21:05,775 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - QueryPaginationCollectionFetchingEvent - You should set the [hibernate.query.fail_on_pagination_over_collection_fetch] configuration property to the value of [true], as Hibernate can then prevent in-memory pagination when join fetching a child entity collection. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#QueryPaginationCollectionFetchingEvent
2021-08-08 13:21:05,778 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - DefaultQueryPlanCacheMaxSizeEvent - You should set the [hibernate.query.plan_cache_max_size] configuration property to a value that allows you to hold all JPQL, Criteria API, or SQL queries executed with Hibernate. The default query plan cache size is [2048] and might not be enough for a non-trivial application. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#DefaultQueryPlanCacheMaxSizeEvent
2021-08-08 13:21:05,786 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - JdbcStatementCacheSizeEvent - The JDBC statement cache is disabled. You should consider enabling it, as follows. You should set the [cachePrepStmts] JDBC configuration property to the value of [true] and the [prepStmtCacheSize] property to the value of [256] . Consider lowering the statement cache size if you don't have enough memory and increasing it if you have plenty of memory and need to execute lots of distinct SQL statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#JdbcStatementCacheSizeEvent
2021-08-08 13:21:05,787 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] 90 issues were found: 1 BLOCKER, 61 CRITICAL, 9 MAJOR, 19 MINOR
2021-08-08 13:21:05,941 INFO org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration [restartedMain] 

Using generated security password: b73ce06e-e2f8-4031-9445-f73f2682b8c3

2021-08-08 13:21:06,450 INFO org.springframework.security.web.DefaultSecurityFilterChain [restartedMain] Will secure any request with [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@5560145e, org.springframework.security.web.context.SecurityContextPersistenceFilter@48cbf958, org.springframework.security.web.header.HeaderWriterFilter@500fa70e, org.springframework.web.filter.CorsFilter@30aa5490, org.springframework.security.web.authentication.logout.LogoutFilter@47ad010b, org.heartfulness.avtc.security.auth.SecurityFilter@492ceacd, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@b0865c0, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@4412746f, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@7cc67aa7, org.springframework.security.web.session.SessionManagementFilter@702379bb, org.springframework.security.web.access.ExceptionTranslationFilter@690ddc94, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@6e0440cc]
2021-08-08 13:21:09,554 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [restartedMain] LiveReload server is running on port 35729
2021-08-08 13:21:09,611 INFO org.apache.juli.logging.DirectJDKLog [restartedMain] Starting ProtocolHandler ["http-nio-8082"]
2021-08-08 13:21:09,659 INFO org.springframework.boot.web.embedded.tomcat.TomcatWebServer [restartedMain] Tomcat started on port(s): 8082 (http) with context path ''
2021-08-08 13:21:09,689 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Started AvtcApplication in 16.638 seconds (JVM running for 19.995)
2021-08-08 13:21:09,695 INFO org.springframework.boot.availability.ApplicationAvailabilityBean [restartedMain] Application availability state LivenessState changed to CORRECT
2021-08-08 13:21:09,701 INFO org.springframework.boot.availability.ApplicationAvailabilityBean [restartedMain] Application availability state ReadinessState changed to ACCEPTING_TRAFFIC
2021-08-08 13:21:09,850 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 13:22:49,866 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 13:24:29,886 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 13:24:44,545 INFO org.hibernate.validator.internal.util.Version [background-preinit] HV000001: Hibernate Validator 6.2.0.Final
2021-08-08 13:24:44,549 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting AvtcApplication using Java 11.0.10 on DESKTOP-BIBH7GP with PID 25624 (C:\Users\sonna\IdeaProjects\avtc\target\classes started by sonna in C:\Users\sonna\IdeaProjects\avtc)
2021-08-08 13:24:44,555 DEBUG org.springframework.boot.StartupInfoLogger [restartedMain] Running with Spring Boot v2.5.0, Spring v5.3.7
2021-08-08 13:24:44,556 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2021-08-08 13:24:44,665 INFO org.springframework.boot.logging.DeferredLog [restartedMain] The Class-Path manifest attribute in C:\Users\sonna\.m2\repository\org\glassfish\hk2\hk2\2.6.1\hk2-2.6.1.jar referenced one or more files that do not exist: file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/hk2-utils.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/jakarta.annotation-api.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/jakarta.inject.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/hk2-api.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/aopalliance-repackaged.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/hk2-core.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/hk2-locator.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/javassist.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/hk2-runlevel.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/class-model.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/asm.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/asm-analysis.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/asm-commons.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/asm-tree.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/asm-util.jar
2021-08-08 13:24:44,666 INFO org.springframework.boot.logging.DeferredLog [restartedMain] The Class-Path manifest attribute in C:\Users\sonna\.m2\repository\io\grpc\grpc-netty-shaded\1.23.0\grpc-netty-shaded-1.23.0.jar referenced one or more files that do not exist: file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/grpc-core-1.23.0.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/grpc-api-1.23.0.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/gson-2.7.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/annotations-4.1.1.4.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/perfmark-api-0.17.0.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/opencensus-contrib-grpc-metrics-0.21.0.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/opencensus-api-0.21.0.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/grpc-context-1.23.0.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/error_prone_annotations-2.3.2.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/jsr305-3.0.2.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/animal-sniffer-annotations-1.17.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/guava-26.0-android.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/checker-compat-qual-2.5.2.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/j2objc-annotations-1.1.jar
2021-08-08 13:24:44,667 INFO org.springframework.boot.logging.DeferredLog [restartedMain] Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2021-08-08 13:24:44,668 INFO org.springframework.boot.logging.DeferredLog [restartedMain] For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2021-08-08 13:24:45,246 WARN org.springframework.core.log.CompositeLog [background-preinit] For Jackson Kotlin classes support please add "com.fasterxml.jackson.module:jackson-module-kotlin" to the classpath
2021-08-08 13:24:46,488 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [restartedMain] Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2021-08-08 13:24:46,787 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [restartedMain] Finished Spring Data repository scanning in 282 ms. Found 12 JPA repository interfaces.
2021-08-08 13:24:47,683 INFO org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [restartedMain] Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@6783a9c5' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-08-08 13:24:47,700 INFO org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [restartedMain] Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-08-08 13:24:48,448 INFO org.springframework.boot.web.embedded.tomcat.TomcatWebServer [restartedMain] Tomcat initialized with port(s): 8082 (http)
2021-08-08 13:24:48,465 INFO org.apache.juli.logging.DirectJDKLog [restartedMain] Initializing ProtocolHandler ["http-nio-8082"]
2021-08-08 13:24:48,466 INFO org.apache.juli.logging.DirectJDKLog [restartedMain] Starting service [Tomcat]
2021-08-08 13:24:48,467 INFO org.apache.juli.logging.DirectJDKLog [restartedMain] Starting Servlet engine: [Apache Tomcat/9.0.46]
2021-08-08 13:24:48,736 INFO org.apache.juli.logging.DirectJDKLog [restartedMain] Initializing Spring embedded WebApplicationContext
2021-08-08 13:24:48,737 INFO org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext [restartedMain] Root WebApplicationContext: initialization completed in 4067 ms
2021-08-08 13:24:49,190 DEBUG org.springframework.web.filter.GenericFilterBean [restartedMain] Filter 'securityFilter' configured for use
2021-08-08 13:24:49,526 INFO org.hibernate.jpa.internal.util.LogHelper [restartedMain] HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2021-08-08 13:24:49,663 INFO org.hibernate.Version [restartedMain] HHH000412: Hibernate Core {5.2.17.Final}
2021-08-08 13:24:49,667 INFO org.hibernate.cfg.Environment [restartedMain] HHH000206: hibernate.properties not found
2021-08-08 13:24:49,750 INFO org.hibernate.annotations.common.reflection.java.JavaReflectionManager [restartedMain] HCANN000001: Hibernate Commons Annotations {5.0.1.Final}
2021-08-08 13:24:50,077 INFO com.zaxxer.hikari.HikariDataSource [restartedMain] HikariPool-1 - Starting...
2021-08-08 13:24:50,942 INFO com.zaxxer.hikari.HikariDataSource [restartedMain] HikariPool-1 - Start completed.
2021-08-08 13:24:50,968 INFO org.hibernate.dialect.Dialect [restartedMain] HHH000400: Using dialect: org.hibernate.dialect.MySQL55Dialect
2021-08-08 13:24:54,598 INFO org.hibernate.tool.schema.internal.SchemaCreatorImpl [restartedMain] HHH000476: Executing import script 'org.hibernate.tool.schema.internal.exec.ScriptSourceInputNonExistentImpl@531df222'
2021-08-08 13:24:54,608 INFO org.springframework.orm.jpa.AbstractEntityManagerFactoryBean [restartedMain] Initialized JPA EntityManagerFactory for persistence unit 'default'
2021-08-08 13:24:56,114 INFO org.hibernate.hql.internal.QueryTranslatorFactoryInitiator [restartedMain] HHH000397: Using ASTQueryTranslatorFactory
2021-08-08 13:24:57,128 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] 
 _    _                           _     _
| |  | |                         (_)   | |
| |__| |_   _ _ __   ___ _ __ ___ _ ___| |_ ___ _ __   ___ ___
|  __  | | | | '_ \ / _ \ '__/ __| / __| __/ _ \ '_ \ / __/ _ \
| |  | | |_| | |_) |  __/ |  \__ \ \__ \ ||  __/ | | | (_|  __/
|_|  |_|\__, | .__/ \___|_|  |___/_|___/\__\___|_| |_|\___\___|
         __/ | |
        |___/|_|

           ____        _   _           _
          / __ \      | | (_)         (_)
         | |  | |_ __ | |_ _ _ __ ___  _ _______ _ __
         | |  | | '_ \| __| | '_ ` _ \| |_  / _ \ '__|
         | |__| | |_) | |_| | | | | | | |/ /  __/ |
          \____/| .__/ \__|_|_| |_| |_|_/___\___|_|
                | |
                |_|

2021-08-08 13:24:57,173 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Team] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 13:24:57,179 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [agents] attribute in the [org.heartfulness.avtc.model.Team] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 13:24:57,183 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - ManyToManyCascadeRemoveEvent - The [agents] many-to-many association in the [org.heartfulness.avtc.model.Team] entity cascades the REMOVE operation. Cascading the REMOVE operation is not needed since the other side is also a parent association. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#ManyToManyCascadeRemoveEvent
2021-08-08 13:24:57,185 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [agents] collection in the [org.heartfulness.avtc.model.Team] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 13:24:57,192 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [language] attribute in the [org.heartfulness.avtc.model.Team] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 13:24:57,196 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [manager] attribute in the [org.heartfulness.avtc.model.Team] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 13:24:57,199 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - OneToOneWithoutMapsIdEvent - The [manager] one-to-one association in the [org.heartfulness.avtc.model.Team] entity is using a separate Foreign Key to reference the parent record. Consider using @MapsId so that the identifier is shared with the parent row. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#OneToOneWithoutMapsIdEvent
2021-08-08 13:24:57,201 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [service] attribute in the [org.heartfulness.avtc.model.Team] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 13:24:57,204 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [timeSlots] attribute in the [org.heartfulness.avtc.model.Team] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 13:24:57,205 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - ManyToManyCascadeRemoveEvent - The [timeSlots] many-to-many association in the [org.heartfulness.avtc.model.Team] entity cascades the REMOVE operation. Cascading the REMOVE operation is not needed since the other side is also a parent association. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#ManyToManyCascadeRemoveEvent
2021-08-08 13:24:57,207 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [timeSlots] bidirectional association in the [org.heartfulness.avtc.model.Team] entity requires both ends to be synchronized. Only the [addTimeSlot(org.heartfulness.avtc.model.TimeSlot timeSlot)] could be found. Consider adding the [removeTimeSlot(org.heartfulness.avtc.model.TimeSlot timeSlot)]  synchronization method as well. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 13:24:57,207 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [timeSlots] collection in the [org.heartfulness.avtc.model.Team] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 13:24:57,211 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Service] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 13:24:57,214 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [Departments] attribute in the [org.heartfulness.avtc.model.Service] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 13:24:57,215 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [Departments] bidirectional association in the [org.heartfulness.avtc.model.Service] entity requires both ends to be synchronized. Consider adding the [addDepartment(org.heartfulness.avtc.model.Department department)] and [removeDepartment(org.heartfulness.avtc.model.Department department)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 13:24:57,215 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [Departments] collection in the [org.heartfulness.avtc.model.Service] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 13:24:57,220 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [teams] attribute in the [org.heartfulness.avtc.model.Service] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 13:24:57,220 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [teams] bidirectional association in the [org.heartfulness.avtc.model.Service] entity requires both ends to be synchronized. Consider adding the [addTeam(org.heartfulness.avtc.model.Team team)] and [removeTeam(org.heartfulness.avtc.model.Team team)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 13:24:57,221 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [teams] collection in the [org.heartfulness.avtc.model.Service] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 13:24:57,229 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.TimeSlot] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 13:24:57,240 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [scheduleExceptions] attribute in the [org.heartfulness.avtc.model.TimeSlot] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 13:24:57,241 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [scheduleExceptions] bidirectional association in the [org.heartfulness.avtc.model.TimeSlot] entity requires both ends to be synchronized. Only the [addScheduleException(org.heartfulness.avtc.model.ScheduleException scheduleException)] could be found. Consider adding the [removeScheduleException(org.heartfulness.avtc.model.ScheduleException scheduleException)]  synchronization method as well. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 13:24:57,242 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [scheduleExceptions] collection in the [org.heartfulness.avtc.model.TimeSlot] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 13:24:57,253 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [teams] attribute in the [org.heartfulness.avtc.model.TimeSlot] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 13:24:57,254 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - ManyToManyCascadeRemoveEvent - The [teams] many-to-many association in the [org.heartfulness.avtc.model.TimeSlot] entity cascades the REMOVE operation. Cascading the REMOVE operation is not needed since the other side is also a parent association. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#ManyToManyCascadeRemoveEvent
2021-08-08 13:24:57,255 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [teams] collection in the [org.heartfulness.avtc.model.TimeSlot] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 13:24:57,270 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.ScheduleException] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 13:24:57,279 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [agent] attribute in the [org.heartfulness.avtc.model.ScheduleException] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 13:24:57,286 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [slot] attribute in the [org.heartfulness.avtc.model.ScheduleException] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 13:24:57,290 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Schedule] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 13:24:57,294 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [agent] attribute in the [org.heartfulness.avtc.model.Schedule] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 13:24:57,298 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - LargeColumnEvent - The [endTime] attribute in the [org.heartfulness.avtc.model.Schedule] entity is mapped to a large column type. Consider using either compact types or moving the large columns to separate tables or using multiple entities mapped to the same database table so that you can choose which properties are to be fetched from the database based on the entity type. You should use the @Basic(fetch=LAZY) annotation and activate the bytecode enhancement lazy loading mechanism as, otherwise, the column is fetched eagerly when loading the entity. You should use the @DynamicUpdate annotation so that the UPDATE statement contains only the columns that have been modified by the currently running Persistence Context. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#LargeColumnEvent
2021-08-08 13:24:57,301 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - LargeColumnEvent - The [startTime] attribute in the [org.heartfulness.avtc.model.Schedule] entity is mapped to a large column type. Consider using either compact types or moving the large columns to separate tables or using multiple entities mapped to the same database table so that you can choose which properties are to be fetched from the database based on the entity type. You should use the @Basic(fetch=LAZY) annotation and activate the bytecode enhancement lazy loading mechanism as, otherwise, the column is fetched eagerly when loading the entity. You should use the @DynamicUpdate annotation so that the UPDATE statement contains only the columns that have been modified by the currently running Persistence Context. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#LargeColumnEvent
2021-08-08 13:24:57,306 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Logger] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 13:24:57,309 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [agent] attribute in the [org.heartfulness.avtc.model.Logger] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 13:24:57,320 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Call] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 13:24:57,323 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [agent] attribute in the [org.heartfulness.avtc.model.Call] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 13:24:57,327 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - EnumTypeStringEvent - The [callStatus] enum attribute in the [org.heartfulness.avtc.model.Call] entity uses the EnumType.STRING strategy, which has a bigger memory footprint than EnumType.ORDINAL. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EnumTypeStringEvent
2021-08-08 13:24:57,331 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [caller] attribute in the [org.heartfulness.avtc.model.Call] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 13:24:57,334 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - EnumTypeStringEvent - The [category] enum attribute in the [org.heartfulness.avtc.model.Call] entity uses the EnumType.STRING strategy, which has a bigger memory footprint than EnumType.ORDINAL. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EnumTypeStringEvent
2021-08-08 13:24:57,350 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [leasing] bidirectional association in the [org.heartfulness.avtc.model.Call] entity requires both ends to be synchronized. Consider adding the [addAgent(org.heartfulness.avtc.model.Agent agent)] and [removeAgent(org.heartfulness.avtc.model.Agent agent)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 13:24:57,350 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [leasing] collection in the [org.heartfulness.avtc.model.Call] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 13:24:57,369 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Agent] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 13:24:57,378 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [calls] bidirectional association in the [org.heartfulness.avtc.model.Agent] entity requires both ends to be synchronized. Consider adding the [addCall(org.heartfulness.avtc.model.Call call)] and [removeCall(org.heartfulness.avtc.model.Call call)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 13:24:57,378 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [calls] collection in the [org.heartfulness.avtc.model.Agent] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 13:24:57,394 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [departments] attribute in the [org.heartfulness.avtc.model.Agent] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 13:24:57,395 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - ManyToManyCascadeRemoveEvent - The [departments] many-to-many association in the [org.heartfulness.avtc.model.Agent] entity cascades the REMOVE operation. Cascading the REMOVE operation is not needed since the other side is also a parent association. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#ManyToManyCascadeRemoveEvent
2021-08-08 13:24:57,395 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [departments] collection in the [org.heartfulness.avtc.model.Agent] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 13:24:57,414 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [leasedBy] attribute in the [org.heartfulness.avtc.model.Agent] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 13:24:57,418 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [loggerSet] bidirectional association in the [org.heartfulness.avtc.model.Agent] entity requires both ends to be synchronized. Consider adding the [addLogger(org.heartfulness.avtc.model.Logger logger)] and [removeLogger(org.heartfulness.avtc.model.Logger logger)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 13:24:57,419 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [loggerSet] collection in the [org.heartfulness.avtc.model.Agent] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 13:24:57,437 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - EnumTypeStringEvent - The [role] enum attribute in the [org.heartfulness.avtc.model.Agent] entity uses the EnumType.STRING strategy, which has a bigger memory footprint than EnumType.ORDINAL. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EnumTypeStringEvent
2021-08-08 13:24:57,439 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [scheduleExceptions] attribute in the [org.heartfulness.avtc.model.Agent] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 13:24:57,440 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [scheduleExceptions] bidirectional association in the [org.heartfulness.avtc.model.Agent] entity requires both ends to be synchronized. Consider adding the [addScheduleException(org.heartfulness.avtc.model.ScheduleException scheduleException)] and [removeScheduleException(org.heartfulness.avtc.model.ScheduleException scheduleException)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 13:24:57,440 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [scheduleExceptions] collection in the [org.heartfulness.avtc.model.Agent] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 13:24:57,442 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [schedules] bidirectional association in the [org.heartfulness.avtc.model.Agent] entity requires both ends to be synchronized. Only the [addSchedule(org.heartfulness.avtc.model.Schedule schedule)] could be found. Consider adding the [removeSchedule(org.heartfulness.avtc.model.Schedule schedule)]  synchronization method as well. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 13:24:57,443 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [schedules] collection in the [org.heartfulness.avtc.model.Agent] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 13:24:57,457 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - ManyToManyCascadeRemoveEvent - The [teams] many-to-many association in the [org.heartfulness.avtc.model.Agent] entity cascades the REMOVE operation. Cascading the REMOVE operation is not needed since the other side is also a parent association. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#ManyToManyCascadeRemoveEvent
2021-08-08 13:24:57,457 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [teams] collection in the [org.heartfulness.avtc.model.Agent] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 13:24:57,466 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [teamManaged] attribute in the [org.heartfulness.avtc.model.Agent] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 13:24:57,469 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - OneToOneParentSideEvent - The [teamManaged] one-to-one association in the [class org.heartfulness.avtc.model.Agent] entity is mapped as the parent-side of this relationship. The parent-side of a one-to-one association is fetched eagerly unless bytecode enhancement lazy loading is enabled and the association is annotated with @LazyToOne(LazyToOneOption.NO_PROXY). For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#OneToOneParentSideEvent
2021-08-08 13:24:57,472 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Department] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 13:24:57,474 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [agents] bidirectional association in the [org.heartfulness.avtc.model.Department] entity requires both ends to be synchronized. Only the [addAgent(org.heartfulness.avtc.model.Agent agent)] could be found. Consider adding the [removeAgent(org.heartfulness.avtc.model.Agent agent)]  synchronization method as well. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 13:24:57,475 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [agents] collection in the [org.heartfulness.avtc.model.Department] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 13:24:57,478 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [language] attribute in the [org.heartfulness.avtc.model.Department] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 13:24:57,481 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [service] attribute in the [org.heartfulness.avtc.model.Department] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 13:24:57,485 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Language] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 13:24:57,487 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [Departments] attribute in the [org.heartfulness.avtc.model.Language] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 13:24:57,488 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [Departments] bidirectional association in the [org.heartfulness.avtc.model.Language] entity requires both ends to be synchronized. Consider adding the [addDepartment(org.heartfulness.avtc.model.Department department)] and [removeDepartment(org.heartfulness.avtc.model.Department department)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 13:24:57,488 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [Departments] collection in the [org.heartfulness.avtc.model.Language] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 13:24:57,490 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [callers] attribute in the [org.heartfulness.avtc.model.Language] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 13:24:57,492 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [callers] bidirectional association in the [org.heartfulness.avtc.model.Language] entity requires both ends to be synchronized. Consider adding the [addCaller(org.heartfulness.avtc.model.Caller caller)] and [removeCaller(org.heartfulness.avtc.model.Caller caller)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 13:24:57,492 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [callers] collection in the [org.heartfulness.avtc.model.Language] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 13:24:57,496 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [teams] attribute in the [org.heartfulness.avtc.model.Language] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 13:24:57,496 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [teams] bidirectional association in the [org.heartfulness.avtc.model.Language] entity requires both ends to be synchronized. Consider adding the [addTeam(org.heartfulness.avtc.model.Team team)] and [removeTeam(org.heartfulness.avtc.model.Team team)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 13:24:57,497 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [teams] collection in the [org.heartfulness.avtc.model.Language] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 13:24:57,500 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Caller] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 13:24:57,504 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - EnumTypeStringEvent - The [ageGroup] enum attribute in the [org.heartfulness.avtc.model.Caller] entity uses the EnumType.STRING strategy, which has a bigger memory footprint than EnumType.ORDINAL. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EnumTypeStringEvent
2021-08-08 13:24:57,511 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [calls] attribute in the [org.heartfulness.avtc.model.Caller] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 13:24:57,511 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [calls] bidirectional association in the [org.heartfulness.avtc.model.Caller] entity requires both ends to be synchronized. Only the [addCall(org.heartfulness.avtc.model.Call call)] could be found. Consider adding the [removeCall(org.heartfulness.avtc.model.Call call)]  synchronization method as well. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 13:24:57,512 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [calls] collection in the [org.heartfulness.avtc.model.Caller] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 13:24:57,514 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - EnumTypeStringEvent - The [category] enum attribute in the [org.heartfulness.avtc.model.Caller] entity uses the EnumType.STRING strategy, which has a bigger memory footprint than EnumType.ORDINAL. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EnumTypeStringEvent
2021-08-08 13:24:57,541 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [languages] collection in the [org.heartfulness.avtc.model.Caller] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 13:24:57,591 INFO org.hibernate.dialect.Dialect [restartedMain] HHH000400: Using dialect: org.hibernate.dialect.MySQL57Dialect
2021-08-08 13:24:57,594 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - DialectVersionEvent - Your application is using the [org.hibernate.dialect.MySQL55Dialect] Hibernate-specific Dialect. Consider using the [org.hibernate.dialect.MySQL57Dialect] instead, as it's closer to your current database server version [MySQL 5.7]. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#DialectVersionEvent
2021-08-08 13:24:57,598 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - SkipAutoCommitCheckEvent - You should set the [hibernate.connection.provider_disables_autocommit] configuration property to [true] while also making sure that the underlying DataSource is configured to disable the auto-commit flag whenever a new Connection is being acquired. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#SkipAutoCommitCheckEvent
2021-08-08 13:24:57,609 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - JdbcBatchSizeEvent - If you set the [hibernate.jdbc.batch_size] configuration property to a value greater than 1 (usually between 5 and 30), Hibernate can then execute SQL statements in batches, therefore reducing the number of database network roundtrips. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#JdbcBatchSizeEvent
2021-08-08 13:24:57,617 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] BLOCKER - SchemaGenerationEvent - You should not set the [hibernate.hbm2ddl.auto] configuration property to the value of [create], as Hibernate will then manage the database schema for you. Instead, you should use an incremental schema migration tool (e.g., Flyway, Liquibase), which allows you to use any database-specific DDL construct. By storing the migration scripts in the Version Control System along with the application source code, you will always remember why a certain schema change was done. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#SchemaGenerationEvent
2021-08-08 13:24:57,623 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - QueryPaginationCollectionFetchingEvent - You should set the [hibernate.query.fail_on_pagination_over_collection_fetch] configuration property to the value of [true], as Hibernate can then prevent in-memory pagination when join fetching a child entity collection. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#QueryPaginationCollectionFetchingEvent
2021-08-08 13:24:57,625 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - DefaultQueryPlanCacheMaxSizeEvent - You should set the [hibernate.query.plan_cache_max_size] configuration property to a value that allows you to hold all JPQL, Criteria API, or SQL queries executed with Hibernate. The default query plan cache size is [2048] and might not be enough for a non-trivial application. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#DefaultQueryPlanCacheMaxSizeEvent
2021-08-08 13:24:57,633 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - JdbcStatementCacheSizeEvent - The JDBC statement cache is disabled. You should consider enabling it, as follows. You should set the [cachePrepStmts] JDBC configuration property to the value of [true] and the [prepStmtCacheSize] property to the value of [256] . Consider lowering the statement cache size if you don't have enough memory and increasing it if you have plenty of memory and need to execute lots of distinct SQL statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#JdbcStatementCacheSizeEvent
2021-08-08 13:24:57,635 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] 90 issues were found: 1 BLOCKER, 50 CRITICAL, 9 MAJOR, 30 MINOR
2021-08-08 13:24:57,878 INFO org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration [restartedMain] 

Using generated security password: 2a8b7bc5-48bb-4d10-b6f7-a8a1a104035c

2021-08-08 13:24:58,455 INFO org.springframework.security.web.DefaultSecurityFilterChain [restartedMain] Will secure any request with [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@1de392f5, org.springframework.security.web.context.SecurityContextPersistenceFilter@3c612953, org.springframework.security.web.header.HeaderWriterFilter@4aeeab6c, org.springframework.web.filter.CorsFilter@1d6e5f2c, org.springframework.security.web.authentication.logout.LogoutFilter@5dabf595, org.heartfulness.avtc.security.auth.SecurityFilter@53c17801, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@283d71cc, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@2a44d73f, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@3d08bc2a, org.springframework.security.web.session.SessionManagementFilter@6cca3fe0, org.springframework.security.web.access.ExceptionTranslationFilter@5c3750a1, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@16951c5b]
2021-08-08 13:25:01,528 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [restartedMain] LiveReload server is running on port 35729
2021-08-08 13:25:01,581 INFO org.apache.juli.logging.DirectJDKLog [restartedMain] Starting ProtocolHandler ["http-nio-8082"]
2021-08-08 13:25:01,624 INFO org.springframework.boot.web.embedded.tomcat.TomcatWebServer [restartedMain] Tomcat started on port(s): 8082 (http) with context path ''
2021-08-08 13:25:01,649 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Started AvtcApplication in 17.986 seconds (JVM running for 22.715)
2021-08-08 13:25:01,653 INFO org.springframework.boot.availability.ApplicationAvailabilityBean [restartedMain] Application availability state LivenessState changed to CORRECT
2021-08-08 13:25:01,658 INFO org.springframework.boot.availability.ApplicationAvailabilityBean [restartedMain] Application availability state ReadinessState changed to ACCEPTING_TRAFFIC
2021-08-08 13:25:01,792 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 13:26:41,814 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 13:28:21,831 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 13:30:01,841 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 13:31:41,861 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 13:33:21,871 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 13:35:01,890 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 13:36:41,903 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 13:38:21,926 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 13:40:01,938 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 13:41:41,960 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 13:43:21,969 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 13:45:01,979 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 13:46:42,002 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 13:48:22,010 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 13:50:02,029 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 13:51:42,048 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 13:53:22,065 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 13:55:02,081 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 13:56:42,099 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 13:58:22,119 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 14:00:02,137 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 14:01:42,156 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 14:03:22,173 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 14:05:02,188 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 14:06:42,201 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 14:08:22,225 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 14:10:02,251 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 14:11:42,272 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 14:13:22,288 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 14:15:02,300 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 14:16:42,321 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 14:18:22,332 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 14:20:02,352 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 14:21:42,363 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 14:23:22,386 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 14:25:02,408 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 14:26:42,436 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 14:28:22,456 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 14:30:02,469 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 14:31:42,497 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 14:33:22,511 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 14:35:02,521 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 14:36:42,532 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 14:38:22,554 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 14:40:02,564 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 14:41:42,586 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 14:43:22,598 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 14:45:02,613 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 14:46:42,623 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 14:48:22,638 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 14:50:02,659 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 14:51:42,680 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 14:53:22,713 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 14:55:02,729 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 14:56:42,740 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 14:58:22,751 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 15:00:02,764 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 15:01:42,782 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 15:03:22,807 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 15:05:02,827 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 15:06:42,836 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 15:08:22,848 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 15:10:02,859 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 15:11:42,879 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 15:13:22,894 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 15:15:02,920 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 15:16:42,936 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 15:18:22,954 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 15:20:02,966 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 15:21:42,991 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 15:23:23,016 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 15:25:03,035 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 15:26:43,057 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 15:28:23,074 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 15:30:03,083 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 15:31:43,102 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 15:33:23,124 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 15:35:03,137 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 15:36:43,156 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 15:38:23,172 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 15:40:03,188 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 15:41:43,212 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 15:43:23,236 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 15:45:03,248 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 15:46:43,269 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 15:48:23,287 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 15:50:03,297 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 15:51:43,321 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 15:53:23,337 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 15:55:03,355 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 15:56:43,363 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 15:58:23,378 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 16:00:03,399 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 16:01:43,409 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 16:03:23,430 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 16:05:03,464 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 16:06:43,498 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 16:08:23,517 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 16:10:03,546 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 16:11:43,570 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 16:13:23,581 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 16:15:03,602 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 16:16:43,622 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 16:18:23,647 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 16:20:03,673 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 16:21:43,702 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 16:23:23,730 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 16:25:03,769 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 16:26:43,797 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 16:28:23,822 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 16:30:03,843 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 16:31:43,864 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 16:33:23,885 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 16:35:03,900 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 16:36:43,917 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 16:38:23,938 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 16:40:03,957 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 16:41:43,966 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 16:43:23,979 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 16:45:03,994 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 16:46:44,004 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 16:48:24,032 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 16:50:04,047 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 16:51:44,075 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 16:53:24,104 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 16:53:55,807 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting AvtcApplication using Java 11.0.10 on DESKTOP-BIBH7GP with PID 12784 (C:\Users\sonna\IdeaProjects\avtc\target\classes started by sonna in C:\Users\sonna\IdeaProjects\avtc)
2021-08-08 16:53:55,801 INFO org.hibernate.validator.internal.util.Version [background-preinit] HV000001: Hibernate Validator 6.2.0.Final
2021-08-08 16:53:55,814 DEBUG org.springframework.boot.StartupInfoLogger [restartedMain] Running with Spring Boot v2.5.0, Spring v5.3.7
2021-08-08 16:53:55,814 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2021-08-08 16:53:55,922 INFO org.springframework.boot.logging.DeferredLog [restartedMain] The Class-Path manifest attribute in C:\Users\sonna\.m2\repository\org\glassfish\hk2\hk2\2.6.1\hk2-2.6.1.jar referenced one or more files that do not exist: file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/hk2-utils.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/jakarta.annotation-api.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/jakarta.inject.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/hk2-api.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/aopalliance-repackaged.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/hk2-core.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/hk2-locator.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/javassist.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/hk2-runlevel.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/class-model.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/asm.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/asm-analysis.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/asm-commons.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/asm-tree.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/asm-util.jar
2021-08-08 16:53:55,922 INFO org.springframework.boot.logging.DeferredLog [restartedMain] The Class-Path manifest attribute in C:\Users\sonna\.m2\repository\io\grpc\grpc-netty-shaded\1.23.0\grpc-netty-shaded-1.23.0.jar referenced one or more files that do not exist: file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/grpc-core-1.23.0.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/grpc-api-1.23.0.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/gson-2.7.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/annotations-4.1.1.4.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/perfmark-api-0.17.0.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/opencensus-contrib-grpc-metrics-0.21.0.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/opencensus-api-0.21.0.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/grpc-context-1.23.0.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/error_prone_annotations-2.3.2.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/jsr305-3.0.2.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/animal-sniffer-annotations-1.17.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/guava-26.0-android.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/checker-compat-qual-2.5.2.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/j2objc-annotations-1.1.jar
2021-08-08 16:53:55,923 INFO org.springframework.boot.logging.DeferredLog [restartedMain] Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2021-08-08 16:53:55,924 INFO org.springframework.boot.logging.DeferredLog [restartedMain] For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2021-08-08 16:53:56,457 WARN org.springframework.core.log.CompositeLog [background-preinit] For Jackson Kotlin classes support please add "com.fasterxml.jackson.module:jackson-module-kotlin" to the classpath
2021-08-08 16:53:58,075 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [restartedMain] Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2021-08-08 16:53:58,418 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [restartedMain] Finished Spring Data repository scanning in 324 ms. Found 12 JPA repository interfaces.
2021-08-08 16:53:59,881 INFO org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [restartedMain] Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@2ee916ac' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-08-08 16:53:59,904 INFO org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [restartedMain] Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-08-08 16:54:01,145 INFO org.springframework.boot.web.embedded.tomcat.TomcatWebServer [restartedMain] Tomcat initialized with port(s): 8082 (http)
2021-08-08 16:54:01,177 INFO org.apache.juli.logging.DirectJDKLog [restartedMain] Initializing ProtocolHandler ["http-nio-8082"]
2021-08-08 16:54:01,178 INFO org.apache.juli.logging.DirectJDKLog [restartedMain] Starting service [Tomcat]
2021-08-08 16:54:01,179 INFO org.apache.juli.logging.DirectJDKLog [restartedMain] Starting Servlet engine: [Apache Tomcat/9.0.46]
2021-08-08 16:54:01,552 INFO org.apache.juli.logging.DirectJDKLog [restartedMain] Initializing Spring embedded WebApplicationContext
2021-08-08 16:54:01,553 INFO org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext [restartedMain] Root WebApplicationContext: initialization completed in 5628 ms
2021-08-08 16:54:02,185 DEBUG org.springframework.web.filter.GenericFilterBean [restartedMain] Filter 'securityFilter' configured for use
2021-08-08 16:54:02,770 INFO org.hibernate.jpa.internal.util.LogHelper [restartedMain] HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2021-08-08 16:54:03,017 INFO org.hibernate.Version [restartedMain] HHH000412: Hibernate Core {5.2.17.Final}
2021-08-08 16:54:03,024 INFO org.hibernate.cfg.Environment [restartedMain] HHH000206: hibernate.properties not found
2021-08-08 16:54:03,163 INFO org.hibernate.annotations.common.reflection.java.JavaReflectionManager [restartedMain] HCANN000001: Hibernate Commons Annotations {5.0.1.Final}
2021-08-08 16:54:03,571 INFO com.zaxxer.hikari.HikariDataSource [restartedMain] HikariPool-1 - Starting...
2021-08-08 16:54:04,352 INFO com.zaxxer.hikari.HikariDataSource [restartedMain] HikariPool-1 - Start completed.
2021-08-08 16:54:04,381 INFO org.hibernate.dialect.Dialect [restartedMain] HHH000400: Using dialect: org.hibernate.dialect.MySQL55Dialect
2021-08-08 16:54:08,297 INFO org.hibernate.tool.schema.internal.SchemaCreatorImpl [restartedMain] HHH000476: Executing import script 'org.hibernate.tool.schema.internal.exec.ScriptSourceInputNonExistentImpl@63acd600'
2021-08-08 16:54:08,303 INFO org.springframework.orm.jpa.AbstractEntityManagerFactoryBean [restartedMain] Initialized JPA EntityManagerFactory for persistence unit 'default'
2021-08-08 16:54:10,359 INFO org.hibernate.hql.internal.QueryTranslatorFactoryInitiator [restartedMain] HHH000397: Using ASTQueryTranslatorFactory
2021-08-08 16:54:11,709 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] 
 _    _                           _     _
| |  | |                         (_)   | |
| |__| |_   _ _ __   ___ _ __ ___ _ ___| |_ ___ _ __   ___ ___
|  __  | | | | '_ \ / _ \ '__/ __| / __| __/ _ \ '_ \ / __/ _ \
| |  | | |_| | |_) |  __/ |  \__ \ \__ \ ||  __/ | | | (_|  __/
|_|  |_|\__, | .__/ \___|_|  |___/_|___/\__\___|_| |_|\___\___|
         __/ | |
        |___/|_|

           ____        _   _           _
          / __ \      | | (_)         (_)
         | |  | |_ __ | |_ _ _ __ ___  _ _______ _ __
         | |  | | '_ \| __| | '_ ` _ \| |_  / _ \ '__|
         | |__| | |_) | |_| | | | | | | |/ /  __/ |
          \____/| .__/ \__|_|_| |_| |_|_/___\___|_|
                | |
                |_|

2021-08-08 16:54:11,773 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Team] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 16:54:11,780 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [agents] attribute in the [org.heartfulness.avtc.model.Team] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 16:54:11,784 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - ManyToManyCascadeRemoveEvent - The [agents] many-to-many association in the [org.heartfulness.avtc.model.Team] entity cascades the REMOVE operation. Cascading the REMOVE operation is not needed since the other side is also a parent association. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#ManyToManyCascadeRemoveEvent
2021-08-08 16:54:11,787 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [agents] collection in the [org.heartfulness.avtc.model.Team] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 16:54:11,794 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [language] attribute in the [org.heartfulness.avtc.model.Team] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 16:54:11,798 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [manager] attribute in the [org.heartfulness.avtc.model.Team] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 16:54:11,800 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - OneToOneWithoutMapsIdEvent - The [manager] one-to-one association in the [org.heartfulness.avtc.model.Team] entity is using a separate Foreign Key to reference the parent record. Consider using @MapsId so that the identifier is shared with the parent row. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#OneToOneWithoutMapsIdEvent
2021-08-08 16:54:11,803 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [service] attribute in the [org.heartfulness.avtc.model.Team] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 16:54:11,805 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [timeSlots] attribute in the [org.heartfulness.avtc.model.Team] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 16:54:11,806 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - ManyToManyCascadeRemoveEvent - The [timeSlots] many-to-many association in the [org.heartfulness.avtc.model.Team] entity cascades the REMOVE operation. Cascading the REMOVE operation is not needed since the other side is also a parent association. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#ManyToManyCascadeRemoveEvent
2021-08-08 16:54:11,808 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [timeSlots] bidirectional association in the [org.heartfulness.avtc.model.Team] entity requires both ends to be synchronized. Only the [addTimeSlot(org.heartfulness.avtc.model.TimeSlot timeSlot)] could be found. Consider adding the [removeTimeSlot(org.heartfulness.avtc.model.TimeSlot timeSlot)]  synchronization method as well. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 16:54:11,808 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [timeSlots] collection in the [org.heartfulness.avtc.model.Team] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 16:54:11,812 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Service] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 16:54:11,815 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [Departments] attribute in the [org.heartfulness.avtc.model.Service] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 16:54:11,815 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [Departments] bidirectional association in the [org.heartfulness.avtc.model.Service] entity requires both ends to be synchronized. Consider adding the [addDepartment(org.heartfulness.avtc.model.Department department)] and [removeDepartment(org.heartfulness.avtc.model.Department department)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 16:54:11,815 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [Departments] collection in the [org.heartfulness.avtc.model.Service] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 16:54:11,820 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [teams] attribute in the [org.heartfulness.avtc.model.Service] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 16:54:11,821 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [teams] bidirectional association in the [org.heartfulness.avtc.model.Service] entity requires both ends to be synchronized. Consider adding the [addTeam(org.heartfulness.avtc.model.Team team)] and [removeTeam(org.heartfulness.avtc.model.Team team)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 16:54:11,821 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [teams] collection in the [org.heartfulness.avtc.model.Service] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 16:54:11,825 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.TimeSlot] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 16:54:11,830 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [scheduleExceptions] attribute in the [org.heartfulness.avtc.model.TimeSlot] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 16:54:11,830 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [scheduleExceptions] bidirectional association in the [org.heartfulness.avtc.model.TimeSlot] entity requires both ends to be synchronized. Only the [addScheduleException(org.heartfulness.avtc.model.ScheduleException scheduleException)] could be found. Consider adding the [removeScheduleException(org.heartfulness.avtc.model.ScheduleException scheduleException)]  synchronization method as well. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 16:54:11,831 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [scheduleExceptions] collection in the [org.heartfulness.avtc.model.TimeSlot] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 16:54:11,835 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [teams] attribute in the [org.heartfulness.avtc.model.TimeSlot] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 16:54:11,836 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - ManyToManyCascadeRemoveEvent - The [teams] many-to-many association in the [org.heartfulness.avtc.model.TimeSlot] entity cascades the REMOVE operation. Cascading the REMOVE operation is not needed since the other side is also a parent association. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#ManyToManyCascadeRemoveEvent
2021-08-08 16:54:11,836 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [teams] collection in the [org.heartfulness.avtc.model.TimeSlot] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 16:54:11,844 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.ScheduleException] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 16:54:11,848 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [agent] attribute in the [org.heartfulness.avtc.model.ScheduleException] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 16:54:11,853 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [slot] attribute in the [org.heartfulness.avtc.model.ScheduleException] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 16:54:11,857 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Schedule] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 16:54:11,859 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [agent] attribute in the [org.heartfulness.avtc.model.Schedule] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 16:54:11,865 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - LargeColumnEvent - The [endTime] attribute in the [org.heartfulness.avtc.model.Schedule] entity is mapped to a large column type. Consider using either compact types or moving the large columns to separate tables or using multiple entities mapped to the same database table so that you can choose which properties are to be fetched from the database based on the entity type. You should use the @Basic(fetch=LAZY) annotation and activate the bytecode enhancement lazy loading mechanism as, otherwise, the column is fetched eagerly when loading the entity. You should use the @DynamicUpdate annotation so that the UPDATE statement contains only the columns that have been modified by the currently running Persistence Context. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#LargeColumnEvent
2021-08-08 16:54:11,870 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - LargeColumnEvent - The [startTime] attribute in the [org.heartfulness.avtc.model.Schedule] entity is mapped to a large column type. Consider using either compact types or moving the large columns to separate tables or using multiple entities mapped to the same database table so that you can choose which properties are to be fetched from the database based on the entity type. You should use the @Basic(fetch=LAZY) annotation and activate the bytecode enhancement lazy loading mechanism as, otherwise, the column is fetched eagerly when loading the entity. You should use the @DynamicUpdate annotation so that the UPDATE statement contains only the columns that have been modified by the currently running Persistence Context. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#LargeColumnEvent
2021-08-08 16:54:11,879 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Logger] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 16:54:11,884 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [agent] attribute in the [org.heartfulness.avtc.model.Logger] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 16:54:11,900 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Call] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 16:54:11,906 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [agent] attribute in the [org.heartfulness.avtc.model.Call] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 16:54:11,913 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - EnumTypeStringEvent - The [callStatus] enum attribute in the [org.heartfulness.avtc.model.Call] entity uses the EnumType.STRING strategy, which has a bigger memory footprint than EnumType.ORDINAL. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EnumTypeStringEvent
2021-08-08 16:54:11,918 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [caller] attribute in the [org.heartfulness.avtc.model.Call] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 16:54:11,924 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - EnumTypeStringEvent - The [category] enum attribute in the [org.heartfulness.avtc.model.Call] entity uses the EnumType.STRING strategy, which has a bigger memory footprint than EnumType.ORDINAL. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EnumTypeStringEvent
2021-08-08 16:54:11,945 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [leasing] bidirectional association in the [org.heartfulness.avtc.model.Call] entity requires both ends to be synchronized. Consider adding the [addAgent(org.heartfulness.avtc.model.Agent agent)] and [removeAgent(org.heartfulness.avtc.model.Agent agent)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 16:54:11,945 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [leasing] collection in the [org.heartfulness.avtc.model.Call] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 16:54:11,967 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Agent] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 16:54:11,979 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [calls] bidirectional association in the [org.heartfulness.avtc.model.Agent] entity requires both ends to be synchronized. Consider adding the [addCall(org.heartfulness.avtc.model.Call call)] and [removeCall(org.heartfulness.avtc.model.Call call)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 16:54:11,979 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [calls] collection in the [org.heartfulness.avtc.model.Agent] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 16:54:11,999 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [departments] attribute in the [org.heartfulness.avtc.model.Agent] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 16:54:12,000 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - ManyToManyCascadeRemoveEvent - The [departments] many-to-many association in the [org.heartfulness.avtc.model.Agent] entity cascades the REMOVE operation. Cascading the REMOVE operation is not needed since the other side is also a parent association. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#ManyToManyCascadeRemoveEvent
2021-08-08 16:54:12,000 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [departments] collection in the [org.heartfulness.avtc.model.Agent] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 16:54:12,020 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [leasedBy] attribute in the [org.heartfulness.avtc.model.Agent] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 16:54:12,025 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [loggerSet] bidirectional association in the [org.heartfulness.avtc.model.Agent] entity requires both ends to be synchronized. Consider adding the [addLogger(org.heartfulness.avtc.model.Logger logger)] and [removeLogger(org.heartfulness.avtc.model.Logger logger)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 16:54:12,025 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [loggerSet] collection in the [org.heartfulness.avtc.model.Agent] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 16:54:12,043 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - EnumTypeStringEvent - The [role] enum attribute in the [org.heartfulness.avtc.model.Agent] entity uses the EnumType.STRING strategy, which has a bigger memory footprint than EnumType.ORDINAL. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EnumTypeStringEvent
2021-08-08 16:54:12,046 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [scheduleExceptions] attribute in the [org.heartfulness.avtc.model.Agent] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 16:54:12,047 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [scheduleExceptions] bidirectional association in the [org.heartfulness.avtc.model.Agent] entity requires both ends to be synchronized. Consider adding the [addScheduleException(org.heartfulness.avtc.model.ScheduleException scheduleException)] and [removeScheduleException(org.heartfulness.avtc.model.ScheduleException scheduleException)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 16:54:12,047 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [scheduleExceptions] collection in the [org.heartfulness.avtc.model.Agent] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 16:54:12,050 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [schedules] bidirectional association in the [org.heartfulness.avtc.model.Agent] entity requires both ends to be synchronized. Only the [addSchedule(org.heartfulness.avtc.model.Schedule schedule)] could be found. Consider adding the [removeSchedule(org.heartfulness.avtc.model.Schedule schedule)]  synchronization method as well. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 16:54:12,050 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [schedules] collection in the [org.heartfulness.avtc.model.Agent] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 16:54:12,066 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - ManyToManyCascadeRemoveEvent - The [teams] many-to-many association in the [org.heartfulness.avtc.model.Agent] entity cascades the REMOVE operation. Cascading the REMOVE operation is not needed since the other side is also a parent association. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#ManyToManyCascadeRemoveEvent
2021-08-08 16:54:12,066 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [teams] collection in the [org.heartfulness.avtc.model.Agent] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 16:54:12,075 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [teamManaged] attribute in the [org.heartfulness.avtc.model.Agent] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 16:54:12,077 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - OneToOneParentSideEvent - The [teamManaged] one-to-one association in the [class org.heartfulness.avtc.model.Agent] entity is mapped as the parent-side of this relationship. The parent-side of a one-to-one association is fetched eagerly unless bytecode enhancement lazy loading is enabled and the association is annotated with @LazyToOne(LazyToOneOption.NO_PROXY). For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#OneToOneParentSideEvent
2021-08-08 16:54:12,081 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Department] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 16:54:12,084 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [agents] bidirectional association in the [org.heartfulness.avtc.model.Department] entity requires both ends to be synchronized. Only the [addAgent(org.heartfulness.avtc.model.Agent agent)] could be found. Consider adding the [removeAgent(org.heartfulness.avtc.model.Agent agent)]  synchronization method as well. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 16:54:12,084 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [agents] collection in the [org.heartfulness.avtc.model.Department] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 16:54:12,086 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [language] attribute in the [org.heartfulness.avtc.model.Department] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 16:54:12,089 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [service] attribute in the [org.heartfulness.avtc.model.Department] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 16:54:12,092 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Language] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 16:54:12,094 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [Departments] attribute in the [org.heartfulness.avtc.model.Language] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 16:54:12,095 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [Departments] bidirectional association in the [org.heartfulness.avtc.model.Language] entity requires both ends to be synchronized. Consider adding the [addDepartment(org.heartfulness.avtc.model.Department department)] and [removeDepartment(org.heartfulness.avtc.model.Department department)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 16:54:12,095 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [Departments] collection in the [org.heartfulness.avtc.model.Language] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 16:54:12,097 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [callers] attribute in the [org.heartfulness.avtc.model.Language] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 16:54:12,098 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [callers] bidirectional association in the [org.heartfulness.avtc.model.Language] entity requires both ends to be synchronized. Consider adding the [addCaller(org.heartfulness.avtc.model.Caller caller)] and [removeCaller(org.heartfulness.avtc.model.Caller caller)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 16:54:12,098 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [callers] collection in the [org.heartfulness.avtc.model.Language] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 16:54:12,106 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [teams] attribute in the [org.heartfulness.avtc.model.Language] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 16:54:12,107 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [teams] bidirectional association in the [org.heartfulness.avtc.model.Language] entity requires both ends to be synchronized. Consider adding the [addTeam(org.heartfulness.avtc.model.Team team)] and [removeTeam(org.heartfulness.avtc.model.Team team)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 16:54:12,107 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [teams] collection in the [org.heartfulness.avtc.model.Language] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 16:54:12,114 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Caller] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 16:54:12,123 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - EnumTypeStringEvent - The [ageGroup] enum attribute in the [org.heartfulness.avtc.model.Caller] entity uses the EnumType.STRING strategy, which has a bigger memory footprint than EnumType.ORDINAL. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EnumTypeStringEvent
2021-08-08 16:54:12,137 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [calls] attribute in the [org.heartfulness.avtc.model.Caller] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 16:54:12,139 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [calls] bidirectional association in the [org.heartfulness.avtc.model.Caller] entity requires both ends to be synchronized. Only the [addCall(org.heartfulness.avtc.model.Call call)] could be found. Consider adding the [removeCall(org.heartfulness.avtc.model.Call call)]  synchronization method as well. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 16:54:12,140 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [calls] collection in the [org.heartfulness.avtc.model.Caller] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 16:54:12,149 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - EnumTypeStringEvent - The [category] enum attribute in the [org.heartfulness.avtc.model.Caller] entity uses the EnumType.STRING strategy, which has a bigger memory footprint than EnumType.ORDINAL. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EnumTypeStringEvent
2021-08-08 16:54:12,212 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [languages] collection in the [org.heartfulness.avtc.model.Caller] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 16:54:12,280 INFO org.hibernate.dialect.Dialect [restartedMain] HHH000400: Using dialect: org.hibernate.dialect.MySQL57Dialect
2021-08-08 16:54:12,283 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - DialectVersionEvent - Your application is using the [org.hibernate.dialect.MySQL55Dialect] Hibernate-specific Dialect. Consider using the [org.hibernate.dialect.MySQL57Dialect] instead, as it's closer to your current database server version [MySQL 5.7]. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#DialectVersionEvent
2021-08-08 16:54:12,288 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - SkipAutoCommitCheckEvent - You should set the [hibernate.connection.provider_disables_autocommit] configuration property to [true] while also making sure that the underlying DataSource is configured to disable the auto-commit flag whenever a new Connection is being acquired. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#SkipAutoCommitCheckEvent
2021-08-08 16:54:12,301 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - JdbcBatchSizeEvent - If you set the [hibernate.jdbc.batch_size] configuration property to a value greater than 1 (usually between 5 and 30), Hibernate can then execute SQL statements in batches, therefore reducing the number of database network roundtrips. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#JdbcBatchSizeEvent
2021-08-08 16:54:12,313 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] BLOCKER - SchemaGenerationEvent - You should not set the [hibernate.hbm2ddl.auto] configuration property to the value of [create], as Hibernate will then manage the database schema for you. Instead, you should use an incremental schema migration tool (e.g., Flyway, Liquibase), which allows you to use any database-specific DDL construct. By storing the migration scripts in the Version Control System along with the application source code, you will always remember why a certain schema change was done. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#SchemaGenerationEvent
2021-08-08 16:54:12,319 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - QueryPaginationCollectionFetchingEvent - You should set the [hibernate.query.fail_on_pagination_over_collection_fetch] configuration property to the value of [true], as Hibernate can then prevent in-memory pagination when join fetching a child entity collection. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#QueryPaginationCollectionFetchingEvent
2021-08-08 16:54:12,321 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - DefaultQueryPlanCacheMaxSizeEvent - You should set the [hibernate.query.plan_cache_max_size] configuration property to a value that allows you to hold all JPQL, Criteria API, or SQL queries executed with Hibernate. The default query plan cache size is [2048] and might not be enough for a non-trivial application. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#DefaultQueryPlanCacheMaxSizeEvent
2021-08-08 16:54:12,332 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - JdbcStatementCacheSizeEvent - The JDBC statement cache is disabled. You should consider enabling it, as follows. You should set the [cachePrepStmts] JDBC configuration property to the value of [true] and the [prepStmtCacheSize] property to the value of [256] . Consider lowering the statement cache size if you don't have enough memory and increasing it if you have plenty of memory and need to execute lots of distinct SQL statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#JdbcStatementCacheSizeEvent
2021-08-08 16:54:12,333 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] The Hibernate SessionFactory is not decorated by Hypersistence Optimizer, and, for this reason, the runtime checks will be disabled.
2021-08-08 16:54:12,333 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] 90 issues were found: 1 BLOCKER, 50 CRITICAL, 9 MAJOR, 30 MINOR
2021-08-08 16:54:12,548 INFO org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration [restartedMain] 

Using generated security password: e735e5ec-49e4-45b7-8468-a843556d9fd8

2021-08-08 16:54:13,237 INFO org.springframework.security.web.DefaultSecurityFilterChain [restartedMain] Will secure any request with [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@352c0956, org.springframework.security.web.context.SecurityContextPersistenceFilter@59e6b7a0, org.springframework.security.web.header.HeaderWriterFilter@7083ed84, org.springframework.web.filter.CorsFilter@c9a41ce, org.springframework.security.web.authentication.logout.LogoutFilter@4cef1858, org.heartfulness.avtc.security.auth.SecurityFilter@1bb4ca8f, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@5ca7e942, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@4d026c21, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@6d814f43, org.springframework.security.web.session.SessionManagementFilter@4c37956e, org.springframework.security.web.access.ExceptionTranslationFilter@6bfa37ad, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@4a349615]
2021-08-08 16:54:16,859 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [restartedMain] LiveReload server is running on port 35729
2021-08-08 16:54:16,914 INFO org.apache.juli.logging.DirectJDKLog [restartedMain] Starting ProtocolHandler ["http-nio-8082"]
2021-08-08 16:54:16,956 INFO org.springframework.boot.web.embedded.tomcat.TomcatWebServer [restartedMain] Tomcat started on port(s): 8082 (http) with context path ''
2021-08-08 16:54:17,022 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Started AvtcApplication in 22.005 seconds (JVM running for 25.761)
2021-08-08 16:54:17,028 INFO org.springframework.boot.availability.ApplicationAvailabilityBean [restartedMain] Application availability state LivenessState changed to CORRECT
2021-08-08 16:54:17,037 INFO org.springframework.boot.availability.ApplicationAvailabilityBean [restartedMain] Application availability state ReadinessState changed to ACCEPTING_TRAFFIC
2021-08-08 16:54:49,526 INFO org.apache.juli.logging.DirectJDKLog [http-nio-8082-exec-1] Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-08-08 16:54:49,527 INFO org.springframework.web.servlet.FrameworkServlet [http-nio-8082-exec-1] Initializing Servlet 'dispatcherServlet'
2021-08-08 16:54:49,530 INFO org.springframework.web.servlet.FrameworkServlet [http-nio-8082-exec-1] Completed initialization in 3 ms
2021-08-08 16:54:49,583 INFO org.heartfulness.avtc.security.auth.SecurityFilter [http-nio-8082-exec-1] null
2021-08-08 16:54:50,833 ERROR org.apache.juli.logging.DirectJDKLog [http-nio-8082-exec-1] Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.NullPointerException] with root cause
java.lang.NullPointerException: null
	at org.heartfulness.avtc.controller.AdminController.getLoggedInAgent(AdminController.java:68)
	at org.heartfulness.avtc.controller.AdminController$$FastClassBySpringCGLIB$$acdb9fcd.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:779)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:692)
	at org.heartfulness.avtc.controller.AdminController$$EnhancerBySpringCGLIB$$90bbe044.getLoggedInAgent(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:197)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:141)
	at org.springframework.web.method.annotation.ModelFactory.invokeModelAttributeMethods(ModelFactory.java:143)
	at org.springframework.web.method.annotation.ModelFactory.initModel(ModelFactory.java:112)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:871)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1063)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:626)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:327)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:121)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:115)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.heartfulness.avtc.security.auth.SecurityFilter.doFilterInternal(SecurityFilter.java:58)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:110)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:80)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:211)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:183)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:893)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1707)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:834)
2021-08-08 16:55:05,994 INFO org.heartfulness.avtc.security.auth.SecurityFilter [http-nio-8082-exec-2] null
2021-08-08 16:55:06,059 ERROR org.apache.juli.logging.DirectJDKLog [http-nio-8082-exec-2] Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.NullPointerException] with root cause
java.lang.NullPointerException: null
	at org.heartfulness.avtc.controller.AgentController.loggedInAgent(AgentController.java:66)
	at org.heartfulness.avtc.controller.AgentController$$FastClassBySpringCGLIB$$82313403.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:779)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:692)
	at org.heartfulness.avtc.controller.AgentController$$EnhancerBySpringCGLIB$$9ba7eea6.loggedInAgent(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:197)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:141)
	at org.springframework.web.method.annotation.ModelFactory.invokeModelAttributeMethods(ModelFactory.java:143)
	at org.springframework.web.method.annotation.ModelFactory.initModel(ModelFactory.java:112)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:871)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1063)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:626)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:327)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:121)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:115)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.heartfulness.avtc.security.auth.SecurityFilter.doFilterInternal(SecurityFilter.java:58)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:110)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:80)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:211)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:183)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:893)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1707)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:834)
2021-08-08 16:55:06,939 INFO org.heartfulness.avtc.security.auth.SecurityFilter [http-nio-8082-exec-3] null
2021-08-08 16:55:06,954 ERROR org.apache.juli.logging.DirectJDKLog [http-nio-8082-exec-3] Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.NullPointerException] with root cause
java.lang.NullPointerException: null
	at org.heartfulness.avtc.controller.AgentController.loggedInAgent(AgentController.java:66)
	at org.heartfulness.avtc.controller.AgentController$$FastClassBySpringCGLIB$$82313403.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:779)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:692)
	at org.heartfulness.avtc.controller.AgentController$$EnhancerBySpringCGLIB$$9ba7eea6.loggedInAgent(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:197)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:141)
	at org.springframework.web.method.annotation.ModelFactory.invokeModelAttributeMethods(ModelFactory.java:143)
	at org.springframework.web.method.annotation.ModelFactory.initModel(ModelFactory.java:112)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:871)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1063)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:626)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:327)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:121)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:115)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.heartfulness.avtc.security.auth.SecurityFilter.doFilterInternal(SecurityFilter.java:58)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:110)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:80)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:211)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:183)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:893)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1707)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:834)
2021-08-08 16:55:13,493 INFO org.heartfulness.avtc.security.auth.SecurityFilter [http-nio-8082-exec-4] null
2021-08-08 16:55:14,550 INFO org.heartfulness.avtc.security.auth.SecurityFilter [http-nio-8082-exec-5] null
2021-08-08 16:55:14,596 INFO org.heartfulness.avtc.security.auth.SecurityFilter [http-nio-8082-exec-6] null
2021-08-08 16:55:14,617 INFO org.heartfulness.avtc.security.auth.SecurityFilter [http-nio-8082-exec-7] null
2021-08-08 16:55:14,709 INFO org.heartfulness.avtc.security.auth.SecurityFilter [http-nio-8082-exec-8] null
2021-08-08 16:55:14,861 INFO org.heartfulness.avtc.security.auth.SecurityFilter [http-nio-8082-exec-9] null
2021-08-08 16:55:21,053 INFO org.heartfulness.avtc.security.auth.SecurityFilter [http-nio-8082-exec-10] null
2021-08-08 16:56:41,428 INFO org.heartfulness.avtc.security.auth.SecurityFilter [http-nio-8082-exec-3] null
2021-08-08 16:56:49,419 INFO org.heartfulness.avtc.security.auth.SecurityFilter [http-nio-8082-exec-4] null
2021-08-08 16:56:53,537 INFO org.heartfulness.avtc.security.auth.SecurityFilter [http-nio-8082-exec-5] null
2021-08-08 16:56:53,628 INFO org.heartfulness.avtc.security.auth.SecurityFilter [http-nio-8082-exec-6] null
2021-08-08 16:56:54,027 INFO org.heartfulness.avtc.security.auth.SecurityFilter [http-nio-8082-exec-7] null
2021-08-08 16:56:54,266 INFO org.heartfulness.avtc.security.auth.SecurityFilter [http-nio-8082-exec-8] null
2021-08-08 16:56:56,059 INFO org.heartfulness.avtc.security.auth.SecurityFilter [http-nio-8082-exec-9] null
2021-08-08 16:57:17,681 INFO org.heartfulness.avtc.security.auth.SecurityFilter [http-nio-8082-exec-10] null
2021-08-08 16:57:17,897 INFO org.heartfulness.avtc.security.auth.SecurityFilter [http-nio-8082-exec-1] null
2021-08-08 17:01:04,764 INFO org.heartfulness.avtc.security.auth.SecurityFilter [http-nio-8082-exec-5] null
2021-08-08 17:02:28,623 INFO org.heartfulness.avtc.security.auth.SecurityFilter [http-nio-8082-exec-7] null
2021-08-08 17:02:28,657 ERROR org.apache.juli.logging.DirectJDKLog [http-nio-8082-exec-7] Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.NullPointerException] with root cause
java.lang.NullPointerException: null
	at org.heartfulness.avtc.service.InCallService.inCall(InCallService.java:74)
	at org.heartfulness.avtc.controller.NodeController.inCallWebHook(NodeController.java:43)
	at org.heartfulness.avtc.controller.NodeController$$FastClassBySpringCGLIB$$7244677c.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:779)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:692)
	at org.heartfulness.avtc.controller.NodeController$$EnhancerBySpringCGLIB$$d07cfcb1.inCallWebHook(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:197)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:141)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:894)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1063)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:652)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:327)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:121)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:115)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.heartfulness.avtc.security.auth.SecurityFilter.doFilterInternal(SecurityFilter.java:58)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:110)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:80)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:211)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:183)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:893)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1707)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:834)
2021-08-08 17:03:15,011 INFO org.heartfulness.avtc.security.auth.SecurityFilter [http-nio-8082-exec-10] null
2021-08-08 17:03:15,035 ERROR org.apache.juli.logging.DirectJDKLog [http-nio-8082-exec-10] Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.NullPointerException] with root cause
java.lang.NullPointerException: null
	at org.heartfulness.avtc.service.InCallService.inCall(InCallService.java:74)
	at org.heartfulness.avtc.controller.NodeController.inCallWebHook(NodeController.java:43)
	at org.heartfulness.avtc.controller.NodeController$$FastClassBySpringCGLIB$$7244677c.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:779)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:692)
	at org.heartfulness.avtc.controller.NodeController$$EnhancerBySpringCGLIB$$d07cfcb1.inCallWebHook(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:197)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:141)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:894)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1063)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:652)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:327)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:121)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:115)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.heartfulness.avtc.security.auth.SecurityFilter.doFilterInternal(SecurityFilter.java:58)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:110)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:80)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:211)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:183)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:893)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1707)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:834)
2021-08-08 17:03:46,166 INFO org.heartfulness.avtc.security.auth.SecurityFilter [http-nio-8082-exec-3] null
2021-08-08 17:04:06,197 ERROR org.apache.juli.logging.DirectJDKLog [http-nio-8082-exec-3] Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.NullPointerException] with root cause
java.lang.NullPointerException: null
	at org.heartfulness.avtc.service.InCallService.inCall(InCallService.java:74)
	at org.heartfulness.avtc.controller.NodeController.inCallWebHook(NodeController.java:43)
	at org.heartfulness.avtc.controller.NodeController$$FastClassBySpringCGLIB$$7244677c.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:779)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:692)
	at org.heartfulness.avtc.controller.NodeController$$EnhancerBySpringCGLIB$$d07cfcb1.inCallWebHook(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:197)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:141)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:894)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1063)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:652)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:327)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:121)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:115)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.heartfulness.avtc.security.auth.SecurityFilter.doFilterInternal(SecurityFilter.java:58)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:110)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:80)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:211)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:183)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:893)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1707)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:834)
2021-08-08 17:04:06,229 ERROR org.apache.juli.logging.DirectJDKLog [http-nio-8082-exec-3] Exception Processing ErrorPage[errorCode=0, location=/error]
org.apache.catalina.connector.ClientAbortException: java.io.IOException: An established connection was aborted by the software in your host machine
	at org.apache.catalina.connector.OutputBuffer.doFlush(OutputBuffer.java:310)
	at org.apache.catalina.connector.OutputBuffer.flush(OutputBuffer.java:273)
	at org.apache.catalina.connector.CoyoteOutputStream.flush(CoyoteOutputStream.java:118)
	at java.base/java.io.FilterOutputStream.flush(FilterOutputStream.java:153)
	at com.fasterxml.jackson.core.json.UTF8JsonGenerator.flush(UTF8JsonGenerator.java:1193)
	at com.fasterxml.jackson.databind.ObjectWriter.writeValue(ObjectWriter.java:1007)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:454)
	at org.springframework.http.converter.AbstractGenericHttpMessageConverter.write(AbstractGenericHttpMessageConverter.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:290)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:219)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.hateoas.server.mvc.RepresentationModelProcessorHandlerMethodReturnValueHandler.handleReturnValue(RepresentationModelProcessorHandlerMethodReturnValueHandler.java:108)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:124)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:894)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1063)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:652)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:327)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:106)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:121)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:115)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:87)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:110)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:80)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:211)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:183)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:710)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:459)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:398)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:257)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:352)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:177)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:893)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1707)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.io.IOException: An established connection was aborted by the software in your host machine
	at java.base/sun.nio.ch.SocketDispatcher.write0(Native Method)
	at java.base/sun.nio.ch.SocketDispatcher.write(SocketDispatcher.java:51)
	at java.base/sun.nio.ch.IOUtil.writeFromNativeBuffer(IOUtil.java:113)
	at java.base/sun.nio.ch.IOUtil.write(IOUtil.java:79)
	at java.base/sun.nio.ch.IOUtil.write(IOUtil.java:50)
	at java.base/sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:466)
	at org.apache.tomcat.util.net.NioChannel.write(NioChannel.java:135)
	at org.apache.tomcat.util.net.NioBlockingSelector.write(NioBlockingSelector.java:118)
	at org.apache.tomcat.util.net.NioSelectorPool.write(NioSelectorPool.java:151)
	at org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper.doWrite(NioEndpoint.java:1367)
	at org.apache.tomcat.util.net.SocketWrapperBase.doWrite(SocketWrapperBase.java:766)
	at org.apache.tomcat.util.net.SocketWrapperBase.flushBlocking(SocketWrapperBase.java:719)
	at org.apache.tomcat.util.net.SocketWrapperBase.flush(SocketWrapperBase.java:709)
	at org.apache.coyote.http11.Http11OutputBuffer$SocketOutputBuffer.flush(Http11OutputBuffer.java:572)
	at org.apache.coyote.http11.filters.ChunkedOutputFilter.flush(ChunkedOutputFilter.java:157)
	at org.apache.coyote.http11.Http11OutputBuffer.flush(Http11OutputBuffer.java:220)
	at org.apache.coyote.http11.Http11Processor.flush(Http11Processor.java:1196)
	at org.apache.coyote.AbstractProcessor.action(AbstractProcessor.java:402)
	at org.apache.coyote.Response.action(Response.java:209)
	at org.apache.catalina.connector.OutputBuffer.doFlush(OutputBuffer.java:306)
	... 94 common frames omitted
2021-08-08 17:04:15,659 INFO org.heartfulness.avtc.security.auth.SecurityFilter [http-nio-8082-exec-4] null
2021-08-08 17:04:15,757 ERROR org.apache.juli.logging.DirectJDKLog [http-nio-8082-exec-4] Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.NullPointerException] with root cause
java.lang.NullPointerException: null
	at org.heartfulness.avtc.service.InputNodeService.input(InputNodeService.java:66)
	at org.heartfulness.avtc.controller.NodeController.inputNodeRequest(NodeController.java:36)
	at org.heartfulness.avtc.controller.NodeController$$FastClassBySpringCGLIB$$7244677c.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:779)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:692)
	at org.heartfulness.avtc.controller.NodeController$$EnhancerBySpringCGLIB$$d07cfcb1.inputNodeRequest(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:197)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:141)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:894)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1063)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:652)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:327)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:121)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:115)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.heartfulness.avtc.security.auth.SecurityFilter.doFilterInternal(SecurityFilter.java:58)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:110)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:80)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:211)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:183)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:893)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1707)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:834)
2021-08-08 17:05:19,444 INFO org.heartfulness.avtc.security.auth.SecurityFilter [http-nio-8082-exec-6] null
2021-08-08 17:05:23,676 ERROR org.apache.juli.logging.DirectJDKLog [http-nio-8082-exec-6] Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.NullPointerException] with root cause
java.lang.NullPointerException: null
	at org.heartfulness.avtc.service.InputNodeService.input(InputNodeService.java:73)
	at org.heartfulness.avtc.controller.NodeController.inputNodeRequest(NodeController.java:36)
	at org.heartfulness.avtc.controller.NodeController$$FastClassBySpringCGLIB$$7244677c.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:779)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:692)
	at org.heartfulness.avtc.controller.NodeController$$EnhancerBySpringCGLIB$$d07cfcb1.inputNodeRequest(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:197)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:141)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:894)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1063)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:652)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:327)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:121)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:115)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.heartfulness.avtc.security.auth.SecurityFilter.doFilterInternal(SecurityFilter.java:58)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:110)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:80)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:211)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:183)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:893)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1707)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:834)
2021-08-08 17:06:18,693 INFO org.heartfulness.avtc.security.auth.SecurityFilter [http-nio-8082-exec-7] null
2021-08-08 17:07:20,951 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting AvtcApplication using Java 11.0.10 on DESKTOP-BIBH7GP with PID 29028 (C:\Users\sonna\IdeaProjects\avtc\target\classes started by sonna in C:\Users\sonna\IdeaProjects\avtc)
2021-08-08 17:07:20,949 INFO org.hibernate.validator.internal.util.Version [background-preinit] HV000001: Hibernate Validator 6.2.0.Final
2021-08-08 17:07:20,959 DEBUG org.springframework.boot.StartupInfoLogger [restartedMain] Running with Spring Boot v2.5.0, Spring v5.3.7
2021-08-08 17:07:20,960 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2021-08-08 17:07:21,046 INFO org.springframework.boot.logging.DeferredLog [restartedMain] The Class-Path manifest attribute in C:\Users\sonna\.m2\repository\org\glassfish\hk2\hk2\2.6.1\hk2-2.6.1.jar referenced one or more files that do not exist: file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/hk2-utils.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/jakarta.annotation-api.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/jakarta.inject.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/hk2-api.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/aopalliance-repackaged.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/hk2-core.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/hk2-locator.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/javassist.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/hk2-runlevel.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/class-model.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/asm.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/asm-analysis.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/asm-commons.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/asm-tree.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/asm-util.jar
2021-08-08 17:07:21,046 INFO org.springframework.boot.logging.DeferredLog [restartedMain] The Class-Path manifest attribute in C:\Users\sonna\.m2\repository\io\grpc\grpc-netty-shaded\1.23.0\grpc-netty-shaded-1.23.0.jar referenced one or more files that do not exist: file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/grpc-core-1.23.0.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/grpc-api-1.23.0.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/gson-2.7.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/annotations-4.1.1.4.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/perfmark-api-0.17.0.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/opencensus-contrib-grpc-metrics-0.21.0.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/opencensus-api-0.21.0.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/grpc-context-1.23.0.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/error_prone_annotations-2.3.2.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/jsr305-3.0.2.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/animal-sniffer-annotations-1.17.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/guava-26.0-android.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/checker-compat-qual-2.5.2.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/j2objc-annotations-1.1.jar
2021-08-08 17:07:21,047 INFO org.springframework.boot.logging.DeferredLog [restartedMain] Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2021-08-08 17:07:21,047 INFO org.springframework.boot.logging.DeferredLog [restartedMain] For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2021-08-08 17:07:21,541 WARN org.springframework.core.log.CompositeLog [background-preinit] For Jackson Kotlin classes support please add "com.fasterxml.jackson.module:jackson-module-kotlin" to the classpath
2021-08-08 17:07:23,098 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [restartedMain] Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2021-08-08 17:07:23,459 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [restartedMain] Finished Spring Data repository scanning in 342 ms. Found 12 JPA repository interfaces.
2021-08-08 17:07:24,578 INFO org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [restartedMain] Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@5ecacb08' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-08-08 17:07:24,595 INFO org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [restartedMain] Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-08-08 17:07:25,481 INFO org.springframework.boot.web.embedded.tomcat.TomcatWebServer [restartedMain] Tomcat initialized with port(s): 8082 (http)
2021-08-08 17:07:25,498 INFO org.apache.juli.logging.DirectJDKLog [restartedMain] Initializing ProtocolHandler ["http-nio-8082"]
2021-08-08 17:07:25,499 INFO org.apache.juli.logging.DirectJDKLog [restartedMain] Starting service [Tomcat]
2021-08-08 17:07:25,500 INFO org.apache.juli.logging.DirectJDKLog [restartedMain] Starting Servlet engine: [Apache Tomcat/9.0.46]
2021-08-08 17:07:25,878 INFO org.apache.juli.logging.DirectJDKLog [restartedMain] Initializing Spring embedded WebApplicationContext
2021-08-08 17:07:25,878 INFO org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext [restartedMain] Root WebApplicationContext: initialization completed in 4829 ms
2021-08-08 17:07:26,395 DEBUG org.springframework.web.filter.GenericFilterBean [restartedMain] Filter 'securityFilter' configured for use
2021-08-08 17:07:26,795 INFO org.hibernate.jpa.internal.util.LogHelper [restartedMain] HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2021-08-08 17:07:26,954 INFO org.hibernate.Version [restartedMain] HHH000412: Hibernate Core {5.2.17.Final}
2021-08-08 17:07:26,961 INFO org.hibernate.cfg.Environment [restartedMain] HHH000206: hibernate.properties not found
2021-08-08 17:07:27,091 INFO org.hibernate.annotations.common.reflection.java.JavaReflectionManager [restartedMain] HCANN000001: Hibernate Commons Annotations {5.0.1.Final}
2021-08-08 17:07:27,456 INFO com.zaxxer.hikari.HikariDataSource [restartedMain] HikariPool-1 - Starting...
2021-08-08 17:07:28,317 INFO com.zaxxer.hikari.HikariDataSource [restartedMain] HikariPool-1 - Start completed.
2021-08-08 17:07:28,353 INFO org.hibernate.dialect.Dialect [restartedMain] HHH000400: Using dialect: org.hibernate.dialect.MySQL55Dialect
2021-08-08 17:07:30,606 INFO org.springframework.orm.jpa.AbstractEntityManagerFactoryBean [restartedMain] Initialized JPA EntityManagerFactory for persistence unit 'default'
2021-08-08 17:07:32,725 INFO org.hibernate.hql.internal.QueryTranslatorFactoryInitiator [restartedMain] HHH000397: Using ASTQueryTranslatorFactory
2021-08-08 17:07:33,780 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] 
 _    _                           _     _
| |  | |                         (_)   | |
| |__| |_   _ _ __   ___ _ __ ___ _ ___| |_ ___ _ __   ___ ___
|  __  | | | | '_ \ / _ \ '__/ __| / __| __/ _ \ '_ \ / __/ _ \
| |  | | |_| | |_) |  __/ |  \__ \ \__ \ ||  __/ | | | (_|  __/
|_|  |_|\__, | .__/ \___|_|  |___/_|___/\__\___|_| |_|\___\___|
         __/ | |
        |___/|_|

           ____        _   _           _
          / __ \      | | (_)         (_)
         | |  | |_ __ | |_ _ _ __ ___  _ _______ _ __
         | |  | | '_ \| __| | '_ ` _ \| |_  / _ \ '__|
         | |__| | |_) | |_| | | | | | | |/ /  __/ |
          \____/| .__/ \__|_|_| |_| |_|_/___\___|_|
                | |
                |_|

2021-08-08 17:07:33,826 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Team] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 17:07:33,833 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [agents] attribute in the [org.heartfulness.avtc.model.Team] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:07:33,836 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - ManyToManyCascadeRemoveEvent - The [agents] many-to-many association in the [org.heartfulness.avtc.model.Team] entity cascades the REMOVE operation. Cascading the REMOVE operation is not needed since the other side is also a parent association. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#ManyToManyCascadeRemoveEvent
2021-08-08 17:07:33,838 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [agents] collection in the [org.heartfulness.avtc.model.Team] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:07:33,844 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [language] attribute in the [org.heartfulness.avtc.model.Team] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:07:33,847 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [manager] attribute in the [org.heartfulness.avtc.model.Team] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:07:33,849 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - OneToOneWithoutMapsIdEvent - The [manager] one-to-one association in the [org.heartfulness.avtc.model.Team] entity is using a separate Foreign Key to reference the parent record. Consider using @MapsId so that the identifier is shared with the parent row. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#OneToOneWithoutMapsIdEvent
2021-08-08 17:07:33,851 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [service] attribute in the [org.heartfulness.avtc.model.Team] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:07:33,854 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [timeSlots] attribute in the [org.heartfulness.avtc.model.Team] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:07:33,855 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - ManyToManyCascadeRemoveEvent - The [timeSlots] many-to-many association in the [org.heartfulness.avtc.model.Team] entity cascades the REMOVE operation. Cascading the REMOVE operation is not needed since the other side is also a parent association. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#ManyToManyCascadeRemoveEvent
2021-08-08 17:07:33,857 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [timeSlots] bidirectional association in the [org.heartfulness.avtc.model.Team] entity requires both ends to be synchronized. Only the [addTimeSlot(org.heartfulness.avtc.model.TimeSlot timeSlot)] could be found. Consider adding the [removeTimeSlot(org.heartfulness.avtc.model.TimeSlot timeSlot)]  synchronization method as well. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 17:07:33,857 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [timeSlots] collection in the [org.heartfulness.avtc.model.Team] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:07:33,861 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Service] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 17:07:33,864 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [Departments] attribute in the [org.heartfulness.avtc.model.Service] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:07:33,864 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [Departments] bidirectional association in the [org.heartfulness.avtc.model.Service] entity requires both ends to be synchronized. Consider adding the [addDepartment(org.heartfulness.avtc.model.Department department)] and [removeDepartment(org.heartfulness.avtc.model.Department department)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 17:07:33,865 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [Departments] collection in the [org.heartfulness.avtc.model.Service] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:07:33,870 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [teams] attribute in the [org.heartfulness.avtc.model.Service] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:07:33,870 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [teams] bidirectional association in the [org.heartfulness.avtc.model.Service] entity requires both ends to be synchronized. Consider adding the [addTeam(org.heartfulness.avtc.model.Team team)] and [removeTeam(org.heartfulness.avtc.model.Team team)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 17:07:33,871 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [teams] collection in the [org.heartfulness.avtc.model.Service] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:07:33,874 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.TimeSlot] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 17:07:33,879 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [scheduleExceptions] attribute in the [org.heartfulness.avtc.model.TimeSlot] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:07:33,880 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [scheduleExceptions] bidirectional association in the [org.heartfulness.avtc.model.TimeSlot] entity requires both ends to be synchronized. Only the [addScheduleException(org.heartfulness.avtc.model.ScheduleException scheduleException)] could be found. Consider adding the [removeScheduleException(org.heartfulness.avtc.model.ScheduleException scheduleException)]  synchronization method as well. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 17:07:33,880 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [scheduleExceptions] collection in the [org.heartfulness.avtc.model.TimeSlot] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:07:33,885 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [teams] attribute in the [org.heartfulness.avtc.model.TimeSlot] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:07:33,886 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - ManyToManyCascadeRemoveEvent - The [teams] many-to-many association in the [org.heartfulness.avtc.model.TimeSlot] entity cascades the REMOVE operation. Cascading the REMOVE operation is not needed since the other side is also a parent association. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#ManyToManyCascadeRemoveEvent
2021-08-08 17:07:33,886 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [teams] collection in the [org.heartfulness.avtc.model.TimeSlot] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:07:33,893 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.ScheduleException] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 17:07:33,898 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [agent] attribute in the [org.heartfulness.avtc.model.ScheduleException] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:07:33,902 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [slot] attribute in the [org.heartfulness.avtc.model.ScheduleException] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:07:33,906 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Schedule] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 17:07:33,908 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [agent] attribute in the [org.heartfulness.avtc.model.Schedule] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:07:33,912 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - LargeColumnEvent - The [endTime] attribute in the [org.heartfulness.avtc.model.Schedule] entity is mapped to a large column type. Consider using either compact types or moving the large columns to separate tables or using multiple entities mapped to the same database table so that you can choose which properties are to be fetched from the database based on the entity type. You should use the @Basic(fetch=LAZY) annotation and activate the bytecode enhancement lazy loading mechanism as, otherwise, the column is fetched eagerly when loading the entity. You should use the @DynamicUpdate annotation so that the UPDATE statement contains only the columns that have been modified by the currently running Persistence Context. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#LargeColumnEvent
2021-08-08 17:07:33,914 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - LargeColumnEvent - The [startTime] attribute in the [org.heartfulness.avtc.model.Schedule] entity is mapped to a large column type. Consider using either compact types or moving the large columns to separate tables or using multiple entities mapped to the same database table so that you can choose which properties are to be fetched from the database based on the entity type. You should use the @Basic(fetch=LAZY) annotation and activate the bytecode enhancement lazy loading mechanism as, otherwise, the column is fetched eagerly when loading the entity. You should use the @DynamicUpdate annotation so that the UPDATE statement contains only the columns that have been modified by the currently running Persistence Context. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#LargeColumnEvent
2021-08-08 17:07:33,919 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Logger] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 17:07:33,921 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [agent] attribute in the [org.heartfulness.avtc.model.Logger] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:07:33,928 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Call] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 17:07:33,931 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [agent] attribute in the [org.heartfulness.avtc.model.Call] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:07:33,935 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - EnumTypeStringEvent - The [callStatus] enum attribute in the [org.heartfulness.avtc.model.Call] entity uses the EnumType.STRING strategy, which has a bigger memory footprint than EnumType.ORDINAL. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EnumTypeStringEvent
2021-08-08 17:07:33,938 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [caller] attribute in the [org.heartfulness.avtc.model.Call] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:07:33,940 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - EnumTypeStringEvent - The [category] enum attribute in the [org.heartfulness.avtc.model.Call] entity uses the EnumType.STRING strategy, which has a bigger memory footprint than EnumType.ORDINAL. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EnumTypeStringEvent
2021-08-08 17:07:33,953 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [leasing] bidirectional association in the [org.heartfulness.avtc.model.Call] entity requires both ends to be synchronized. Consider adding the [addAgent(org.heartfulness.avtc.model.Agent agent)] and [removeAgent(org.heartfulness.avtc.model.Agent agent)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 17:07:33,954 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [leasing] collection in the [org.heartfulness.avtc.model.Call] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:07:33,969 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Agent] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 17:07:33,976 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [calls] bidirectional association in the [org.heartfulness.avtc.model.Agent] entity requires both ends to be synchronized. Consider adding the [addCall(org.heartfulness.avtc.model.Call call)] and [removeCall(org.heartfulness.avtc.model.Call call)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 17:07:33,976 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [calls] collection in the [org.heartfulness.avtc.model.Agent] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:07:33,991 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [departments] attribute in the [org.heartfulness.avtc.model.Agent] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:07:33,992 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - ManyToManyCascadeRemoveEvent - The [departments] many-to-many association in the [org.heartfulness.avtc.model.Agent] entity cascades the REMOVE operation. Cascading the REMOVE operation is not needed since the other side is also a parent association. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#ManyToManyCascadeRemoveEvent
2021-08-08 17:07:33,992 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [departments] collection in the [org.heartfulness.avtc.model.Agent] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:07:34,014 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [leasedBy] attribute in the [org.heartfulness.avtc.model.Agent] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:07:34,018 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [loggerSet] bidirectional association in the [org.heartfulness.avtc.model.Agent] entity requires both ends to be synchronized. Consider adding the [addLogger(org.heartfulness.avtc.model.Logger logger)] and [removeLogger(org.heartfulness.avtc.model.Logger logger)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 17:07:34,019 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [loggerSet] collection in the [org.heartfulness.avtc.model.Agent] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:07:34,037 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - EnumTypeStringEvent - The [role] enum attribute in the [org.heartfulness.avtc.model.Agent] entity uses the EnumType.STRING strategy, which has a bigger memory footprint than EnumType.ORDINAL. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EnumTypeStringEvent
2021-08-08 17:07:34,039 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [scheduleExceptions] attribute in the [org.heartfulness.avtc.model.Agent] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:07:34,039 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [scheduleExceptions] bidirectional association in the [org.heartfulness.avtc.model.Agent] entity requires both ends to be synchronized. Consider adding the [addScheduleException(org.heartfulness.avtc.model.ScheduleException scheduleException)] and [removeScheduleException(org.heartfulness.avtc.model.ScheduleException scheduleException)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 17:07:34,040 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [scheduleExceptions] collection in the [org.heartfulness.avtc.model.Agent] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:07:34,042 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [schedules] bidirectional association in the [org.heartfulness.avtc.model.Agent] entity requires both ends to be synchronized. Only the [addSchedule(org.heartfulness.avtc.model.Schedule schedule)] could be found. Consider adding the [removeSchedule(org.heartfulness.avtc.model.Schedule schedule)]  synchronization method as well. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 17:07:34,043 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [schedules] collection in the [org.heartfulness.avtc.model.Agent] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:07:34,057 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - ManyToManyCascadeRemoveEvent - The [teams] many-to-many association in the [org.heartfulness.avtc.model.Agent] entity cascades the REMOVE operation. Cascading the REMOVE operation is not needed since the other side is also a parent association. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#ManyToManyCascadeRemoveEvent
2021-08-08 17:07:34,058 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [teams] collection in the [org.heartfulness.avtc.model.Agent] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:07:34,067 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [teamManaged] attribute in the [org.heartfulness.avtc.model.Agent] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:07:34,069 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - OneToOneParentSideEvent - The [teamManaged] one-to-one association in the [class org.heartfulness.avtc.model.Agent] entity is mapped as the parent-side of this relationship. The parent-side of a one-to-one association is fetched eagerly unless bytecode enhancement lazy loading is enabled and the association is annotated with @LazyToOne(LazyToOneOption.NO_PROXY). For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#OneToOneParentSideEvent
2021-08-08 17:07:34,073 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Department] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 17:07:34,075 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [agents] bidirectional association in the [org.heartfulness.avtc.model.Department] entity requires both ends to be synchronized. Only the [addAgent(org.heartfulness.avtc.model.Agent agent)] could be found. Consider adding the [removeAgent(org.heartfulness.avtc.model.Agent agent)]  synchronization method as well. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 17:07:34,076 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [agents] collection in the [org.heartfulness.avtc.model.Department] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:07:34,079 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [language] attribute in the [org.heartfulness.avtc.model.Department] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:07:34,081 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [service] attribute in the [org.heartfulness.avtc.model.Department] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:07:34,084 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Language] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 17:07:34,086 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [Departments] attribute in the [org.heartfulness.avtc.model.Language] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:07:34,087 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [Departments] bidirectional association in the [org.heartfulness.avtc.model.Language] entity requires both ends to be synchronized. Consider adding the [addDepartment(org.heartfulness.avtc.model.Department department)] and [removeDepartment(org.heartfulness.avtc.model.Department department)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 17:07:34,087 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [Departments] collection in the [org.heartfulness.avtc.model.Language] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:07:34,090 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [callers] attribute in the [org.heartfulness.avtc.model.Language] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:07:34,090 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [callers] bidirectional association in the [org.heartfulness.avtc.model.Language] entity requires both ends to be synchronized. Consider adding the [addCaller(org.heartfulness.avtc.model.Caller caller)] and [removeCaller(org.heartfulness.avtc.model.Caller caller)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 17:07:34,091 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [callers] collection in the [org.heartfulness.avtc.model.Language] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:07:34,095 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [teams] attribute in the [org.heartfulness.avtc.model.Language] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:07:34,096 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [teams] bidirectional association in the [org.heartfulness.avtc.model.Language] entity requires both ends to be synchronized. Consider adding the [addTeam(org.heartfulness.avtc.model.Team team)] and [removeTeam(org.heartfulness.avtc.model.Team team)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 17:07:34,096 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [teams] collection in the [org.heartfulness.avtc.model.Language] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:07:34,099 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Caller] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 17:07:34,104 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - EnumTypeStringEvent - The [ageGroup] enum attribute in the [org.heartfulness.avtc.model.Caller] entity uses the EnumType.STRING strategy, which has a bigger memory footprint than EnumType.ORDINAL. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EnumTypeStringEvent
2021-08-08 17:07:34,111 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [calls] attribute in the [org.heartfulness.avtc.model.Caller] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:07:34,111 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [calls] bidirectional association in the [org.heartfulness.avtc.model.Caller] entity requires both ends to be synchronized. Only the [addCall(org.heartfulness.avtc.model.Call call)] could be found. Consider adding the [removeCall(org.heartfulness.avtc.model.Call call)]  synchronization method as well. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 17:07:34,112 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [calls] collection in the [org.heartfulness.avtc.model.Caller] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:07:34,114 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - EnumTypeStringEvent - The [category] enum attribute in the [org.heartfulness.avtc.model.Caller] entity uses the EnumType.STRING strategy, which has a bigger memory footprint than EnumType.ORDINAL. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EnumTypeStringEvent
2021-08-08 17:07:34,143 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [languages] collection in the [org.heartfulness.avtc.model.Caller] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:07:34,189 INFO org.hibernate.dialect.Dialect [restartedMain] HHH000400: Using dialect: org.hibernate.dialect.MySQL57Dialect
2021-08-08 17:07:34,192 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - DialectVersionEvent - Your application is using the [org.hibernate.dialect.MySQL55Dialect] Hibernate-specific Dialect. Consider using the [org.hibernate.dialect.MySQL57Dialect] instead, as it's closer to your current database server version [MySQL 5.7]. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#DialectVersionEvent
2021-08-08 17:07:34,197 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - SkipAutoCommitCheckEvent - You should set the [hibernate.connection.provider_disables_autocommit] configuration property to [true] while also making sure that the underlying DataSource is configured to disable the auto-commit flag whenever a new Connection is being acquired. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#SkipAutoCommitCheckEvent
2021-08-08 17:07:34,207 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - JdbcBatchSizeEvent - If you set the [hibernate.jdbc.batch_size] configuration property to a value greater than 1 (usually between 5 and 30), Hibernate can then execute SQL statements in batches, therefore reducing the number of database network roundtrips. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#JdbcBatchSizeEvent
2021-08-08 17:07:34,215 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] BLOCKER - SchemaGenerationEvent - You should not set the [hibernate.hbm2ddl.auto] configuration property to the value of [update], as Hibernate will then manage the database schema for you. Instead, you should use an incremental schema migration tool (e.g., Flyway, Liquibase), which allows you to use any database-specific DDL construct. By storing the migration scripts in the Version Control System along with the application source code, you will always remember why a certain schema change was done. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#SchemaGenerationEvent
2021-08-08 17:07:34,220 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - QueryPaginationCollectionFetchingEvent - You should set the [hibernate.query.fail_on_pagination_over_collection_fetch] configuration property to the value of [true], as Hibernate can then prevent in-memory pagination when join fetching a child entity collection. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#QueryPaginationCollectionFetchingEvent
2021-08-08 17:07:34,222 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - DefaultQueryPlanCacheMaxSizeEvent - You should set the [hibernate.query.plan_cache_max_size] configuration property to a value that allows you to hold all JPQL, Criteria API, or SQL queries executed with Hibernate. The default query plan cache size is [2048] and might not be enough for a non-trivial application. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#DefaultQueryPlanCacheMaxSizeEvent
2021-08-08 17:07:34,230 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - JdbcStatementCacheSizeEvent - The JDBC statement cache is disabled. You should consider enabling it, as follows. You should set the [cachePrepStmts] JDBC configuration property to the value of [true] and the [prepStmtCacheSize] property to the value of [256] . Consider lowering the statement cache size if you don't have enough memory and increasing it if you have plenty of memory and need to execute lots of distinct SQL statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#JdbcStatementCacheSizeEvent
2021-08-08 17:07:34,232 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] 90 issues were found: 1 BLOCKER, 50 CRITICAL, 9 MAJOR, 30 MINOR
2021-08-08 17:07:34,424 INFO org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration [restartedMain] 

Using generated security password: 4ba187b6-de43-4eca-8ff6-d3778735de92

2021-08-08 17:07:35,000 INFO org.springframework.security.web.DefaultSecurityFilterChain [restartedMain] Will secure any request with [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@5814bf23, org.springframework.security.web.context.SecurityContextPersistenceFilter@124bbdf, org.springframework.security.web.header.HeaderWriterFilter@aacb6cb, org.springframework.web.filter.CorsFilter@44478b85, org.springframework.security.web.authentication.logout.LogoutFilter@11b5c1e5, org.heartfulness.avtc.security.auth.SecurityFilter@748f9fb0, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@a918a9, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@5b96dddd, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@65c7a9a8, org.springframework.security.web.session.SessionManagementFilter@42f99ff3, org.springframework.security.web.access.ExceptionTranslationFilter@13409985, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@2cb5ba4b]
2021-08-08 17:07:38,503 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [restartedMain] LiveReload server is running on port 35729
2021-08-08 17:07:38,586 INFO org.apache.juli.logging.DirectJDKLog [restartedMain] Starting ProtocolHandler ["http-nio-8082"]
2021-08-08 17:07:38,689 INFO org.springframework.boot.web.embedded.tomcat.TomcatWebServer [restartedMain] Tomcat started on port(s): 8082 (http) with context path ''
2021-08-08 17:07:38,750 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Started AvtcApplication in 18.775 seconds (JVM running for 23.181)
2021-08-08 17:07:38,756 INFO org.springframework.boot.availability.ApplicationAvailabilityBean [restartedMain] Application availability state LivenessState changed to CORRECT
2021-08-08 17:07:38,763 INFO org.springframework.boot.availability.ApplicationAvailabilityBean [restartedMain] Application availability state ReadinessState changed to ACCEPTING_TRAFFIC
2021-08-08 17:07:38,924 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 17:07:56,763 INFO org.apache.juli.logging.DirectJDKLog [http-nio-8082-exec-2] Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-08-08 17:07:56,764 INFO org.springframework.web.servlet.FrameworkServlet [http-nio-8082-exec-2] Initializing Servlet 'dispatcherServlet'
2021-08-08 17:07:56,768 INFO org.springframework.web.servlet.FrameworkServlet [http-nio-8082-exec-2] Completed initialization in 4 ms
2021-08-08 17:07:56,820 INFO org.heartfulness.avtc.security.auth.SecurityFilter [http-nio-8082-exec-2] null
2021-08-08 17:07:57,392 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [http-nio-8082-exec-2] MINOR - EntityAlreadyManagedEvent - The [org.heartfulness.avtc.model.Call] entity with the identifier value of [1] is already managed by the Hibernate Session, so you don't need to call [merge] for it. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EntityAlreadyManagedEvent
2021-08-08 17:07:57,445 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [http-nio-8082-exec-2] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 17:09:10,312 INFO org.heartfulness.avtc.security.auth.SecurityFilter [http-nio-8082-exec-5] null
2021-08-08 17:09:10,500 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [http-nio-8082-exec-5] MINOR - EntityAlreadyManagedEvent - The [org.heartfulness.avtc.model.Agent] entity with the identifier value of [1] is already managed by the Hibernate Session, so you don't need to call [merge] for it. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EntityAlreadyManagedEvent
2021-08-08 17:09:10,504 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [http-nio-8082-exec-5] MINOR - EntityAlreadyManagedEvent - The [org.heartfulness.avtc.model.Agent] entity with the identifier value of [2] is already managed by the Hibernate Session, so you don't need to call [merge] for it. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EntityAlreadyManagedEvent
2021-08-08 17:09:10,507 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [http-nio-8082-exec-5] MINOR - EntityAlreadyManagedEvent - The [org.heartfulness.avtc.model.Call] entity with the identifier value of [1] is already managed by the Hibernate Session, so you don't need to call [merge] for it. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EntityAlreadyManagedEvent
2021-08-08 17:09:10,537 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [http-nio-8082-exec-5] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 17:09:18,943 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 17:10:58,957 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 17:12:38,976 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 17:14:11,623 INFO org.heartfulness.avtc.security.auth.SecurityFilter [http-nio-8082-exec-7] null
2021-08-08 17:14:11,955 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [http-nio-8082-exec-7] MINOR - EntityAlreadyManagedEvent - The [org.heartfulness.avtc.model.Agent] entity with the identifier value of [1] is already managed by the Hibernate Session, so you don't need to call [merge] for it. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EntityAlreadyManagedEvent
2021-08-08 17:14:11,963 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [http-nio-8082-exec-7] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 17:14:18,257 INFO org.heartfulness.avtc.security.auth.SecurityFilter [http-nio-8082-exec-9] null
2021-08-08 17:14:18,309 ERROR org.apache.juli.logging.DirectJDKLog [http-nio-8082-exec-9] Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.NullPointerException] with root cause
java.lang.NullPointerException: null
	at org.heartfulness.avtc.service.InCallService.inCall(InCallService.java:74)
	at org.heartfulness.avtc.controller.NodeController.inCallWebHook(NodeController.java:43)
	at org.heartfulness.avtc.controller.NodeController$$FastClassBySpringCGLIB$$7244677c.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:779)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:692)
	at org.heartfulness.avtc.controller.NodeController$$EnhancerBySpringCGLIB$$90723813.inCallWebHook(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:197)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:141)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:894)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1063)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:652)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:327)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:121)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:115)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.heartfulness.avtc.security.auth.SecurityFilter.doFilterInternal(SecurityFilter.java:58)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:110)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:80)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:211)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:183)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:893)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1707)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:834)
2021-08-08 17:14:19,007 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 17:15:26,958 INFO org.heartfulness.avtc.security.auth.SecurityFilter [http-nio-8082-exec-1] null
2021-08-08 17:15:44,148 WARN com.zaxxer.hikari.pool.HikariPool$HouseKeeper [HikariPool-1 housekeeper] HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=45s621ms908µs700ns).
2021-08-08 17:15:44,156 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [http-nio-8082-exec-1] CRITICAL - SessionTimeoutEvent - The JPA EntityManager or Hibernate Session has run for [17176] ms. You should avoid long-running Persistence Contexts as they can impact both the user experience and resource usage. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#SessionTimeoutEvent
2021-08-08 17:15:44,158 ERROR org.apache.juli.logging.DirectJDKLog [http-nio-8082-exec-1] Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.NullPointerException] with root cause
java.lang.NullPointerException: null
	at org.heartfulness.avtc.service.InCallService.inCall(InCallService.java:74)
	at org.heartfulness.avtc.controller.NodeController.inCallWebHook(NodeController.java:43)
	at org.heartfulness.avtc.controller.NodeController$$FastClassBySpringCGLIB$$7244677c.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:779)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:692)
	at org.heartfulness.avtc.controller.NodeController$$EnhancerBySpringCGLIB$$90723813.inCallWebHook(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:197)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:141)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:894)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1063)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:652)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:327)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:121)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:115)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.heartfulness.avtc.security.auth.SecurityFilter.doFilterInternal(SecurityFilter.java:58)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:110)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:80)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:211)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:183)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:893)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1707)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:834)
2021-08-08 17:18:09,576 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting AvtcApplication using Java 11.0.10 on DESKTOP-BIBH7GP with PID 3184 (C:\Users\sonna\IdeaProjects\avtc\target\classes started by sonna in C:\Users\sonna\IdeaProjects\avtc)
2021-08-08 17:18:09,572 INFO org.hibernate.validator.internal.util.Version [background-preinit] HV000001: Hibernate Validator 6.2.0.Final
2021-08-08 17:18:09,583 DEBUG org.springframework.boot.StartupInfoLogger [restartedMain] Running with Spring Boot v2.5.0, Spring v5.3.7
2021-08-08 17:18:09,583 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2021-08-08 17:18:09,676 INFO org.springframework.boot.logging.DeferredLog [restartedMain] The Class-Path manifest attribute in C:\Users\sonna\.m2\repository\org\glassfish\hk2\hk2\2.6.1\hk2-2.6.1.jar referenced one or more files that do not exist: file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/hk2-utils.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/jakarta.annotation-api.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/jakarta.inject.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/hk2-api.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/aopalliance-repackaged.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/hk2-core.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/hk2-locator.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/javassist.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/hk2-runlevel.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/class-model.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/asm.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/asm-analysis.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/asm-commons.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/asm-tree.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/asm-util.jar
2021-08-08 17:18:09,676 INFO org.springframework.boot.logging.DeferredLog [restartedMain] The Class-Path manifest attribute in C:\Users\sonna\.m2\repository\io\grpc\grpc-netty-shaded\1.23.0\grpc-netty-shaded-1.23.0.jar referenced one or more files that do not exist: file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/grpc-core-1.23.0.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/grpc-api-1.23.0.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/gson-2.7.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/annotations-4.1.1.4.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/perfmark-api-0.17.0.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/opencensus-contrib-grpc-metrics-0.21.0.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/opencensus-api-0.21.0.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/grpc-context-1.23.0.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/error_prone_annotations-2.3.2.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/jsr305-3.0.2.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/animal-sniffer-annotations-1.17.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/guava-26.0-android.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/checker-compat-qual-2.5.2.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/j2objc-annotations-1.1.jar
2021-08-08 17:18:09,677 INFO org.springframework.boot.logging.DeferredLog [restartedMain] Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2021-08-08 17:18:09,678 INFO org.springframework.boot.logging.DeferredLog [restartedMain] For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2021-08-08 17:18:10,182 WARN org.springframework.core.log.CompositeLog [background-preinit] For Jackson Kotlin classes support please add "com.fasterxml.jackson.module:jackson-module-kotlin" to the classpath
2021-08-08 17:18:11,563 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [restartedMain] Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2021-08-08 17:18:11,927 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [restartedMain] Finished Spring Data repository scanning in 347 ms. Found 12 JPA repository interfaces.
2021-08-08 17:18:13,171 INFO org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [restartedMain] Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@38490704' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-08-08 17:18:13,187 INFO org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [restartedMain] Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-08-08 17:18:13,972 INFO org.springframework.boot.web.embedded.tomcat.TomcatWebServer [restartedMain] Tomcat initialized with port(s): 8082 (http)
2021-08-08 17:18:14,018 INFO org.apache.juli.logging.DirectJDKLog [restartedMain] Initializing ProtocolHandler ["http-nio-8082"]
2021-08-08 17:18:14,021 INFO org.apache.juli.logging.DirectJDKLog [restartedMain] Starting service [Tomcat]
2021-08-08 17:18:14,023 INFO org.apache.juli.logging.DirectJDKLog [restartedMain] Starting Servlet engine: [Apache Tomcat/9.0.46]
2021-08-08 17:18:14,407 INFO org.apache.juli.logging.DirectJDKLog [restartedMain] Initializing Spring embedded WebApplicationContext
2021-08-08 17:18:14,408 INFO org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext [restartedMain] Root WebApplicationContext: initialization completed in 4728 ms
2021-08-08 17:18:14,962 DEBUG org.springframework.web.filter.GenericFilterBean [restartedMain] Filter 'securityFilter' configured for use
2021-08-08 17:18:15,551 INFO org.hibernate.jpa.internal.util.LogHelper [restartedMain] HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2021-08-08 17:18:15,747 INFO org.hibernate.Version [restartedMain] HHH000412: Hibernate Core {5.2.17.Final}
2021-08-08 17:18:15,751 INFO org.hibernate.cfg.Environment [restartedMain] HHH000206: hibernate.properties not found
2021-08-08 17:18:15,872 INFO org.hibernate.annotations.common.reflection.java.JavaReflectionManager [restartedMain] HCANN000001: Hibernate Commons Annotations {5.0.1.Final}
2021-08-08 17:18:16,207 INFO com.zaxxer.hikari.HikariDataSource [restartedMain] HikariPool-1 - Starting...
2021-08-08 17:18:20,074 INFO com.zaxxer.hikari.HikariDataSource [restartedMain] HikariPool-1 - Start completed.
2021-08-08 17:18:20,159 INFO org.hibernate.dialect.Dialect [restartedMain] HHH000400: Using dialect: org.hibernate.dialect.MySQL55Dialect
2021-08-08 17:18:23,613 INFO org.springframework.orm.jpa.AbstractEntityManagerFactoryBean [restartedMain] Initialized JPA EntityManagerFactory for persistence unit 'default'
2021-08-08 17:18:25,370 INFO org.hibernate.hql.internal.QueryTranslatorFactoryInitiator [restartedMain] HHH000397: Using ASTQueryTranslatorFactory
2021-08-08 17:18:26,591 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] 
 _    _                           _     _
| |  | |                         (_)   | |
| |__| |_   _ _ __   ___ _ __ ___ _ ___| |_ ___ _ __   ___ ___
|  __  | | | | '_ \ / _ \ '__/ __| / __| __/ _ \ '_ \ / __/ _ \
| |  | | |_| | |_) |  __/ |  \__ \ \__ \ ||  __/ | | | (_|  __/
|_|  |_|\__, | .__/ \___|_|  |___/_|___/\__\___|_| |_|\___\___|
         __/ | |
        |___/|_|

           ____        _   _           _
          / __ \      | | (_)         (_)
         | |  | |_ __ | |_ _ _ __ ___  _ _______ _ __
         | |  | | '_ \| __| | '_ ` _ \| |_  / _ \ '__|
         | |__| | |_) | |_| | | | | | | |/ /  __/ |
          \____/| .__/ \__|_|_| |_| |_|_/___\___|_|
                | |
                |_|

2021-08-08 17:18:26,655 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Team] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 17:18:26,673 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [agents] attribute in the [org.heartfulness.avtc.model.Team] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:18:26,684 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - ManyToManyCascadeRemoveEvent - The [agents] many-to-many association in the [org.heartfulness.avtc.model.Team] entity cascades the REMOVE operation. Cascading the REMOVE operation is not needed since the other side is also a parent association. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#ManyToManyCascadeRemoveEvent
2021-08-08 17:18:26,687 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [agents] collection in the [org.heartfulness.avtc.model.Team] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:18:26,696 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [language] attribute in the [org.heartfulness.avtc.model.Team] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:18:26,701 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [manager] attribute in the [org.heartfulness.avtc.model.Team] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:18:26,704 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - OneToOneWithoutMapsIdEvent - The [manager] one-to-one association in the [org.heartfulness.avtc.model.Team] entity is using a separate Foreign Key to reference the parent record. Consider using @MapsId so that the identifier is shared with the parent row. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#OneToOneWithoutMapsIdEvent
2021-08-08 17:18:26,707 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [service] attribute in the [org.heartfulness.avtc.model.Team] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:18:26,711 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [timeSlots] attribute in the [org.heartfulness.avtc.model.Team] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:18:26,712 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - ManyToManyCascadeRemoveEvent - The [timeSlots] many-to-many association in the [org.heartfulness.avtc.model.Team] entity cascades the REMOVE operation. Cascading the REMOVE operation is not needed since the other side is also a parent association. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#ManyToManyCascadeRemoveEvent
2021-08-08 17:18:26,714 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [timeSlots] bidirectional association in the [org.heartfulness.avtc.model.Team] entity requires both ends to be synchronized. Only the [addTimeSlot(org.heartfulness.avtc.model.TimeSlot timeSlot)] could be found. Consider adding the [removeTimeSlot(org.heartfulness.avtc.model.TimeSlot timeSlot)]  synchronization method as well. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 17:18:26,715 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [timeSlots] collection in the [org.heartfulness.avtc.model.Team] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:18:26,720 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Service] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 17:18:26,724 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [Departments] attribute in the [org.heartfulness.avtc.model.Service] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:18:26,724 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [Departments] bidirectional association in the [org.heartfulness.avtc.model.Service] entity requires both ends to be synchronized. Consider adding the [addDepartment(org.heartfulness.avtc.model.Department department)] and [removeDepartment(org.heartfulness.avtc.model.Department department)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 17:18:26,725 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [Departments] collection in the [org.heartfulness.avtc.model.Service] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:18:26,733 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [teams] attribute in the [org.heartfulness.avtc.model.Service] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:18:26,734 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [teams] bidirectional association in the [org.heartfulness.avtc.model.Service] entity requires both ends to be synchronized. Consider adding the [addTeam(org.heartfulness.avtc.model.Team team)] and [removeTeam(org.heartfulness.avtc.model.Team team)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 17:18:26,735 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [teams] collection in the [org.heartfulness.avtc.model.Service] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:18:26,742 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.TimeSlot] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 17:18:26,750 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [scheduleExceptions] attribute in the [org.heartfulness.avtc.model.TimeSlot] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:18:26,750 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [scheduleExceptions] bidirectional association in the [org.heartfulness.avtc.model.TimeSlot] entity requires both ends to be synchronized. Only the [addScheduleException(org.heartfulness.avtc.model.ScheduleException scheduleException)] could be found. Consider adding the [removeScheduleException(org.heartfulness.avtc.model.ScheduleException scheduleException)]  synchronization method as well. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 17:18:26,751 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [scheduleExceptions] collection in the [org.heartfulness.avtc.model.TimeSlot] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:18:26,758 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [teams] attribute in the [org.heartfulness.avtc.model.TimeSlot] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:18:26,759 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - ManyToManyCascadeRemoveEvent - The [teams] many-to-many association in the [org.heartfulness.avtc.model.TimeSlot] entity cascades the REMOVE operation. Cascading the REMOVE operation is not needed since the other side is also a parent association. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#ManyToManyCascadeRemoveEvent
2021-08-08 17:18:26,759 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [teams] collection in the [org.heartfulness.avtc.model.TimeSlot] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:18:26,768 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.ScheduleException] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 17:18:26,773 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [agent] attribute in the [org.heartfulness.avtc.model.ScheduleException] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:18:26,779 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [slot] attribute in the [org.heartfulness.avtc.model.ScheduleException] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:18:26,784 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Schedule] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 17:18:26,787 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [agent] attribute in the [org.heartfulness.avtc.model.Schedule] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:18:26,792 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - LargeColumnEvent - The [endTime] attribute in the [org.heartfulness.avtc.model.Schedule] entity is mapped to a large column type. Consider using either compact types or moving the large columns to separate tables or using multiple entities mapped to the same database table so that you can choose which properties are to be fetched from the database based on the entity type. You should use the @Basic(fetch=LAZY) annotation and activate the bytecode enhancement lazy loading mechanism as, otherwise, the column is fetched eagerly when loading the entity. You should use the @DynamicUpdate annotation so that the UPDATE statement contains only the columns that have been modified by the currently running Persistence Context. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#LargeColumnEvent
2021-08-08 17:18:26,795 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - LargeColumnEvent - The [startTime] attribute in the [org.heartfulness.avtc.model.Schedule] entity is mapped to a large column type. Consider using either compact types or moving the large columns to separate tables or using multiple entities mapped to the same database table so that you can choose which properties are to be fetched from the database based on the entity type. You should use the @Basic(fetch=LAZY) annotation and activate the bytecode enhancement lazy loading mechanism as, otherwise, the column is fetched eagerly when loading the entity. You should use the @DynamicUpdate annotation so that the UPDATE statement contains only the columns that have been modified by the currently running Persistence Context. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#LargeColumnEvent
2021-08-08 17:18:26,799 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Logger] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 17:18:26,803 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [agent] attribute in the [org.heartfulness.avtc.model.Logger] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:18:26,812 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Call] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 17:18:26,816 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [agent] attribute in the [org.heartfulness.avtc.model.Call] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:18:26,822 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - EnumTypeStringEvent - The [callStatus] enum attribute in the [org.heartfulness.avtc.model.Call] entity uses the EnumType.STRING strategy, which has a bigger memory footprint than EnumType.ORDINAL. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EnumTypeStringEvent
2021-08-08 17:18:26,826 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [caller] attribute in the [org.heartfulness.avtc.model.Call] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:18:26,829 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - EnumTypeStringEvent - The [category] enum attribute in the [org.heartfulness.avtc.model.Call] entity uses the EnumType.STRING strategy, which has a bigger memory footprint than EnumType.ORDINAL. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EnumTypeStringEvent
2021-08-08 17:18:26,859 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [leasing] bidirectional association in the [org.heartfulness.avtc.model.Call] entity requires both ends to be synchronized. Consider adding the [addAgent(org.heartfulness.avtc.model.Agent agent)] and [removeAgent(org.heartfulness.avtc.model.Agent agent)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 17:18:26,862 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [leasing] collection in the [org.heartfulness.avtc.model.Call] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:18:26,910 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Agent] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 17:18:26,928 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [calls] bidirectional association in the [org.heartfulness.avtc.model.Agent] entity requires both ends to be synchronized. Consider adding the [addCall(org.heartfulness.avtc.model.Call call)] and [removeCall(org.heartfulness.avtc.model.Call call)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 17:18:26,931 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [calls] collection in the [org.heartfulness.avtc.model.Agent] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:18:26,967 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [departments] attribute in the [org.heartfulness.avtc.model.Agent] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:18:26,968 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - ManyToManyCascadeRemoveEvent - The [departments] many-to-many association in the [org.heartfulness.avtc.model.Agent] entity cascades the REMOVE operation. Cascading the REMOVE operation is not needed since the other side is also a parent association. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#ManyToManyCascadeRemoveEvent
2021-08-08 17:18:26,969 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [departments] collection in the [org.heartfulness.avtc.model.Agent] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:18:26,998 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [leasedBy] attribute in the [org.heartfulness.avtc.model.Agent] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:18:27,007 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [loggerSet] bidirectional association in the [org.heartfulness.avtc.model.Agent] entity requires both ends to be synchronized. Consider adding the [addLogger(org.heartfulness.avtc.model.Logger logger)] and [removeLogger(org.heartfulness.avtc.model.Logger logger)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 17:18:27,007 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [loggerSet] collection in the [org.heartfulness.avtc.model.Agent] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:18:27,035 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - EnumTypeStringEvent - The [role] enum attribute in the [org.heartfulness.avtc.model.Agent] entity uses the EnumType.STRING strategy, which has a bigger memory footprint than EnumType.ORDINAL. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EnumTypeStringEvent
2021-08-08 17:18:27,039 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [scheduleExceptions] attribute in the [org.heartfulness.avtc.model.Agent] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:18:27,040 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [scheduleExceptions] bidirectional association in the [org.heartfulness.avtc.model.Agent] entity requires both ends to be synchronized. Consider adding the [addScheduleException(org.heartfulness.avtc.model.ScheduleException scheduleException)] and [removeScheduleException(org.heartfulness.avtc.model.ScheduleException scheduleException)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 17:18:27,041 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [scheduleExceptions] collection in the [org.heartfulness.avtc.model.Agent] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:18:27,046 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [schedules] bidirectional association in the [org.heartfulness.avtc.model.Agent] entity requires both ends to be synchronized. Only the [addSchedule(org.heartfulness.avtc.model.Schedule schedule)] could be found. Consider adding the [removeSchedule(org.heartfulness.avtc.model.Schedule schedule)]  synchronization method as well. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 17:18:27,046 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [schedules] collection in the [org.heartfulness.avtc.model.Agent] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:18:27,071 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - ManyToManyCascadeRemoveEvent - The [teams] many-to-many association in the [org.heartfulness.avtc.model.Agent] entity cascades the REMOVE operation. Cascading the REMOVE operation is not needed since the other side is also a parent association. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#ManyToManyCascadeRemoveEvent
2021-08-08 17:18:27,072 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [teams] collection in the [org.heartfulness.avtc.model.Agent] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:18:27,082 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [teamManaged] attribute in the [org.heartfulness.avtc.model.Agent] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:18:27,085 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - OneToOneParentSideEvent - The [teamManaged] one-to-one association in the [class org.heartfulness.avtc.model.Agent] entity is mapped as the parent-side of this relationship. The parent-side of a one-to-one association is fetched eagerly unless bytecode enhancement lazy loading is enabled and the association is annotated with @LazyToOne(LazyToOneOption.NO_PROXY). For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#OneToOneParentSideEvent
2021-08-08 17:18:27,089 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Department] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 17:18:27,092 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [agents] bidirectional association in the [org.heartfulness.avtc.model.Department] entity requires both ends to be synchronized. Only the [addAgent(org.heartfulness.avtc.model.Agent agent)] could be found. Consider adding the [removeAgent(org.heartfulness.avtc.model.Agent agent)]  synchronization method as well. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 17:18:27,093 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [agents] collection in the [org.heartfulness.avtc.model.Department] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:18:27,097 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [language] attribute in the [org.heartfulness.avtc.model.Department] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:18:27,099 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [service] attribute in the [org.heartfulness.avtc.model.Department] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:18:27,103 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Language] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 17:18:27,106 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [Departments] attribute in the [org.heartfulness.avtc.model.Language] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:18:27,107 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [Departments] bidirectional association in the [org.heartfulness.avtc.model.Language] entity requires both ends to be synchronized. Consider adding the [addDepartment(org.heartfulness.avtc.model.Department department)] and [removeDepartment(org.heartfulness.avtc.model.Department department)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 17:18:27,108 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [Departments] collection in the [org.heartfulness.avtc.model.Language] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:18:27,110 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [callers] attribute in the [org.heartfulness.avtc.model.Language] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:18:27,112 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [callers] bidirectional association in the [org.heartfulness.avtc.model.Language] entity requires both ends to be synchronized. Consider adding the [addCaller(org.heartfulness.avtc.model.Caller caller)] and [removeCaller(org.heartfulness.avtc.model.Caller caller)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 17:18:27,112 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [callers] collection in the [org.heartfulness.avtc.model.Language] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:18:27,119 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [teams] attribute in the [org.heartfulness.avtc.model.Language] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:18:27,120 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [teams] bidirectional association in the [org.heartfulness.avtc.model.Language] entity requires both ends to be synchronized. Consider adding the [addTeam(org.heartfulness.avtc.model.Team team)] and [removeTeam(org.heartfulness.avtc.model.Team team)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 17:18:27,120 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [teams] collection in the [org.heartfulness.avtc.model.Language] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:18:27,125 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Caller] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 17:18:27,132 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - EnumTypeStringEvent - The [ageGroup] enum attribute in the [org.heartfulness.avtc.model.Caller] entity uses the EnumType.STRING strategy, which has a bigger memory footprint than EnumType.ORDINAL. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EnumTypeStringEvent
2021-08-08 17:18:27,144 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [calls] attribute in the [org.heartfulness.avtc.model.Caller] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:18:27,145 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [calls] bidirectional association in the [org.heartfulness.avtc.model.Caller] entity requires both ends to be synchronized. Only the [addCall(org.heartfulness.avtc.model.Call call)] could be found. Consider adding the [removeCall(org.heartfulness.avtc.model.Call call)]  synchronization method as well. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 17:18:27,145 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [calls] collection in the [org.heartfulness.avtc.model.Caller] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:18:27,149 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - EnumTypeStringEvent - The [category] enum attribute in the [org.heartfulness.avtc.model.Caller] entity uses the EnumType.STRING strategy, which has a bigger memory footprint than EnumType.ORDINAL. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EnumTypeStringEvent
2021-08-08 17:18:27,197 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [languages] collection in the [org.heartfulness.avtc.model.Caller] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:18:27,257 INFO org.hibernate.dialect.Dialect [restartedMain] HHH000400: Using dialect: org.hibernate.dialect.MySQL57Dialect
2021-08-08 17:18:27,260 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - DialectVersionEvent - Your application is using the [org.hibernate.dialect.MySQL55Dialect] Hibernate-specific Dialect. Consider using the [org.hibernate.dialect.MySQL57Dialect] instead, as it's closer to your current database server version [MySQL 5.7]. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#DialectVersionEvent
2021-08-08 17:18:27,265 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - SkipAutoCommitCheckEvent - You should set the [hibernate.connection.provider_disables_autocommit] configuration property to [true] while also making sure that the underlying DataSource is configured to disable the auto-commit flag whenever a new Connection is being acquired. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#SkipAutoCommitCheckEvent
2021-08-08 17:18:27,279 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - JdbcBatchSizeEvent - If you set the [hibernate.jdbc.batch_size] configuration property to a value greater than 1 (usually between 5 and 30), Hibernate can then execute SQL statements in batches, therefore reducing the number of database network roundtrips. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#JdbcBatchSizeEvent
2021-08-08 17:18:27,290 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] BLOCKER - SchemaGenerationEvent - You should not set the [hibernate.hbm2ddl.auto] configuration property to the value of [update], as Hibernate will then manage the database schema for you. Instead, you should use an incremental schema migration tool (e.g., Flyway, Liquibase), which allows you to use any database-specific DDL construct. By storing the migration scripts in the Version Control System along with the application source code, you will always remember why a certain schema change was done. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#SchemaGenerationEvent
2021-08-08 17:18:27,297 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - QueryPaginationCollectionFetchingEvent - You should set the [hibernate.query.fail_on_pagination_over_collection_fetch] configuration property to the value of [true], as Hibernate can then prevent in-memory pagination when join fetching a child entity collection. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#QueryPaginationCollectionFetchingEvent
2021-08-08 17:18:27,300 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - DefaultQueryPlanCacheMaxSizeEvent - You should set the [hibernate.query.plan_cache_max_size] configuration property to a value that allows you to hold all JPQL, Criteria API, or SQL queries executed with Hibernate. The default query plan cache size is [2048] and might not be enough for a non-trivial application. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#DefaultQueryPlanCacheMaxSizeEvent
2021-08-08 17:18:27,309 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - JdbcStatementCacheSizeEvent - The JDBC statement cache is disabled. You should consider enabling it, as follows. You should set the [cachePrepStmts] JDBC configuration property to the value of [true] and the [prepStmtCacheSize] property to the value of [256] . Consider lowering the statement cache size if you don't have enough memory and increasing it if you have plenty of memory and need to execute lots of distinct SQL statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#JdbcStatementCacheSizeEvent
2021-08-08 17:18:27,311 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] 90 issues were found: 1 BLOCKER, 50 CRITICAL, 9 MAJOR, 30 MINOR
2021-08-08 17:18:27,513 INFO org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration [restartedMain] 

Using generated security password: 47557f19-f624-4efb-be9c-59ff58ffb7b3

2021-08-08 17:18:28,188 INFO org.springframework.security.web.DefaultSecurityFilterChain [restartedMain] Will secure any request with [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@5675038c, org.springframework.security.web.context.SecurityContextPersistenceFilter@501db88e, org.springframework.security.web.header.HeaderWriterFilter@7cdd90d9, org.springframework.web.filter.CorsFilter@243e191f, org.springframework.security.web.authentication.logout.LogoutFilter@15b2c7e5, org.heartfulness.avtc.security.auth.SecurityFilter@58a8549f, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@2f17dadb, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@545093d8, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@e37b942, org.springframework.security.web.session.SessionManagementFilter@27f6d425, org.springframework.security.web.access.ExceptionTranslationFilter@2a7aa6ac, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@102fe383]
2021-08-08 17:18:32,411 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [restartedMain] LiveReload server is running on port 35729
2021-08-08 17:18:32,484 INFO org.apache.juli.logging.DirectJDKLog [restartedMain] Starting ProtocolHandler ["http-nio-8082"]
2021-08-08 17:18:32,538 INFO org.springframework.boot.web.embedded.tomcat.TomcatWebServer [restartedMain] Tomcat started on port(s): 8082 (http) with context path ''
2021-08-08 17:18:32,572 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Started AvtcApplication in 23.927 seconds (JVM running for 27.63)
2021-08-08 17:18:32,577 INFO org.springframework.boot.availability.ApplicationAvailabilityBean [restartedMain] Application availability state LivenessState changed to CORRECT
2021-08-08 17:18:32,583 INFO org.springframework.boot.availability.ApplicationAvailabilityBean [restartedMain] Application availability state ReadinessState changed to ACCEPTING_TRAFFIC
2021-08-08 17:18:32,862 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 17:19:07,695 INFO org.apache.juli.logging.DirectJDKLog [http-nio-8082-exec-1] Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-08-08 17:19:07,696 INFO org.springframework.web.servlet.FrameworkServlet [http-nio-8082-exec-1] Initializing Servlet 'dispatcherServlet'
2021-08-08 17:19:07,699 INFO org.springframework.web.servlet.FrameworkServlet [http-nio-8082-exec-1] Completed initialization in 3 ms
2021-08-08 17:19:07,741 INFO org.heartfulness.avtc.security.auth.SecurityFilter [http-nio-8082-exec-1] null
2021-08-08 17:19:08,184 ERROR org.apache.juli.logging.DirectJDKLog [http-nio-8082-exec-1] Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.NullPointerException] with root cause
java.lang.NullPointerException: null
	at org.heartfulness.avtc.service.InCallService.inCall(InCallService.java:74)
	at org.heartfulness.avtc.controller.NodeController.inCallWebHook(NodeController.java:43)
	at org.heartfulness.avtc.controller.NodeController$$FastClassBySpringCGLIB$$7244677c.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:779)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:692)
	at org.heartfulness.avtc.controller.NodeController$$EnhancerBySpringCGLIB$$8ad5c6e1.inCallWebHook(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:197)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:141)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:894)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1063)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:652)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:327)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:121)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:115)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.heartfulness.avtc.security.auth.SecurityFilter.doFilterInternal(SecurityFilter.java:58)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:110)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:80)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:211)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:183)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:893)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1707)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:834)
2021-08-08 17:19:30,044 INFO org.heartfulness.avtc.security.auth.SecurityFilter [http-nio-8082-exec-4] null
2021-08-08 17:19:30,258 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [http-nio-8082-exec-4] MINOR - EntityAlreadyManagedEvent - The [org.heartfulness.avtc.model.Agent] entity with the identifier value of [1] is already managed by the Hibernate Session, so you don't need to call [merge] for it. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EntityAlreadyManagedEvent
2021-08-08 17:19:30,328 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [http-nio-8082-exec-4] MINOR - EntityAlreadyManagedEvent - The [org.heartfulness.avtc.model.Agent] entity with the identifier value of [2] is already managed by the Hibernate Session, so you don't need to call [merge] for it. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EntityAlreadyManagedEvent
2021-08-08 17:19:30,347 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [http-nio-8082-exec-4] MINOR - EntityAlreadyManagedEvent - The [org.heartfulness.avtc.model.Call] entity with the identifier value of [1] is already managed by the Hibernate Session, so you don't need to call [merge] for it. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EntityAlreadyManagedEvent
2021-08-08 17:19:30,361 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [http-nio-8082-exec-4] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 17:19:36,317 INFO org.heartfulness.avtc.security.auth.SecurityFilter [http-nio-8082-exec-5] null
2021-08-08 17:19:36,454 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [http-nio-8082-exec-5] MINOR - EntityAlreadyManagedEvent - The [org.heartfulness.avtc.model.Agent] entity with the identifier value of [1] is already managed by the Hibernate Session, so you don't need to call [merge] for it. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EntityAlreadyManagedEvent
2021-08-08 17:19:36,456 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [http-nio-8082-exec-5] MINOR - EntityAlreadyManagedEvent - The [org.heartfulness.avtc.model.Call] entity with the identifier value of [1] is already managed by the Hibernate Session, so you don't need to call [merge] for it. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EntityAlreadyManagedEvent
2021-08-08 17:19:36,463 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [http-nio-8082-exec-5] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 17:20:12,891 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 17:21:21,872 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting AvtcApplication using Java 11.0.10 on DESKTOP-BIBH7GP with PID 25680 (C:\Users\sonna\IdeaProjects\avtc\target\classes started by sonna in C:\Users\sonna\IdeaProjects\avtc)
2021-08-08 17:21:21,874 INFO org.hibernate.validator.internal.util.Version [background-preinit] HV000001: Hibernate Validator 6.2.0.Final
2021-08-08 17:21:21,879 DEBUG org.springframework.boot.StartupInfoLogger [restartedMain] Running with Spring Boot v2.5.0, Spring v5.3.7
2021-08-08 17:21:21,880 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2021-08-08 17:21:21,969 INFO org.springframework.boot.logging.DeferredLog [restartedMain] The Class-Path manifest attribute in C:\Users\sonna\.m2\repository\org\glassfish\hk2\hk2\2.6.1\hk2-2.6.1.jar referenced one or more files that do not exist: file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/hk2-utils.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/jakarta.annotation-api.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/jakarta.inject.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/hk2-api.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/aopalliance-repackaged.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/hk2-core.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/hk2-locator.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/javassist.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/hk2-runlevel.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/class-model.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/asm.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/asm-analysis.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/asm-commons.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/asm-tree.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/asm-util.jar
2021-08-08 17:21:21,970 INFO org.springframework.boot.logging.DeferredLog [restartedMain] The Class-Path manifest attribute in C:\Users\sonna\.m2\repository\io\grpc\grpc-netty-shaded\1.23.0\grpc-netty-shaded-1.23.0.jar referenced one or more files that do not exist: file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/grpc-core-1.23.0.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/grpc-api-1.23.0.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/gson-2.7.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/annotations-4.1.1.4.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/perfmark-api-0.17.0.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/opencensus-contrib-grpc-metrics-0.21.0.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/opencensus-api-0.21.0.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/grpc-context-1.23.0.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/error_prone_annotations-2.3.2.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/jsr305-3.0.2.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/animal-sniffer-annotations-1.17.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/guava-26.0-android.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/checker-compat-qual-2.5.2.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/j2objc-annotations-1.1.jar
2021-08-08 17:21:21,971 INFO org.springframework.boot.logging.DeferredLog [restartedMain] Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2021-08-08 17:21:21,972 INFO org.springframework.boot.logging.DeferredLog [restartedMain] For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2021-08-08 17:21:22,514 WARN org.springframework.core.log.CompositeLog [background-preinit] For Jackson Kotlin classes support please add "com.fasterxml.jackson.module:jackson-module-kotlin" to the classpath
2021-08-08 17:21:23,708 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [restartedMain] Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2021-08-08 17:21:24,010 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [restartedMain] Finished Spring Data repository scanning in 274 ms. Found 12 JPA repository interfaces.
2021-08-08 17:21:24,838 INFO org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [restartedMain] Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@2956936a' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-08-08 17:21:24,854 INFO org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [restartedMain] Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-08-08 17:21:25,573 INFO org.springframework.boot.web.embedded.tomcat.TomcatWebServer [restartedMain] Tomcat initialized with port(s): 8082 (http)
2021-08-08 17:21:25,591 INFO org.apache.juli.logging.DirectJDKLog [restartedMain] Initializing ProtocolHandler ["http-nio-8082"]
2021-08-08 17:21:25,592 INFO org.apache.juli.logging.DirectJDKLog [restartedMain] Starting service [Tomcat]
2021-08-08 17:21:25,593 INFO org.apache.juli.logging.DirectJDKLog [restartedMain] Starting Servlet engine: [Apache Tomcat/9.0.46]
2021-08-08 17:21:25,868 INFO org.apache.juli.logging.DirectJDKLog [restartedMain] Initializing Spring embedded WebApplicationContext
2021-08-08 17:21:25,869 INFO org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext [restartedMain] Root WebApplicationContext: initialization completed in 3894 ms
2021-08-08 17:21:26,387 DEBUG org.springframework.web.filter.GenericFilterBean [restartedMain] Filter 'securityFilter' configured for use
2021-08-08 17:21:26,722 INFO org.hibernate.jpa.internal.util.LogHelper [restartedMain] HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2021-08-08 17:21:26,861 INFO org.hibernate.Version [restartedMain] HHH000412: Hibernate Core {5.2.17.Final}
2021-08-08 17:21:26,866 INFO org.hibernate.cfg.Environment [restartedMain] HHH000206: hibernate.properties not found
2021-08-08 17:21:26,953 INFO org.hibernate.annotations.common.reflection.java.JavaReflectionManager [restartedMain] HCANN000001: Hibernate Commons Annotations {5.0.1.Final}
2021-08-08 17:21:27,247 INFO com.zaxxer.hikari.HikariDataSource [restartedMain] HikariPool-1 - Starting...
2021-08-08 17:21:27,844 INFO com.zaxxer.hikari.HikariDataSource [restartedMain] HikariPool-1 - Start completed.
2021-08-08 17:21:27,870 INFO org.hibernate.dialect.Dialect [restartedMain] HHH000400: Using dialect: org.hibernate.dialect.MySQL55Dialect
2021-08-08 17:21:30,011 INFO org.springframework.orm.jpa.AbstractEntityManagerFactoryBean [restartedMain] Initialized JPA EntityManagerFactory for persistence unit 'default'
2021-08-08 17:21:32,106 INFO org.hibernate.hql.internal.QueryTranslatorFactoryInitiator [restartedMain] HHH000397: Using ASTQueryTranslatorFactory
2021-08-08 17:21:33,322 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] 
 _    _                           _     _
| |  | |                         (_)   | |
| |__| |_   _ _ __   ___ _ __ ___ _ ___| |_ ___ _ __   ___ ___
|  __  | | | | '_ \ / _ \ '__/ __| / __| __/ _ \ '_ \ / __/ _ \
| |  | | |_| | |_) |  __/ |  \__ \ \__ \ ||  __/ | | | (_|  __/
|_|  |_|\__, | .__/ \___|_|  |___/_|___/\__\___|_| |_|\___\___|
         __/ | |
        |___/|_|

           ____        _   _           _
          / __ \      | | (_)         (_)
         | |  | |_ __ | |_ _ _ __ ___  _ _______ _ __
         | |  | | '_ \| __| | '_ ` _ \| |_  / _ \ '__|
         | |__| | |_) | |_| | | | | | | |/ /  __/ |
          \____/| .__/ \__|_|_| |_| |_|_/___\___|_|
                | |
                |_|

2021-08-08 17:21:33,382 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Team] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 17:21:33,395 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [agents] attribute in the [org.heartfulness.avtc.model.Team] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:21:33,402 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - ManyToManyCascadeRemoveEvent - The [agents] many-to-many association in the [org.heartfulness.avtc.model.Team] entity cascades the REMOVE operation. Cascading the REMOVE operation is not needed since the other side is also a parent association. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#ManyToManyCascadeRemoveEvent
2021-08-08 17:21:33,407 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [agents] collection in the [org.heartfulness.avtc.model.Team] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:21:33,419 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [language] attribute in the [org.heartfulness.avtc.model.Team] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:21:33,426 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [manager] attribute in the [org.heartfulness.avtc.model.Team] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:21:33,430 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - OneToOneWithoutMapsIdEvent - The [manager] one-to-one association in the [org.heartfulness.avtc.model.Team] entity is using a separate Foreign Key to reference the parent record. Consider using @MapsId so that the identifier is shared with the parent row. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#OneToOneWithoutMapsIdEvent
2021-08-08 17:21:33,433 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [service] attribute in the [org.heartfulness.avtc.model.Team] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:21:33,437 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [timeSlots] attribute in the [org.heartfulness.avtc.model.Team] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:21:33,437 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - ManyToManyCascadeRemoveEvent - The [timeSlots] many-to-many association in the [org.heartfulness.avtc.model.Team] entity cascades the REMOVE operation. Cascading the REMOVE operation is not needed since the other side is also a parent association. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#ManyToManyCascadeRemoveEvent
2021-08-08 17:21:33,439 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [timeSlots] bidirectional association in the [org.heartfulness.avtc.model.Team] entity requires both ends to be synchronized. Only the [addTimeSlot(org.heartfulness.avtc.model.TimeSlot timeSlot)] could be found. Consider adding the [removeTimeSlot(org.heartfulness.avtc.model.TimeSlot timeSlot)]  synchronization method as well. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 17:21:33,440 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [timeSlots] collection in the [org.heartfulness.avtc.model.Team] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:21:33,445 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Service] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 17:21:33,447 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [Departments] attribute in the [org.heartfulness.avtc.model.Service] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:21:33,448 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [Departments] bidirectional association in the [org.heartfulness.avtc.model.Service] entity requires both ends to be synchronized. Consider adding the [addDepartment(org.heartfulness.avtc.model.Department department)] and [removeDepartment(org.heartfulness.avtc.model.Department department)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 17:21:33,448 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [Departments] collection in the [org.heartfulness.avtc.model.Service] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:21:33,454 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [teams] attribute in the [org.heartfulness.avtc.model.Service] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:21:33,454 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [teams] bidirectional association in the [org.heartfulness.avtc.model.Service] entity requires both ends to be synchronized. Consider adding the [addTeam(org.heartfulness.avtc.model.Team team)] and [removeTeam(org.heartfulness.avtc.model.Team team)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 17:21:33,455 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [teams] collection in the [org.heartfulness.avtc.model.Service] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:21:33,460 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.TimeSlot] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 17:21:33,465 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [scheduleExceptions] attribute in the [org.heartfulness.avtc.model.TimeSlot] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:21:33,466 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [scheduleExceptions] bidirectional association in the [org.heartfulness.avtc.model.TimeSlot] entity requires both ends to be synchronized. Only the [addScheduleException(org.heartfulness.avtc.model.ScheduleException scheduleException)] could be found. Consider adding the [removeScheduleException(org.heartfulness.avtc.model.ScheduleException scheduleException)]  synchronization method as well. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 17:21:33,466 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [scheduleExceptions] collection in the [org.heartfulness.avtc.model.TimeSlot] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:21:33,471 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [teams] attribute in the [org.heartfulness.avtc.model.TimeSlot] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:21:33,472 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - ManyToManyCascadeRemoveEvent - The [teams] many-to-many association in the [org.heartfulness.avtc.model.TimeSlot] entity cascades the REMOVE operation. Cascading the REMOVE operation is not needed since the other side is also a parent association. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#ManyToManyCascadeRemoveEvent
2021-08-08 17:21:33,472 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [teams] collection in the [org.heartfulness.avtc.model.TimeSlot] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:21:33,479 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.ScheduleException] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 17:21:33,484 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [agent] attribute in the [org.heartfulness.avtc.model.ScheduleException] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:21:33,489 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [slot] attribute in the [org.heartfulness.avtc.model.ScheduleException] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:21:33,493 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Schedule] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 17:21:33,495 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [agent] attribute in the [org.heartfulness.avtc.model.Schedule] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:21:33,499 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - LargeColumnEvent - The [endTime] attribute in the [org.heartfulness.avtc.model.Schedule] entity is mapped to a large column type. Consider using either compact types or moving the large columns to separate tables or using multiple entities mapped to the same database table so that you can choose which properties are to be fetched from the database based on the entity type. You should use the @Basic(fetch=LAZY) annotation and activate the bytecode enhancement lazy loading mechanism as, otherwise, the column is fetched eagerly when loading the entity. You should use the @DynamicUpdate annotation so that the UPDATE statement contains only the columns that have been modified by the currently running Persistence Context. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#LargeColumnEvent
2021-08-08 17:21:33,501 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - LargeColumnEvent - The [startTime] attribute in the [org.heartfulness.avtc.model.Schedule] entity is mapped to a large column type. Consider using either compact types or moving the large columns to separate tables or using multiple entities mapped to the same database table so that you can choose which properties are to be fetched from the database based on the entity type. You should use the @Basic(fetch=LAZY) annotation and activate the bytecode enhancement lazy loading mechanism as, otherwise, the column is fetched eagerly when loading the entity. You should use the @DynamicUpdate annotation so that the UPDATE statement contains only the columns that have been modified by the currently running Persistence Context. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#LargeColumnEvent
2021-08-08 17:21:33,505 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Logger] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 17:21:33,508 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [agent] attribute in the [org.heartfulness.avtc.model.Logger] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:21:33,516 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Call] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 17:21:33,518 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [agent] attribute in the [org.heartfulness.avtc.model.Call] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:21:33,522 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - EnumTypeStringEvent - The [callStatus] enum attribute in the [org.heartfulness.avtc.model.Call] entity uses the EnumType.STRING strategy, which has a bigger memory footprint than EnumType.ORDINAL. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EnumTypeStringEvent
2021-08-08 17:21:33,524 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [caller] attribute in the [org.heartfulness.avtc.model.Call] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:21:33,527 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - EnumTypeStringEvent - The [category] enum attribute in the [org.heartfulness.avtc.model.Call] entity uses the EnumType.STRING strategy, which has a bigger memory footprint than EnumType.ORDINAL. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EnumTypeStringEvent
2021-08-08 17:21:33,540 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [leasing] bidirectional association in the [org.heartfulness.avtc.model.Call] entity requires both ends to be synchronized. Consider adding the [addAgent(org.heartfulness.avtc.model.Agent agent)] and [removeAgent(org.heartfulness.avtc.model.Agent agent)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 17:21:33,541 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [leasing] collection in the [org.heartfulness.avtc.model.Call] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:21:33,557 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Agent] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 17:21:33,564 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [calls] bidirectional association in the [org.heartfulness.avtc.model.Agent] entity requires both ends to be synchronized. Consider adding the [addCall(org.heartfulness.avtc.model.Call call)] and [removeCall(org.heartfulness.avtc.model.Call call)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 17:21:33,564 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [calls] collection in the [org.heartfulness.avtc.model.Agent] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:21:33,579 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [departments] attribute in the [org.heartfulness.avtc.model.Agent] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:21:33,580 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - ManyToManyCascadeRemoveEvent - The [departments] many-to-many association in the [org.heartfulness.avtc.model.Agent] entity cascades the REMOVE operation. Cascading the REMOVE operation is not needed since the other side is also a parent association. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#ManyToManyCascadeRemoveEvent
2021-08-08 17:21:33,580 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [departments] collection in the [org.heartfulness.avtc.model.Agent] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:21:33,598 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [leasedBy] attribute in the [org.heartfulness.avtc.model.Agent] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:21:33,603 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [loggerSet] bidirectional association in the [org.heartfulness.avtc.model.Agent] entity requires both ends to be synchronized. Consider adding the [addLogger(org.heartfulness.avtc.model.Logger logger)] and [removeLogger(org.heartfulness.avtc.model.Logger logger)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 17:21:33,604 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [loggerSet] collection in the [org.heartfulness.avtc.model.Agent] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:21:33,626 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - EnumTypeStringEvent - The [role] enum attribute in the [org.heartfulness.avtc.model.Agent] entity uses the EnumType.STRING strategy, which has a bigger memory footprint than EnumType.ORDINAL. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EnumTypeStringEvent
2021-08-08 17:21:33,628 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [scheduleExceptions] attribute in the [org.heartfulness.avtc.model.Agent] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:21:33,629 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [scheduleExceptions] bidirectional association in the [org.heartfulness.avtc.model.Agent] entity requires both ends to be synchronized. Consider adding the [addScheduleException(org.heartfulness.avtc.model.ScheduleException scheduleException)] and [removeScheduleException(org.heartfulness.avtc.model.ScheduleException scheduleException)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 17:21:33,629 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [scheduleExceptions] collection in the [org.heartfulness.avtc.model.Agent] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:21:33,632 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [schedules] bidirectional association in the [org.heartfulness.avtc.model.Agent] entity requires both ends to be synchronized. Only the [addSchedule(org.heartfulness.avtc.model.Schedule schedule)] could be found. Consider adding the [removeSchedule(org.heartfulness.avtc.model.Schedule schedule)]  synchronization method as well. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 17:21:33,632 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [schedules] collection in the [org.heartfulness.avtc.model.Agent] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:21:33,652 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - ManyToManyCascadeRemoveEvent - The [teams] many-to-many association in the [org.heartfulness.avtc.model.Agent] entity cascades the REMOVE operation. Cascading the REMOVE operation is not needed since the other side is also a parent association. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#ManyToManyCascadeRemoveEvent
2021-08-08 17:21:33,653 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [teams] collection in the [org.heartfulness.avtc.model.Agent] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:21:33,670 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [teamManaged] attribute in the [org.heartfulness.avtc.model.Agent] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:21:33,676 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - OneToOneParentSideEvent - The [teamManaged] one-to-one association in the [class org.heartfulness.avtc.model.Agent] entity is mapped as the parent-side of this relationship. The parent-side of a one-to-one association is fetched eagerly unless bytecode enhancement lazy loading is enabled and the association is annotated with @LazyToOne(LazyToOneOption.NO_PROXY). For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#OneToOneParentSideEvent
2021-08-08 17:21:33,683 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Department] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 17:21:33,688 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [agents] bidirectional association in the [org.heartfulness.avtc.model.Department] entity requires both ends to be synchronized. Only the [addAgent(org.heartfulness.avtc.model.Agent agent)] could be found. Consider adding the [removeAgent(org.heartfulness.avtc.model.Agent agent)]  synchronization method as well. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 17:21:33,689 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [agents] collection in the [org.heartfulness.avtc.model.Department] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:21:33,694 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [language] attribute in the [org.heartfulness.avtc.model.Department] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:21:33,699 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [service] attribute in the [org.heartfulness.avtc.model.Department] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:21:33,706 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Language] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 17:21:33,711 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [Departments] attribute in the [org.heartfulness.avtc.model.Language] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:21:33,712 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [Departments] bidirectional association in the [org.heartfulness.avtc.model.Language] entity requires both ends to be synchronized. Consider adding the [addDepartment(org.heartfulness.avtc.model.Department department)] and [removeDepartment(org.heartfulness.avtc.model.Department department)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 17:21:33,713 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [Departments] collection in the [org.heartfulness.avtc.model.Language] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:21:33,718 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [callers] attribute in the [org.heartfulness.avtc.model.Language] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:21:33,719 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [callers] bidirectional association in the [org.heartfulness.avtc.model.Language] entity requires both ends to be synchronized. Consider adding the [addCaller(org.heartfulness.avtc.model.Caller caller)] and [removeCaller(org.heartfulness.avtc.model.Caller caller)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 17:21:33,720 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [callers] collection in the [org.heartfulness.avtc.model.Language] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:21:33,729 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [teams] attribute in the [org.heartfulness.avtc.model.Language] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:21:33,730 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [teams] bidirectional association in the [org.heartfulness.avtc.model.Language] entity requires both ends to be synchronized. Consider adding the [addTeam(org.heartfulness.avtc.model.Team team)] and [removeTeam(org.heartfulness.avtc.model.Team team)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 17:21:33,731 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [teams] collection in the [org.heartfulness.avtc.model.Language] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:21:33,735 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Caller] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 17:21:33,740 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - EnumTypeStringEvent - The [ageGroup] enum attribute in the [org.heartfulness.avtc.model.Caller] entity uses the EnumType.STRING strategy, which has a bigger memory footprint than EnumType.ORDINAL. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EnumTypeStringEvent
2021-08-08 17:21:33,748 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [calls] attribute in the [org.heartfulness.avtc.model.Caller] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:21:33,748 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [calls] bidirectional association in the [org.heartfulness.avtc.model.Caller] entity requires both ends to be synchronized. Only the [addCall(org.heartfulness.avtc.model.Call call)] could be found. Consider adding the [removeCall(org.heartfulness.avtc.model.Call call)]  synchronization method as well. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 17:21:33,748 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [calls] collection in the [org.heartfulness.avtc.model.Caller] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:21:33,751 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - EnumTypeStringEvent - The [category] enum attribute in the [org.heartfulness.avtc.model.Caller] entity uses the EnumType.STRING strategy, which has a bigger memory footprint than EnumType.ORDINAL. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EnumTypeStringEvent
2021-08-08 17:21:33,781 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [languages] collection in the [org.heartfulness.avtc.model.Caller] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:21:33,830 INFO org.hibernate.dialect.Dialect [restartedMain] HHH000400: Using dialect: org.hibernate.dialect.MySQL57Dialect
2021-08-08 17:21:33,833 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - DialectVersionEvent - Your application is using the [org.hibernate.dialect.MySQL55Dialect] Hibernate-specific Dialect. Consider using the [org.hibernate.dialect.MySQL57Dialect] instead, as it's closer to your current database server version [MySQL 5.7]. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#DialectVersionEvent
2021-08-08 17:21:33,839 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - SkipAutoCommitCheckEvent - You should set the [hibernate.connection.provider_disables_autocommit] configuration property to [true] while also making sure that the underlying DataSource is configured to disable the auto-commit flag whenever a new Connection is being acquired. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#SkipAutoCommitCheckEvent
2021-08-08 17:21:33,849 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - JdbcBatchSizeEvent - If you set the [hibernate.jdbc.batch_size] configuration property to a value greater than 1 (usually between 5 and 30), Hibernate can then execute SQL statements in batches, therefore reducing the number of database network roundtrips. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#JdbcBatchSizeEvent
2021-08-08 17:21:33,857 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] BLOCKER - SchemaGenerationEvent - You should not set the [hibernate.hbm2ddl.auto] configuration property to the value of [update], as Hibernate will then manage the database schema for you. Instead, you should use an incremental schema migration tool (e.g., Flyway, Liquibase), which allows you to use any database-specific DDL construct. By storing the migration scripts in the Version Control System along with the application source code, you will always remember why a certain schema change was done. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#SchemaGenerationEvent
2021-08-08 17:21:33,863 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - QueryPaginationCollectionFetchingEvent - You should set the [hibernate.query.fail_on_pagination_over_collection_fetch] configuration property to the value of [true], as Hibernate can then prevent in-memory pagination when join fetching a child entity collection. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#QueryPaginationCollectionFetchingEvent
2021-08-08 17:21:33,865 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - DefaultQueryPlanCacheMaxSizeEvent - You should set the [hibernate.query.plan_cache_max_size] configuration property to a value that allows you to hold all JPQL, Criteria API, or SQL queries executed with Hibernate. The default query plan cache size is [2048] and might not be enough for a non-trivial application. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#DefaultQueryPlanCacheMaxSizeEvent
2021-08-08 17:21:33,872 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - JdbcStatementCacheSizeEvent - The JDBC statement cache is disabled. You should consider enabling it, as follows. You should set the [cachePrepStmts] JDBC configuration property to the value of [true] and the [prepStmtCacheSize] property to the value of [256] . Consider lowering the statement cache size if you don't have enough memory and increasing it if you have plenty of memory and need to execute lots of distinct SQL statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#JdbcStatementCacheSizeEvent
2021-08-08 17:21:33,874 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] 90 issues were found: 1 BLOCKER, 50 CRITICAL, 9 MAJOR, 30 MINOR
2021-08-08 17:21:34,124 INFO org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration [restartedMain] 

Using generated security password: 44a93ee8-98d6-481b-8a87-9fc5a8945aa4

2021-08-08 17:21:34,746 INFO org.springframework.security.web.DefaultSecurityFilterChain [restartedMain] Will secure any request with [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@2e77c16a, org.springframework.security.web.context.SecurityContextPersistenceFilter@6f47d005, org.springframework.security.web.header.HeaderWriterFilter@a09ce9a, org.springframework.web.filter.CorsFilter@57738b97, org.springframework.security.web.authentication.logout.LogoutFilter@3929acdc, org.heartfulness.avtc.security.auth.SecurityFilter@5df5bc16, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@10ad8b88, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@24728dac, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@2921edeb, org.springframework.security.web.session.SessionManagementFilter@2bd04889, org.springframework.security.web.access.ExceptionTranslationFilter@6673f0ca, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@1a9aa6b4]
2021-08-08 17:21:38,460 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [restartedMain] LiveReload server is running on port 35729
2021-08-08 17:21:38,567 INFO org.apache.juli.logging.DirectJDKLog [restartedMain] Starting ProtocolHandler ["http-nio-8082"]
2021-08-08 17:21:38,621 INFO org.springframework.boot.web.embedded.tomcat.TomcatWebServer [restartedMain] Tomcat started on port(s): 8082 (http) with context path ''
2021-08-08 17:21:38,655 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Started AvtcApplication in 17.589 seconds (JVM running for 21.867)
2021-08-08 17:21:38,661 INFO org.springframework.boot.availability.ApplicationAvailabilityBean [restartedMain] Application availability state LivenessState changed to CORRECT
2021-08-08 17:21:38,668 INFO org.springframework.boot.availability.ApplicationAvailabilityBean [restartedMain] Application availability state ReadinessState changed to ACCEPTING_TRAFFIC
2021-08-08 17:21:38,830 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 17:21:43,878 INFO org.apache.juli.logging.DirectJDKLog [http-nio-8082-exec-2] Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-08-08 17:21:43,879 INFO org.springframework.web.servlet.FrameworkServlet [http-nio-8082-exec-2] Initializing Servlet 'dispatcherServlet'
2021-08-08 17:21:43,882 INFO org.springframework.web.servlet.FrameworkServlet [http-nio-8082-exec-2] Completed initialization in 3 ms
2021-08-08 17:21:43,930 INFO org.heartfulness.avtc.security.auth.SecurityFilter [http-nio-8082-exec-2] null
2021-08-08 17:21:44,706 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [http-nio-8082-exec-2] MINOR - EntityAlreadyManagedEvent - The [org.heartfulness.avtc.model.Agent] entity with the identifier value of [1] is already managed by the Hibernate Session, so you don't need to call [merge] for it. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EntityAlreadyManagedEvent
2021-08-08 17:21:44,737 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [http-nio-8082-exec-2] MINOR - EntityAlreadyManagedEvent - The [org.heartfulness.avtc.model.Call] entity with the identifier value of [1] is already managed by the Hibernate Session, so you don't need to call [merge] for it. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EntityAlreadyManagedEvent
2021-08-08 17:21:44,765 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [http-nio-8082-exec-2] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 17:23:01,684 INFO org.springframework.boot.availability.ApplicationAvailabilityBean [Thread-6] Application availability state ReadinessState changed from ACCEPTING_TRAFFIC to REFUSING_TRAFFIC
2021-08-08 17:23:02,152 INFO org.springframework.orm.jpa.AbstractEntityManagerFactoryBean [Thread-6] Closing JPA EntityManagerFactory for persistence unit 'default'
2021-08-08 17:23:02,157 INFO com.zaxxer.hikari.HikariDataSource [Thread-6] HikariPool-1 - Shutdown initiated...
2021-08-08 17:23:02,187 INFO com.zaxxer.hikari.HikariDataSource [Thread-6] HikariPool-1 - Shutdown completed.
2021-08-08 17:23:02,411 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting AvtcApplication using Java 11.0.10 on DESKTOP-BIBH7GP with PID 25680 (C:\Users\sonna\IdeaProjects\avtc\target\classes started by sonna in C:\Users\sonna\IdeaProjects\avtc)
2021-08-08 17:23:02,412 DEBUG org.springframework.boot.StartupInfoLogger [restartedMain] Running with Spring Boot v2.5.0, Spring v5.3.7
2021-08-08 17:23:02,412 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2021-08-08 17:23:03,107 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [restartedMain] Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2021-08-08 17:23:03,296 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [restartedMain] Finished Spring Data repository scanning in 189 ms. Found 12 JPA repository interfaces.
2021-08-08 17:23:03,507 INFO org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [restartedMain] Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@57769a92' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-08-08 17:23:03,511 INFO org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [restartedMain] Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-08-08 17:23:03,643 INFO org.springframework.boot.web.embedded.tomcat.TomcatWebServer [restartedMain] Tomcat initialized with port(s): 8082 (http)
2021-08-08 17:23:03,644 INFO org.apache.juli.logging.DirectJDKLog [restartedMain] Initializing ProtocolHandler ["http-nio-8082"]
2021-08-08 17:23:03,645 INFO org.apache.juli.logging.DirectJDKLog [restartedMain] Starting service [Tomcat]
2021-08-08 17:23:03,645 INFO org.apache.juli.logging.DirectJDKLog [restartedMain] Starting Servlet engine: [Apache Tomcat/9.0.46]
2021-08-08 17:23:03,743 INFO org.apache.juli.logging.DirectJDKLog [restartedMain] Initializing Spring embedded WebApplicationContext
2021-08-08 17:23:03,743 INFO org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext [restartedMain] Root WebApplicationContext: initialization completed in 1324 ms
2021-08-08 17:23:03,893 DEBUG org.springframework.web.filter.GenericFilterBean [restartedMain] Filter 'securityFilter' configured for use
2021-08-08 17:23:04,061 INFO org.hibernate.jpa.internal.util.LogHelper [restartedMain] HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2021-08-08 17:23:04,192 INFO com.zaxxer.hikari.HikariDataSource [restartedMain] HikariPool-2 - Starting...
2021-08-08 17:23:04,262 INFO com.zaxxer.hikari.HikariDataSource [restartedMain] HikariPool-2 - Start completed.
2021-08-08 17:23:04,263 INFO org.hibernate.dialect.Dialect [restartedMain] HHH000400: Using dialect: org.hibernate.dialect.MySQL55Dialect
2021-08-08 17:23:04,892 INFO org.springframework.orm.jpa.AbstractEntityManagerFactoryBean [restartedMain] Initialized JPA EntityManagerFactory for persistence unit 'default'
2021-08-08 17:23:06,637 INFO org.hibernate.hql.internal.QueryTranslatorFactoryInitiator [restartedMain] HHH000397: Using ASTQueryTranslatorFactory
2021-08-08 17:23:07,409 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] 
 _    _                           _     _
| |  | |                         (_)   | |
| |__| |_   _ _ __   ___ _ __ ___ _ ___| |_ ___ _ __   ___ ___
|  __  | | | | '_ \ / _ \ '__/ __| / __| __/ _ \ '_ \ / __/ _ \
| |  | | |_| | |_) |  __/ |  \__ \ \__ \ ||  __/ | | | (_|  __/
|_|  |_|\__, | .__/ \___|_|  |___/_|___/\__\___|_| |_|\___\___|
         __/ | |
        |___/|_|

           ____        _   _           _
          / __ \      | | (_)         (_)
         | |  | |_ __ | |_ _ _ __ ___  _ _______ _ __
         | |  | | '_ \| __| | '_ ` _ \| |_  / _ \ '__|
         | |__| | |_) | |_| | | | | | | |/ /  __/ |
          \____/| .__/ \__|_|_| |_| |_|_/___\___|_|
                | |
                |_|

2021-08-08 17:23:07,421 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Team] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 17:23:07,424 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [agents] attribute in the [org.heartfulness.avtc.model.Team] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:23:07,425 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - ManyToManyCascadeRemoveEvent - The [agents] many-to-many association in the [org.heartfulness.avtc.model.Team] entity cascades the REMOVE operation. Cascading the REMOVE operation is not needed since the other side is also a parent association. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#ManyToManyCascadeRemoveEvent
2021-08-08 17:23:07,426 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [agents] collection in the [org.heartfulness.avtc.model.Team] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:23:07,430 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [language] attribute in the [org.heartfulness.avtc.model.Team] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:23:07,433 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [manager] attribute in the [org.heartfulness.avtc.model.Team] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:23:07,434 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - OneToOneWithoutMapsIdEvent - The [manager] one-to-one association in the [org.heartfulness.avtc.model.Team] entity is using a separate Foreign Key to reference the parent record. Consider using @MapsId so that the identifier is shared with the parent row. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#OneToOneWithoutMapsIdEvent
2021-08-08 17:23:07,437 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [service] attribute in the [org.heartfulness.avtc.model.Team] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:23:07,441 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [timeSlots] attribute in the [org.heartfulness.avtc.model.Team] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:23:07,442 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - ManyToManyCascadeRemoveEvent - The [timeSlots] many-to-many association in the [org.heartfulness.avtc.model.Team] entity cascades the REMOVE operation. Cascading the REMOVE operation is not needed since the other side is also a parent association. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#ManyToManyCascadeRemoveEvent
2021-08-08 17:23:07,443 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [timeSlots] bidirectional association in the [org.heartfulness.avtc.model.Team] entity requires both ends to be synchronized. Only the [addTimeSlot(org.heartfulness.avtc.model.TimeSlot timeSlot)] could be found. Consider adding the [removeTimeSlot(org.heartfulness.avtc.model.TimeSlot timeSlot)]  synchronization method as well. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 17:23:07,443 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [timeSlots] collection in the [org.heartfulness.avtc.model.Team] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:23:07,449 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Service] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 17:23:07,452 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [Departments] attribute in the [org.heartfulness.avtc.model.Service] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:23:07,453 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [Departments] bidirectional association in the [org.heartfulness.avtc.model.Service] entity requires both ends to be synchronized. Consider adding the [addDepartment(org.heartfulness.avtc.model.Department department)] and [removeDepartment(org.heartfulness.avtc.model.Department department)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 17:23:07,453 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [Departments] collection in the [org.heartfulness.avtc.model.Service] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:23:07,458 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [teams] attribute in the [org.heartfulness.avtc.model.Service] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:23:07,459 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [teams] bidirectional association in the [org.heartfulness.avtc.model.Service] entity requires both ends to be synchronized. Consider adding the [addTeam(org.heartfulness.avtc.model.Team team)] and [removeTeam(org.heartfulness.avtc.model.Team team)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 17:23:07,459 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [teams] collection in the [org.heartfulness.avtc.model.Service] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:23:07,463 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.TimeSlot] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 17:23:07,468 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [scheduleExceptions] attribute in the [org.heartfulness.avtc.model.TimeSlot] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:23:07,470 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [scheduleExceptions] bidirectional association in the [org.heartfulness.avtc.model.TimeSlot] entity requires both ends to be synchronized. Only the [addScheduleException(org.heartfulness.avtc.model.ScheduleException scheduleException)] could be found. Consider adding the [removeScheduleException(org.heartfulness.avtc.model.ScheduleException scheduleException)]  synchronization method as well. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 17:23:07,470 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [scheduleExceptions] collection in the [org.heartfulness.avtc.model.TimeSlot] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:23:07,477 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [teams] attribute in the [org.heartfulness.avtc.model.TimeSlot] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:23:07,478 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - ManyToManyCascadeRemoveEvent - The [teams] many-to-many association in the [org.heartfulness.avtc.model.TimeSlot] entity cascades the REMOVE operation. Cascading the REMOVE operation is not needed since the other side is also a parent association. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#ManyToManyCascadeRemoveEvent
2021-08-08 17:23:07,478 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [teams] collection in the [org.heartfulness.avtc.model.TimeSlot] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:23:07,491 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.ScheduleException] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 17:23:07,498 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [agent] attribute in the [org.heartfulness.avtc.model.ScheduleException] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:23:07,505 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [slot] attribute in the [org.heartfulness.avtc.model.ScheduleException] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:23:07,511 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Schedule] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 17:23:07,514 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [agent] attribute in the [org.heartfulness.avtc.model.Schedule] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:23:07,519 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - LargeColumnEvent - The [endTime] attribute in the [org.heartfulness.avtc.model.Schedule] entity is mapped to a large column type. Consider using either compact types or moving the large columns to separate tables or using multiple entities mapped to the same database table so that you can choose which properties are to be fetched from the database based on the entity type. You should use the @Basic(fetch=LAZY) annotation and activate the bytecode enhancement lazy loading mechanism as, otherwise, the column is fetched eagerly when loading the entity. You should use the @DynamicUpdate annotation so that the UPDATE statement contains only the columns that have been modified by the currently running Persistence Context. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#LargeColumnEvent
2021-08-08 17:23:07,531 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - LargeColumnEvent - The [startTime] attribute in the [org.heartfulness.avtc.model.Schedule] entity is mapped to a large column type. Consider using either compact types or moving the large columns to separate tables or using multiple entities mapped to the same database table so that you can choose which properties are to be fetched from the database based on the entity type. You should use the @Basic(fetch=LAZY) annotation and activate the bytecode enhancement lazy loading mechanism as, otherwise, the column is fetched eagerly when loading the entity. You should use the @DynamicUpdate annotation so that the UPDATE statement contains only the columns that have been modified by the currently running Persistence Context. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#LargeColumnEvent
2021-08-08 17:23:07,543 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Logger] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 17:23:07,547 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [agent] attribute in the [org.heartfulness.avtc.model.Logger] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:23:07,563 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Call] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 17:23:07,574 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [agent] attribute in the [org.heartfulness.avtc.model.Call] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:23:07,576 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - EnumTypeStringEvent - The [callStatus] enum attribute in the [org.heartfulness.avtc.model.Call] entity uses the EnumType.STRING strategy, which has a bigger memory footprint than EnumType.ORDINAL. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EnumTypeStringEvent
2021-08-08 17:23:07,579 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [caller] attribute in the [org.heartfulness.avtc.model.Call] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:23:07,581 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - EnumTypeStringEvent - The [category] enum attribute in the [org.heartfulness.avtc.model.Call] entity uses the EnumType.STRING strategy, which has a bigger memory footprint than EnumType.ORDINAL. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EnumTypeStringEvent
2021-08-08 17:23:07,593 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [leasing] bidirectional association in the [org.heartfulness.avtc.model.Call] entity requires both ends to be synchronized. Consider adding the [addAgent(org.heartfulness.avtc.model.Agent agent)] and [removeAgent(org.heartfulness.avtc.model.Agent agent)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 17:23:07,593 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [leasing] collection in the [org.heartfulness.avtc.model.Call] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:23:07,615 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Agent] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 17:23:07,623 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [calls] bidirectional association in the [org.heartfulness.avtc.model.Agent] entity requires both ends to be synchronized. Consider adding the [addCall(org.heartfulness.avtc.model.Call call)] and [removeCall(org.heartfulness.avtc.model.Call call)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 17:23:07,623 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [calls] collection in the [org.heartfulness.avtc.model.Agent] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:23:07,641 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [departments] attribute in the [org.heartfulness.avtc.model.Agent] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:23:07,642 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - ManyToManyCascadeRemoveEvent - The [departments] many-to-many association in the [org.heartfulness.avtc.model.Agent] entity cascades the REMOVE operation. Cascading the REMOVE operation is not needed since the other side is also a parent association. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#ManyToManyCascadeRemoveEvent
2021-08-08 17:23:07,643 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [departments] collection in the [org.heartfulness.avtc.model.Agent] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:23:07,662 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [leasedBy] attribute in the [org.heartfulness.avtc.model.Agent] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:23:07,669 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [loggerSet] bidirectional association in the [org.heartfulness.avtc.model.Agent] entity requires both ends to be synchronized. Consider adding the [addLogger(org.heartfulness.avtc.model.Logger logger)] and [removeLogger(org.heartfulness.avtc.model.Logger logger)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 17:23:07,669 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [loggerSet] collection in the [org.heartfulness.avtc.model.Agent] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:23:07,694 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - EnumTypeStringEvent - The [role] enum attribute in the [org.heartfulness.avtc.model.Agent] entity uses the EnumType.STRING strategy, which has a bigger memory footprint than EnumType.ORDINAL. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EnumTypeStringEvent
2021-08-08 17:23:07,698 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [scheduleExceptions] attribute in the [org.heartfulness.avtc.model.Agent] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:23:07,698 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [scheduleExceptions] bidirectional association in the [org.heartfulness.avtc.model.Agent] entity requires both ends to be synchronized. Consider adding the [addScheduleException(org.heartfulness.avtc.model.ScheduleException scheduleException)] and [removeScheduleException(org.heartfulness.avtc.model.ScheduleException scheduleException)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 17:23:07,699 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [scheduleExceptions] collection in the [org.heartfulness.avtc.model.Agent] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:23:07,702 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [schedules] bidirectional association in the [org.heartfulness.avtc.model.Agent] entity requires both ends to be synchronized. Only the [addSchedule(org.heartfulness.avtc.model.Schedule schedule)] could be found. Consider adding the [removeSchedule(org.heartfulness.avtc.model.Schedule schedule)]  synchronization method as well. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 17:23:07,703 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [schedules] collection in the [org.heartfulness.avtc.model.Agent] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:23:07,716 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - ManyToManyCascadeRemoveEvent - The [teams] many-to-many association in the [org.heartfulness.avtc.model.Agent] entity cascades the REMOVE operation. Cascading the REMOVE operation is not needed since the other side is also a parent association. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#ManyToManyCascadeRemoveEvent
2021-08-08 17:23:07,716 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [teams] collection in the [org.heartfulness.avtc.model.Agent] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:23:07,724 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [teamManaged] attribute in the [org.heartfulness.avtc.model.Agent] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:23:07,725 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - OneToOneParentSideEvent - The [teamManaged] one-to-one association in the [class org.heartfulness.avtc.model.Agent] entity is mapped as the parent-side of this relationship. The parent-side of a one-to-one association is fetched eagerly unless bytecode enhancement lazy loading is enabled and the association is annotated with @LazyToOne(LazyToOneOption.NO_PROXY). For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#OneToOneParentSideEvent
2021-08-08 17:23:07,729 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Department] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 17:23:07,731 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [agents] bidirectional association in the [org.heartfulness.avtc.model.Department] entity requires both ends to be synchronized. Only the [addAgent(org.heartfulness.avtc.model.Agent agent)] could be found. Consider adding the [removeAgent(org.heartfulness.avtc.model.Agent agent)]  synchronization method as well. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 17:23:07,732 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [agents] collection in the [org.heartfulness.avtc.model.Department] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:23:07,734 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [language] attribute in the [org.heartfulness.avtc.model.Department] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:23:07,737 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [service] attribute in the [org.heartfulness.avtc.model.Department] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:23:07,739 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Language] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 17:23:07,741 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [Departments] attribute in the [org.heartfulness.avtc.model.Language] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:23:07,742 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [Departments] bidirectional association in the [org.heartfulness.avtc.model.Language] entity requires both ends to be synchronized. Consider adding the [addDepartment(org.heartfulness.avtc.model.Department department)] and [removeDepartment(org.heartfulness.avtc.model.Department department)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 17:23:07,742 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [Departments] collection in the [org.heartfulness.avtc.model.Language] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:23:07,745 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [callers] attribute in the [org.heartfulness.avtc.model.Language] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:23:07,746 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [callers] bidirectional association in the [org.heartfulness.avtc.model.Language] entity requires both ends to be synchronized. Consider adding the [addCaller(org.heartfulness.avtc.model.Caller caller)] and [removeCaller(org.heartfulness.avtc.model.Caller caller)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 17:23:07,747 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [callers] collection in the [org.heartfulness.avtc.model.Language] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:23:07,753 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [teams] attribute in the [org.heartfulness.avtc.model.Language] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:23:07,754 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [teams] bidirectional association in the [org.heartfulness.avtc.model.Language] entity requires both ends to be synchronized. Consider adding the [addTeam(org.heartfulness.avtc.model.Team team)] and [removeTeam(org.heartfulness.avtc.model.Team team)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 17:23:07,755 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [teams] collection in the [org.heartfulness.avtc.model.Language] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:23:07,759 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Caller] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 17:23:07,764 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - EnumTypeStringEvent - The [ageGroup] enum attribute in the [org.heartfulness.avtc.model.Caller] entity uses the EnumType.STRING strategy, which has a bigger memory footprint than EnumType.ORDINAL. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EnumTypeStringEvent
2021-08-08 17:23:07,771 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [calls] attribute in the [org.heartfulness.avtc.model.Caller] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:23:07,771 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [calls] bidirectional association in the [org.heartfulness.avtc.model.Caller] entity requires both ends to be synchronized. Only the [addCall(org.heartfulness.avtc.model.Call call)] could be found. Consider adding the [removeCall(org.heartfulness.avtc.model.Call call)]  synchronization method as well. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 17:23:07,771 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [calls] collection in the [org.heartfulness.avtc.model.Caller] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:23:07,773 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - EnumTypeStringEvent - The [category] enum attribute in the [org.heartfulness.avtc.model.Caller] entity uses the EnumType.STRING strategy, which has a bigger memory footprint than EnumType.ORDINAL. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EnumTypeStringEvent
2021-08-08 17:23:07,809 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [languages] collection in the [org.heartfulness.avtc.model.Caller] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:23:07,848 INFO org.hibernate.dialect.Dialect [restartedMain] HHH000400: Using dialect: org.hibernate.dialect.MySQL57Dialect
2021-08-08 17:23:07,848 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - DialectVersionEvent - Your application is using the [org.hibernate.dialect.MySQL55Dialect] Hibernate-specific Dialect. Consider using the [org.hibernate.dialect.MySQL57Dialect] instead, as it's closer to your current database server version [MySQL 5.7]. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#DialectVersionEvent
2021-08-08 17:23:07,850 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - SkipAutoCommitCheckEvent - You should set the [hibernate.connection.provider_disables_autocommit] configuration property to [true] while also making sure that the underlying DataSource is configured to disable the auto-commit flag whenever a new Connection is being acquired. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#SkipAutoCommitCheckEvent
2021-08-08 17:23:07,852 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - JdbcBatchSizeEvent - If you set the [hibernate.jdbc.batch_size] configuration property to a value greater than 1 (usually between 5 and 30), Hibernate can then execute SQL statements in batches, therefore reducing the number of database network roundtrips. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#JdbcBatchSizeEvent
2021-08-08 17:23:07,854 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] BLOCKER - SchemaGenerationEvent - You should not set the [hibernate.hbm2ddl.auto] configuration property to the value of [update], as Hibernate will then manage the database schema for you. Instead, you should use an incremental schema migration tool (e.g., Flyway, Liquibase), which allows you to use any database-specific DDL construct. By storing the migration scripts in the Version Control System along with the application source code, you will always remember why a certain schema change was done. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#SchemaGenerationEvent
2021-08-08 17:23:07,856 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - QueryPaginationCollectionFetchingEvent - You should set the [hibernate.query.fail_on_pagination_over_collection_fetch] configuration property to the value of [true], as Hibernate can then prevent in-memory pagination when join fetching a child entity collection. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#QueryPaginationCollectionFetchingEvent
2021-08-08 17:23:07,857 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - DefaultQueryPlanCacheMaxSizeEvent - You should set the [hibernate.query.plan_cache_max_size] configuration property to a value that allows you to hold all JPQL, Criteria API, or SQL queries executed with Hibernate. The default query plan cache size is [2048] and might not be enough for a non-trivial application. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#DefaultQueryPlanCacheMaxSizeEvent
2021-08-08 17:23:07,860 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - JdbcStatementCacheSizeEvent - The JDBC statement cache is disabled. You should consider enabling it, as follows. You should set the [cachePrepStmts] JDBC configuration property to the value of [true] and the [prepStmtCacheSize] property to the value of [256] . Consider lowering the statement cache size if you don't have enough memory and increasing it if you have plenty of memory and need to execute lots of distinct SQL statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#JdbcStatementCacheSizeEvent
2021-08-08 17:23:07,861 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] 90 issues were found: 1 BLOCKER, 50 CRITICAL, 9 MAJOR, 30 MINOR
2021-08-08 17:23:07,902 INFO org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration [restartedMain] 

Using generated security password: 4ea43cee-1197-4e0f-9e9e-ae9b60c57a56

2021-08-08 17:23:07,990 INFO org.springframework.security.web.DefaultSecurityFilterChain [restartedMain] Will secure any request with [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@5c362f85, org.springframework.security.web.context.SecurityContextPersistenceFilter@64648762, org.springframework.security.web.header.HeaderWriterFilter@2c674275, org.springframework.web.filter.CorsFilter@63aeb012, org.springframework.security.web.authentication.logout.LogoutFilter@3849b9fe, org.heartfulness.avtc.security.auth.SecurityFilter@29ea9589, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@6ad597b2, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@7c371477, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@43eb53e5, org.springframework.security.web.session.SessionManagementFilter@10e290f0, org.springframework.security.web.access.ExceptionTranslationFilter@8e0cbef, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@7d39ce36]
2021-08-08 17:23:08,184 INFO org.springframework.test.context.support.AbstractTestContextBootstrapper [main] Neither @ContextConfiguration nor @ContextHierarchy found for test class [org.heartfulness.avtc.AvtcApplicationTests], using SpringBootContextLoader
2021-08-08 17:23:08,209 INFO org.springframework.test.context.support.AbstractContextLoader [main] Could not detect default resource locations for test class [org.heartfulness.avtc.AvtcApplicationTests]: no resource found for suffixes {-context.xml, Context.groovy}.
2021-08-08 17:23:08,214 INFO org.springframework.test.context.support.AnnotationConfigContextLoaderUtils [main] Could not detect default configuration classes for test class [org.heartfulness.avtc.AvtcApplicationTests]: AvtcApplicationTests does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2021-08-08 17:23:08,602 INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper [main] Found @SpringBootConfiguration org.heartfulness.avtc.AvtcApplication for test class org.heartfulness.avtc.AvtcApplicationTests
2021-08-08 17:23:08,882 INFO org.springframework.test.context.support.AbstractTestContextBootstrapper [main] Loaded default TestExecutionListener class names from location [META-INF/spring.factories]: [org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener, org.springframework.boot.test.autoconfigure.webservices.client.MockWebServiceServerTestExecutionListener, org.springframework.test.context.web.ServletTestExecutionListener, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener, org.springframework.test.context.event.ApplicationEventsTestExecutionListener, org.springframework.test.context.support.DependencyInjectionTestExecutionListener, org.springframework.test.context.support.DirtiesContextTestExecutionListener, org.springframework.test.context.transaction.TransactionalTestExecutionListener, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener, org.springframework.test.context.event.EventPublishingTestExecutionListener, org.springframework.security.test.context.support.WithSecurityContextTestExecutionListener, org.springframework.security.test.context.support.ReactorContextTestExecutionListener]
2021-08-08 17:23:08,948 INFO org.springframework.test.context.support.AbstractTestContextBootstrapper [main] Using TestExecutionListeners: [org.springframework.test.context.web.ServletTestExecutionListener@64f857e7, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener@1095f122, org.springframework.test.context.event.ApplicationEventsTestExecutionListener@58c540cf, org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener@3d6300e8, org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener@1b822fcc, org.springframework.test.context.support.DirtiesContextTestExecutionListener@24a1c17f, org.springframework.test.context.transaction.TransactionalTestExecutionListener@56102e1c, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener@73511076, org.springframework.test.context.event.EventPublishingTestExecutionListener@7927bd9f, org.springframework.security.test.context.support.WithSecurityContextTestExecutionListener@532721fd, org.springframework.security.test.context.support.ReactorContextTestExecutionListener@410954b, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener@7fb9f71f, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener@3b366632, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener@51f49060, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener@514eedd8, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener@617fe9e1, org.springframework.boot.test.autoconfigure.webservices.client.MockWebServiceServerTestExecutionListener@6970140a]
2021-08-08 17:23:09,203 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [restartedMain] LiveReload server is running on port 35729
2021-08-08 17:23:09,245 INFO org.apache.juli.logging.DirectJDKLog [restartedMain] Starting ProtocolHandler ["http-nio-8082"]
2021-08-08 17:23:09,262 INFO org.springframework.boot.web.embedded.tomcat.TomcatWebServer [restartedMain] Tomcat started on port(s): 8082 (http) with context path ''
2021-08-08 17:23:09,276 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Started AvtcApplication in 6.955 seconds (JVM running for 112.488)
2021-08-08 17:23:09,277 INFO org.springframework.boot.availability.ApplicationAvailabilityBean [restartedMain] Application availability state LivenessState changed to CORRECT
2021-08-08 17:23:09,283 INFO org.springframework.boot.devtools.autoconfigure.ConditionEvaluationDeltaLoggingListener [restartedMain] Condition evaluation unchanged
2021-08-08 17:23:09,285 INFO org.springframework.boot.availability.ApplicationAvailabilityBean [restartedMain] Application availability state ReadinessState changed to ACCEPTING_TRAFFIC
2021-08-08 17:23:09,294 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 17:23:09,749 INFO org.springframework.boot.StartupInfoLogger [main] Starting AvtcApplicationTests using Java 11.0.10 on DESKTOP-BIBH7GP with PID 23968 (started by sonna in C:\Users\sonna\IdeaProjects\avtc)
2021-08-08 17:23:09,750 DEBUG org.springframework.boot.StartupInfoLogger [main] Running with Spring Boot v2.5.0, Spring v5.3.7
2021-08-08 17:23:09,759 INFO org.springframework.boot.SpringApplication [main] No active profile set, falling back to default profiles: default
2021-08-08 17:23:09,785 INFO org.hibernate.validator.internal.util.Version [background-preinit] HV000001: Hibernate Validator 6.2.0.Final
2021-08-08 17:23:10,898 WARN org.springframework.core.log.CompositeLog [background-preinit] For Jackson Kotlin classes support please add "com.fasterxml.jackson.module:jackson-module-kotlin" to the classpath
2021-08-08 17:23:11,909 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2021-08-08 17:23:12,271 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 340 ms. Found 12 JPA repository interfaces.
2021-08-08 17:23:13,467 INFO org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [main] Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@324b6a56' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-08-08 17:23:13,519 INFO org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [main] Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-08-08 17:23:14,069 INFO org.hibernate.jpa.internal.util.LogHelper [main] HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2021-08-08 17:23:14,386 INFO org.hibernate.Version [main] HHH000412: Hibernate Core {5.2.17.Final}
2021-08-08 17:23:14,391 INFO org.hibernate.cfg.Environment [main] HHH000206: hibernate.properties not found
2021-08-08 17:23:14,543 INFO org.hibernate.annotations.common.reflection.java.JavaReflectionManager [main] HCANN000001: Hibernate Commons Annotations {5.0.1.Final}
2021-08-08 17:23:14,856 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Starting...
2021-08-08 17:23:16,203 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Start completed.
2021-08-08 17:23:16,255 INFO org.hibernate.dialect.Dialect [main] HHH000400: Using dialect: org.hibernate.dialect.MySQL55Dialect
2021-08-08 17:23:18,779 INFO org.springframework.orm.jpa.AbstractEntityManagerFactoryBean [main] Initialized JPA EntityManagerFactory for persistence unit 'default'
2021-08-08 17:23:20,549 INFO org.hibernate.hql.internal.QueryTranslatorFactoryInitiator [main] HHH000397: Using ASTQueryTranslatorFactory
2021-08-08 17:23:21,733 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [main] 
 _    _                           _     _
| |  | |                         (_)   | |
| |__| |_   _ _ __   ___ _ __ ___ _ ___| |_ ___ _ __   ___ ___
|  __  | | | | '_ \ / _ \ '__/ __| / __| __/ _ \ '_ \ / __/ _ \
| |  | | |_| | |_) |  __/ |  \__ \ \__ \ ||  __/ | | | (_|  __/
|_|  |_|\__, | .__/ \___|_|  |___/_|___/\__\___|_| |_|\___\___|
         __/ | |
        |___/|_|

           ____        _   _           _
          / __ \      | | (_)         (_)
         | |  | |_ __ | |_ _ _ __ ___  _ _______ _ __
         | |  | | '_ \| __| | '_ ` _ \| |_  / _ \ '__|
         | |__| | |_) | |_| | | | | | | |/ /  __/ |
          \____/| .__/ \__|_|_| |_| |_|_/___\___|_|
                | |
                |_|

2021-08-08 17:23:21,794 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [main] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Service] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 17:23:21,805 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - EagerFetchingEvent - The [Departments] attribute in the [org.heartfulness.avtc.model.Service] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:23:21,810 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - BidirectionalSynchronizationEvent - The [Departments] bidirectional association in the [org.heartfulness.avtc.model.Service] entity requires both ends to be synchronized. Consider adding the [addDepartment(org.heartfulness.avtc.model.Department department)] and [removeDepartment(org.heartfulness.avtc.model.Department department)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 17:23:21,812 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [main] MINOR - NullCollectionEvent - The [Departments] collection in the [org.heartfulness.avtc.model.Service] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:23:21,818 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - EagerFetchingEvent - The [teams] attribute in the [org.heartfulness.avtc.model.Service] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:23:21,821 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - BidirectionalSynchronizationEvent - The [teams] bidirectional association in the [org.heartfulness.avtc.model.Service] entity requires both ends to be synchronized. Consider adding the [addTeam(org.heartfulness.avtc.model.Team team)] and [removeTeam(org.heartfulness.avtc.model.Team team)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 17:23:21,821 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [main] MINOR - NullCollectionEvent - The [teams] collection in the [org.heartfulness.avtc.model.Service] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:23:21,828 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [main] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Team] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 17:23:21,832 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - EagerFetchingEvent - The [agents] attribute in the [org.heartfulness.avtc.model.Team] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:23:21,836 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - ManyToManyCascadeRemoveEvent - The [agents] many-to-many association in the [org.heartfulness.avtc.model.Team] entity cascades the REMOVE operation. Cascading the REMOVE operation is not needed since the other side is also a parent association. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#ManyToManyCascadeRemoveEvent
2021-08-08 17:23:21,837 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [main] MINOR - NullCollectionEvent - The [agents] collection in the [org.heartfulness.avtc.model.Team] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:23:21,842 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - EagerFetchingEvent - The [language] attribute in the [org.heartfulness.avtc.model.Team] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:23:21,845 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - EagerFetchingEvent - The [manager] attribute in the [org.heartfulness.avtc.model.Team] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:23:21,847 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - OneToOneWithoutMapsIdEvent - The [manager] one-to-one association in the [org.heartfulness.avtc.model.Team] entity is using a separate Foreign Key to reference the parent record. Consider using @MapsId so that the identifier is shared with the parent row. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#OneToOneWithoutMapsIdEvent
2021-08-08 17:23:21,851 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - EagerFetchingEvent - The [service] attribute in the [org.heartfulness.avtc.model.Team] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:23:21,855 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - EagerFetchingEvent - The [timeSlots] attribute in the [org.heartfulness.avtc.model.Team] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:23:21,856 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - ManyToManyCascadeRemoveEvent - The [timeSlots] many-to-many association in the [org.heartfulness.avtc.model.Team] entity cascades the REMOVE operation. Cascading the REMOVE operation is not needed since the other side is also a parent association. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#ManyToManyCascadeRemoveEvent
2021-08-08 17:23:21,857 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - BidirectionalSynchronizationEvent - The [timeSlots] bidirectional association in the [org.heartfulness.avtc.model.Team] entity requires both ends to be synchronized. Only the [addTimeSlot(org.heartfulness.avtc.model.TimeSlot timeSlot)] could be found. Consider adding the [removeTimeSlot(org.heartfulness.avtc.model.TimeSlot timeSlot)]  synchronization method as well. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 17:23:21,857 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [main] MINOR - NullCollectionEvent - The [timeSlots] collection in the [org.heartfulness.avtc.model.Team] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:23:21,862 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [main] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.TimeSlot] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 17:23:21,870 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - EagerFetchingEvent - The [scheduleExceptions] attribute in the [org.heartfulness.avtc.model.TimeSlot] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:23:21,871 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - BidirectionalSynchronizationEvent - The [scheduleExceptions] bidirectional association in the [org.heartfulness.avtc.model.TimeSlot] entity requires both ends to be synchronized. Only the [addScheduleException(org.heartfulness.avtc.model.ScheduleException scheduleException)] could be found. Consider adding the [removeScheduleException(org.heartfulness.avtc.model.ScheduleException scheduleException)]  synchronization method as well. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 17:23:21,872 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [main] MINOR - NullCollectionEvent - The [scheduleExceptions] collection in the [org.heartfulness.avtc.model.TimeSlot] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:23:21,879 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - EagerFetchingEvent - The [teams] attribute in the [org.heartfulness.avtc.model.TimeSlot] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:23:21,880 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - ManyToManyCascadeRemoveEvent - The [teams] many-to-many association in the [org.heartfulness.avtc.model.TimeSlot] entity cascades the REMOVE operation. Cascading the REMOVE operation is not needed since the other side is also a parent association. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#ManyToManyCascadeRemoveEvent
2021-08-08 17:23:21,881 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [main] MINOR - NullCollectionEvent - The [teams] collection in the [org.heartfulness.avtc.model.TimeSlot] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:23:21,889 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [main] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.ScheduleException] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 17:23:21,893 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - EagerFetchingEvent - The [agent] attribute in the [org.heartfulness.avtc.model.ScheduleException] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:23:21,899 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - EagerFetchingEvent - The [slot] attribute in the [org.heartfulness.avtc.model.ScheduleException] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:23:21,903 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [main] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Schedule] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 17:23:21,905 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - EagerFetchingEvent - The [agent] attribute in the [org.heartfulness.avtc.model.Schedule] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:23:21,908 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [main] MAJOR - LargeColumnEvent - The [endTime] attribute in the [org.heartfulness.avtc.model.Schedule] entity is mapped to a large column type. Consider using either compact types or moving the large columns to separate tables or using multiple entities mapped to the same database table so that you can choose which properties are to be fetched from the database based on the entity type. You should use the @Basic(fetch=LAZY) annotation and activate the bytecode enhancement lazy loading mechanism as, otherwise, the column is fetched eagerly when loading the entity. You should use the @DynamicUpdate annotation so that the UPDATE statement contains only the columns that have been modified by the currently running Persistence Context. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#LargeColumnEvent
2021-08-08 17:23:21,911 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [main] MAJOR - LargeColumnEvent - The [startTime] attribute in the [org.heartfulness.avtc.model.Schedule] entity is mapped to a large column type. Consider using either compact types or moving the large columns to separate tables or using multiple entities mapped to the same database table so that you can choose which properties are to be fetched from the database based on the entity type. You should use the @Basic(fetch=LAZY) annotation and activate the bytecode enhancement lazy loading mechanism as, otherwise, the column is fetched eagerly when loading the entity. You should use the @DynamicUpdate annotation so that the UPDATE statement contains only the columns that have been modified by the currently running Persistence Context. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#LargeColumnEvent
2021-08-08 17:23:21,915 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [main] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Logger] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 17:23:21,918 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - EagerFetchingEvent - The [agent] attribute in the [org.heartfulness.avtc.model.Logger] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:23:21,929 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [main] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Call] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 17:23:21,932 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - EagerFetchingEvent - The [agent] attribute in the [org.heartfulness.avtc.model.Call] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:23:21,936 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [main] MAJOR - EnumTypeStringEvent - The [callStatus] enum attribute in the [org.heartfulness.avtc.model.Call] entity uses the EnumType.STRING strategy, which has a bigger memory footprint than EnumType.ORDINAL. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EnumTypeStringEvent
2021-08-08 17:23:21,938 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - EagerFetchingEvent - The [caller] attribute in the [org.heartfulness.avtc.model.Call] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:23:21,939 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [main] MAJOR - EnumTypeStringEvent - The [category] enum attribute in the [org.heartfulness.avtc.model.Call] entity uses the EnumType.STRING strategy, which has a bigger memory footprint than EnumType.ORDINAL. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EnumTypeStringEvent
2021-08-08 17:23:21,951 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - BidirectionalSynchronizationEvent - The [leasing] bidirectional association in the [org.heartfulness.avtc.model.Call] entity requires both ends to be synchronized. Consider adding the [addAgent(org.heartfulness.avtc.model.Agent agent)] and [removeAgent(org.heartfulness.avtc.model.Agent agent)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 17:23:21,952 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [main] MINOR - NullCollectionEvent - The [leasing] collection in the [org.heartfulness.avtc.model.Call] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:23:21,966 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [main] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Agent] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 17:23:21,974 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - BidirectionalSynchronizationEvent - The [calls] bidirectional association in the [org.heartfulness.avtc.model.Agent] entity requires both ends to be synchronized. Consider adding the [addCall(org.heartfulness.avtc.model.Call call)] and [removeCall(org.heartfulness.avtc.model.Call call)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 17:23:21,976 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [main] MINOR - NullCollectionEvent - The [calls] collection in the [org.heartfulness.avtc.model.Agent] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:23:21,992 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - EagerFetchingEvent - The [departments] attribute in the [org.heartfulness.avtc.model.Agent] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:23:21,993 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - ManyToManyCascadeRemoveEvent - The [departments] many-to-many association in the [org.heartfulness.avtc.model.Agent] entity cascades the REMOVE operation. Cascading the REMOVE operation is not needed since the other side is also a parent association. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#ManyToManyCascadeRemoveEvent
2021-08-08 17:23:21,994 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [main] MINOR - NullCollectionEvent - The [departments] collection in the [org.heartfulness.avtc.model.Agent] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:23:22,016 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - EagerFetchingEvent - The [leasedBy] attribute in the [org.heartfulness.avtc.model.Agent] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:23:22,022 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - BidirectionalSynchronizationEvent - The [loggerSet] bidirectional association in the [org.heartfulness.avtc.model.Agent] entity requires both ends to be synchronized. Consider adding the [addLogger(org.heartfulness.avtc.model.Logger logger)] and [removeLogger(org.heartfulness.avtc.model.Logger logger)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 17:23:22,023 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [main] MINOR - NullCollectionEvent - The [loggerSet] collection in the [org.heartfulness.avtc.model.Agent] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:23:22,042 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [main] MAJOR - EnumTypeStringEvent - The [role] enum attribute in the [org.heartfulness.avtc.model.Agent] entity uses the EnumType.STRING strategy, which has a bigger memory footprint than EnumType.ORDINAL. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EnumTypeStringEvent
2021-08-08 17:23:22,044 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - EagerFetchingEvent - The [scheduleExceptions] attribute in the [org.heartfulness.avtc.model.Agent] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:23:22,045 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - BidirectionalSynchronizationEvent - The [scheduleExceptions] bidirectional association in the [org.heartfulness.avtc.model.Agent] entity requires both ends to be synchronized. Consider adding the [addScheduleException(org.heartfulness.avtc.model.ScheduleException scheduleException)] and [removeScheduleException(org.heartfulness.avtc.model.ScheduleException scheduleException)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 17:23:22,045 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [main] MINOR - NullCollectionEvent - The [scheduleExceptions] collection in the [org.heartfulness.avtc.model.Agent] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:23:22,047 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - BidirectionalSynchronizationEvent - The [schedules] bidirectional association in the [org.heartfulness.avtc.model.Agent] entity requires both ends to be synchronized. Only the [addSchedule(org.heartfulness.avtc.model.Schedule schedule)] could be found. Consider adding the [removeSchedule(org.heartfulness.avtc.model.Schedule schedule)]  synchronization method as well. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 17:23:22,048 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [main] MINOR - NullCollectionEvent - The [schedules] collection in the [org.heartfulness.avtc.model.Agent] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:23:22,059 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - ManyToManyCascadeRemoveEvent - The [teams] many-to-many association in the [org.heartfulness.avtc.model.Agent] entity cascades the REMOVE operation. Cascading the REMOVE operation is not needed since the other side is also a parent association. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#ManyToManyCascadeRemoveEvent
2021-08-08 17:23:22,059 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [main] MINOR - NullCollectionEvent - The [teams] collection in the [org.heartfulness.avtc.model.Agent] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:23:22,065 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - EagerFetchingEvent - The [teamManaged] attribute in the [org.heartfulness.avtc.model.Agent] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:23:22,069 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - OneToOneParentSideEvent - The [teamManaged] one-to-one association in the [class org.heartfulness.avtc.model.Agent] entity is mapped as the parent-side of this relationship. The parent-side of a one-to-one association is fetched eagerly unless bytecode enhancement lazy loading is enabled and the association is annotated with @LazyToOne(LazyToOneOption.NO_PROXY). For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#OneToOneParentSideEvent
2021-08-08 17:23:22,072 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [main] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Department] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 17:23:22,075 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - BidirectionalSynchronizationEvent - The [agents] bidirectional association in the [org.heartfulness.avtc.model.Department] entity requires both ends to be synchronized. Only the [addAgent(org.heartfulness.avtc.model.Agent agent)] could be found. Consider adding the [removeAgent(org.heartfulness.avtc.model.Agent agent)]  synchronization method as well. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 17:23:22,075 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [main] MINOR - NullCollectionEvent - The [agents] collection in the [org.heartfulness.avtc.model.Department] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:23:22,077 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - EagerFetchingEvent - The [language] attribute in the [org.heartfulness.avtc.model.Department] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:23:22,080 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - EagerFetchingEvent - The [service] attribute in the [org.heartfulness.avtc.model.Department] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:23:22,085 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [main] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Language] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 17:23:22,089 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - EagerFetchingEvent - The [Departments] attribute in the [org.heartfulness.avtc.model.Language] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:23:22,089 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - BidirectionalSynchronizationEvent - The [Departments] bidirectional association in the [org.heartfulness.avtc.model.Language] entity requires both ends to be synchronized. Consider adding the [addDepartment(org.heartfulness.avtc.model.Department department)] and [removeDepartment(org.heartfulness.avtc.model.Department department)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 17:23:22,089 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [main] MINOR - NullCollectionEvent - The [Departments] collection in the [org.heartfulness.avtc.model.Language] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:23:22,092 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - EagerFetchingEvent - The [callers] attribute in the [org.heartfulness.avtc.model.Language] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:23:22,094 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - BidirectionalSynchronizationEvent - The [callers] bidirectional association in the [org.heartfulness.avtc.model.Language] entity requires both ends to be synchronized. Consider adding the [addCaller(org.heartfulness.avtc.model.Caller caller)] and [removeCaller(org.heartfulness.avtc.model.Caller caller)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 17:23:22,094 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [main] MINOR - NullCollectionEvent - The [callers] collection in the [org.heartfulness.avtc.model.Language] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:23:22,100 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - EagerFetchingEvent - The [teams] attribute in the [org.heartfulness.avtc.model.Language] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:23:22,101 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - BidirectionalSynchronizationEvent - The [teams] bidirectional association in the [org.heartfulness.avtc.model.Language] entity requires both ends to be synchronized. Consider adding the [addTeam(org.heartfulness.avtc.model.Team team)] and [removeTeam(org.heartfulness.avtc.model.Team team)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 17:23:22,101 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [main] MINOR - NullCollectionEvent - The [teams] collection in the [org.heartfulness.avtc.model.Language] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:23:22,104 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [main] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Caller] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 17:23:22,109 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [main] MAJOR - EnumTypeStringEvent - The [ageGroup] enum attribute in the [org.heartfulness.avtc.model.Caller] entity uses the EnumType.STRING strategy, which has a bigger memory footprint than EnumType.ORDINAL. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EnumTypeStringEvent
2021-08-08 17:23:22,118 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - EagerFetchingEvent - The [calls] attribute in the [org.heartfulness.avtc.model.Caller] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 17:23:22,119 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - BidirectionalSynchronizationEvent - The [calls] bidirectional association in the [org.heartfulness.avtc.model.Caller] entity requires both ends to be synchronized. Only the [addCall(org.heartfulness.avtc.model.Call call)] could be found. Consider adding the [removeCall(org.heartfulness.avtc.model.Call call)]  synchronization method as well. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 17:23:22,120 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [main] MINOR - NullCollectionEvent - The [calls] collection in the [org.heartfulness.avtc.model.Caller] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:23:22,122 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [main] MAJOR - EnumTypeStringEvent - The [category] enum attribute in the [org.heartfulness.avtc.model.Caller] entity uses the EnumType.STRING strategy, which has a bigger memory footprint than EnumType.ORDINAL. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EnumTypeStringEvent
2021-08-08 17:23:22,152 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [main] MINOR - NullCollectionEvent - The [languages] collection in the [org.heartfulness.avtc.model.Caller] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 17:23:22,230 INFO org.hibernate.dialect.Dialect [main] HHH000400: Using dialect: org.hibernate.dialect.MySQL57Dialect
2021-08-08 17:23:22,235 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [main] MAJOR - DialectVersionEvent - Your application is using the [org.hibernate.dialect.MySQL55Dialect] Hibernate-specific Dialect. Consider using the [org.hibernate.dialect.MySQL57Dialect] instead, as it's closer to your current database server version [MySQL 5.7]. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#DialectVersionEvent
2021-08-08 17:23:22,242 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [main] MAJOR - SkipAutoCommitCheckEvent - You should set the [hibernate.connection.provider_disables_autocommit] configuration property to [true] while also making sure that the underlying DataSource is configured to disable the auto-commit flag whenever a new Connection is being acquired. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#SkipAutoCommitCheckEvent
2021-08-08 17:23:22,256 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - JdbcBatchSizeEvent - If you set the [hibernate.jdbc.batch_size] configuration property to a value greater than 1 (usually between 5 and 30), Hibernate can then execute SQL statements in batches, therefore reducing the number of database network roundtrips. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#JdbcBatchSizeEvent
2021-08-08 17:23:22,268 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] BLOCKER - SchemaGenerationEvent - You should not set the [hibernate.hbm2ddl.auto] configuration property to the value of [update], as Hibernate will then manage the database schema for you. Instead, you should use an incremental schema migration tool (e.g., Flyway, Liquibase), which allows you to use any database-specific DDL construct. By storing the migration scripts in the Version Control System along with the application source code, you will always remember why a certain schema change was done. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#SchemaGenerationEvent
2021-08-08 17:23:22,277 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - QueryPaginationCollectionFetchingEvent - You should set the [hibernate.query.fail_on_pagination_over_collection_fetch] configuration property to the value of [true], as Hibernate can then prevent in-memory pagination when join fetching a child entity collection. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#QueryPaginationCollectionFetchingEvent
2021-08-08 17:23:22,279 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - DefaultQueryPlanCacheMaxSizeEvent - You should set the [hibernate.query.plan_cache_max_size] configuration property to a value that allows you to hold all JPQL, Criteria API, or SQL queries executed with Hibernate. The default query plan cache size is [2048] and might not be enough for a non-trivial application. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#DefaultQueryPlanCacheMaxSizeEvent
2021-08-08 17:23:22,291 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - JdbcStatementCacheSizeEvent - The JDBC statement cache is disabled. You should consider enabling it, as follows. You should set the [cachePrepStmts] JDBC configuration property to the value of [true] and the [prepStmtCacheSize] property to the value of [256] . Consider lowering the statement cache size if you don't have enough memory and increasing it if you have plenty of memory and need to execute lots of distinct SQL statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#JdbcStatementCacheSizeEvent
2021-08-08 17:23:22,293 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [main] 90 issues were found: 1 BLOCKER, 50 CRITICAL, 9 MAJOR, 30 MINOR
2021-08-08 17:23:22,541 INFO org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration [main] 

Using generated security password: 2eec8da5-7027-4743-9d90-3529a6199dc4

2021-08-08 17:23:23,071 INFO org.springframework.security.web.DefaultSecurityFilterChain [main] Will secure any request with [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@57def953, org.springframework.security.web.context.SecurityContextPersistenceFilter@1d160161, org.springframework.security.web.header.HeaderWriterFilter@5101b9, org.springframework.web.filter.CorsFilter@1bf4a79b, org.springframework.security.web.authentication.logout.LogoutFilter@771ede0d, org.heartfulness.avtc.security.auth.SecurityFilter@411576c7, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@af04d6d, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@f3e6876, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@a1be5cb, org.springframework.security.web.session.SessionManagementFilter@7da40bf4, org.springframework.security.web.access.ExceptionTranslationFilter@74120029, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@52c68925]
2021-08-08 17:23:26,688 INFO org.springframework.boot.StartupInfoLogger [main] Started AvtcApplicationTests in 17.62 seconds (JVM running for 21.873)
2021-08-08 17:23:26,691 INFO org.springframework.boot.availability.ApplicationAvailabilityBean [main] Application availability state LivenessState changed to CORRECT
2021-08-08 17:23:26,700 INFO org.springframework.boot.availability.ApplicationAvailabilityBean [main] Application availability state ReadinessState changed to ACCEPTING_TRAFFIC
2021-08-08 17:23:26,948 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 17:24:49,323 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 17:26:29,342 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 17:28:09,373 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 17:29:49,395 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 17:31:29,419 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 17:33:09,435 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 17:34:49,459 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 18:43:01,618 WARN com.zaxxer.hikari.pool.HikariPool$HouseKeeper [HikariPool-2 housekeeper] HikariPool-2 - Thread starvation or clock leap detected (housekeeper delta=1h8m27s51ms752µs900ns).
2021-08-08 18:44:26,502 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 18:46:06,526 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 18:47:46,538 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 18:49:26,549 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 18:51:06,563 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 18:52:46,647 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 18:54:26,679 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 18:56:06,736 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 18:57:46,762 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 18:59:26,786 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 19:01:06,815 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 19:02:46,832 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 19:04:26,854 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 19:06:06,872 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 19:07:46,901 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 19:09:26,920 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 19:11:06,940 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 19:12:46,965 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 19:14:26,987 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 19:16:07,008 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 19:17:47,020 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 19:19:27,043 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 19:19:49,434 INFO org.apache.juli.logging.DirectJDKLog [http-nio-8082-exec-2] Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-08-08 19:19:49,437 INFO org.springframework.web.servlet.FrameworkServlet [http-nio-8082-exec-2] Initializing Servlet 'dispatcherServlet'
2021-08-08 19:19:49,490 INFO org.springframework.web.servlet.FrameworkServlet [http-nio-8082-exec-2] Completed initialization in 52 ms
2021-08-08 19:19:49,505 INFO org.heartfulness.avtc.security.auth.SecurityFilter [http-nio-8082-exec-2] null
2021-08-08 19:19:50,123 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [http-nio-8082-exec-2] MINOR - EntityAlreadyManagedEvent - The [org.heartfulness.avtc.model.Agent] entity with the identifier value of [1] is already managed by the Hibernate Session, so you don't need to call [merge] for it. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EntityAlreadyManagedEvent
2021-08-08 19:19:50,126 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [http-nio-8082-exec-2] MINOR - EntityAlreadyManagedEvent - The [org.heartfulness.avtc.model.Agent] entity with the identifier value of [2] is already managed by the Hibernate Session, so you don't need to call [merge] for it. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EntityAlreadyManagedEvent
2021-08-08 19:19:50,136 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [http-nio-8082-exec-2] MINOR - EntityAlreadyManagedEvent - The [org.heartfulness.avtc.model.Call] entity with the identifier value of [1] is already managed by the Hibernate Session, so you don't need to call [merge] for it. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EntityAlreadyManagedEvent
2021-08-08 19:19:50,154 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [http-nio-8082-exec-2] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 19:21:07,058 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 19:22:47,074 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 19:24:27,083 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 19:26:07,096 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 19:27:47,111 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 19:29:27,129 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 19:31:07,148 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 19:32:47,164 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 19:34:27,188 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 19:36:07,206 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 19:37:47,240 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 19:39:18,858 INFO org.springframework.boot.availability.ApplicationAvailabilityBean [Thread-9] Application availability state ReadinessState changed from ACCEPTING_TRAFFIC to REFUSING_TRAFFIC
2021-08-08 19:39:19,395 INFO org.springframework.orm.jpa.AbstractEntityManagerFactoryBean [Thread-9] Closing JPA EntityManagerFactory for persistence unit 'default'
2021-08-08 19:39:19,443 INFO com.zaxxer.hikari.HikariDataSource [Thread-9] HikariPool-2 - Shutdown initiated...
2021-08-08 19:39:19,463 INFO com.zaxxer.hikari.HikariDataSource [Thread-9] HikariPool-2 - Shutdown completed.
2021-08-08 19:39:20,681 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting AvtcApplication using Java 11.0.10 on DESKTOP-BIBH7GP with PID 25680 (C:\Users\sonna\IdeaProjects\avtc\target\classes started by sonna in C:\Users\sonna\IdeaProjects\avtc)
2021-08-08 19:39:20,681 DEBUG org.springframework.boot.StartupInfoLogger [restartedMain] Running with Spring Boot v2.5.0, Spring v5.3.7
2021-08-08 19:39:20,681 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2021-08-08 19:39:21,493 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [restartedMain] Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2021-08-08 19:39:21,715 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [restartedMain] Finished Spring Data repository scanning in 221 ms. Found 12 JPA repository interfaces.
2021-08-08 19:39:22,004 INFO org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [restartedMain] Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@56816841' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-08-08 19:39:22,008 INFO org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [restartedMain] Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-08-08 19:39:22,235 INFO org.springframework.boot.web.embedded.tomcat.TomcatWebServer [restartedMain] Tomcat initialized with port(s): 8082 (http)
2021-08-08 19:39:22,236 INFO org.apache.juli.logging.DirectJDKLog [restartedMain] Initializing ProtocolHandler ["http-nio-8082"]
2021-08-08 19:39:22,236 INFO org.apache.juli.logging.DirectJDKLog [restartedMain] Starting service [Tomcat]
2021-08-08 19:39:22,238 INFO org.apache.juli.logging.DirectJDKLog [restartedMain] Starting Servlet engine: [Apache Tomcat/9.0.46]
2021-08-08 19:39:22,356 INFO org.apache.juli.logging.DirectJDKLog [restartedMain] Initializing Spring embedded WebApplicationContext
2021-08-08 19:39:22,356 INFO org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext [restartedMain] Root WebApplicationContext: initialization completed in 1665 ms
2021-08-08 19:39:22,527 DEBUG org.springframework.web.filter.GenericFilterBean [restartedMain] Filter 'securityFilter' configured for use
2021-08-08 19:39:22,702 INFO org.hibernate.jpa.internal.util.LogHelper [restartedMain] HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2021-08-08 19:39:22,819 INFO com.zaxxer.hikari.HikariDataSource [restartedMain] HikariPool-3 - Starting...
2021-08-08 19:39:22,881 INFO com.zaxxer.hikari.HikariDataSource [restartedMain] HikariPool-3 - Start completed.
2021-08-08 19:39:22,882 INFO org.hibernate.dialect.Dialect [restartedMain] HHH000400: Using dialect: org.hibernate.dialect.MySQL55Dialect
2021-08-08 19:39:23,617 INFO org.springframework.orm.jpa.AbstractEntityManagerFactoryBean [restartedMain] Initialized JPA EntityManagerFactory for persistence unit 'default'
2021-08-08 19:39:24,412 INFO org.springframework.test.context.support.AbstractTestContextBootstrapper [main] Neither @ContextConfiguration nor @ContextHierarchy found for test class [org.heartfulness.avtc.AvtcApplicationTests], using SpringBootContextLoader
2021-08-08 19:39:24,432 INFO org.springframework.test.context.support.AbstractContextLoader [main] Could not detect default resource locations for test class [org.heartfulness.avtc.AvtcApplicationTests]: no resource found for suffixes {-context.xml, Context.groovy}.
2021-08-08 19:39:24,434 INFO org.springframework.test.context.support.AnnotationConfigContextLoaderUtils [main] Could not detect default configuration classes for test class [org.heartfulness.avtc.AvtcApplicationTests]: AvtcApplicationTests does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2021-08-08 19:39:24,440 INFO org.hibernate.hql.internal.QueryTranslatorFactoryInitiator [restartedMain] HHH000397: Using ASTQueryTranslatorFactory
2021-08-08 19:39:24,820 INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper [main] Found @SpringBootConfiguration org.heartfulness.avtc.AvtcApplication for test class org.heartfulness.avtc.AvtcApplicationTests
2021-08-08 19:39:25,090 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] 
 _    _                           _     _
| |  | |                         (_)   | |
| |__| |_   _ _ __   ___ _ __ ___ _ ___| |_ ___ _ __   ___ ___
|  __  | | | | '_ \ / _ \ '__/ __| / __| __/ _ \ '_ \ / __/ _ \
| |  | | |_| | |_) |  __/ |  \__ \ \__ \ ||  __/ | | | (_|  __/
|_|  |_|\__, | .__/ \___|_|  |___/_|___/\__\___|_| |_|\___\___|
         __/ | |
        |___/|_|

           ____        _   _           _
          / __ \      | | (_)         (_)
         | |  | |_ __ | |_ _ _ __ ___  _ _______ _ __
         | |  | | '_ \| __| | '_ ` _ \| |_  / _ \ '__|
         | |__| | |_) | |_| | | | | | | |/ /  __/ |
          \____/| .__/ \__|_|_| |_| |_|_/___\___|_|
                | |
                |_|

2021-08-08 19:39:25,104 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Team] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 19:39:25,107 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [agents] attribute in the [org.heartfulness.avtc.model.Team] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 19:39:25,107 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - ManyToManyCascadeRemoveEvent - The [agents] many-to-many association in the [org.heartfulness.avtc.model.Team] entity cascades the REMOVE operation. Cascading the REMOVE operation is not needed since the other side is also a parent association. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#ManyToManyCascadeRemoveEvent
2021-08-08 19:39:25,107 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [agents] collection in the [org.heartfulness.avtc.model.Team] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 19:39:25,111 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [language] attribute in the [org.heartfulness.avtc.model.Team] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 19:39:25,113 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [manager] attribute in the [org.heartfulness.avtc.model.Team] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 19:39:25,113 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - OneToOneWithoutMapsIdEvent - The [manager] one-to-one association in the [org.heartfulness.avtc.model.Team] entity is using a separate Foreign Key to reference the parent record. Consider using @MapsId so that the identifier is shared with the parent row. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#OneToOneWithoutMapsIdEvent
2021-08-08 19:39:25,116 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [service] attribute in the [org.heartfulness.avtc.model.Team] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 19:39:25,118 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [timeSlots] attribute in the [org.heartfulness.avtc.model.Team] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 19:39:25,118 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - ManyToManyCascadeRemoveEvent - The [timeSlots] many-to-many association in the [org.heartfulness.avtc.model.Team] entity cascades the REMOVE operation. Cascading the REMOVE operation is not needed since the other side is also a parent association. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#ManyToManyCascadeRemoveEvent
2021-08-08 19:39:25,118 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [timeSlots] bidirectional association in the [org.heartfulness.avtc.model.Team] entity requires both ends to be synchronized. Only the [addTimeSlot(org.heartfulness.avtc.model.TimeSlot timeSlot)] could be found. Consider adding the [removeTimeSlot(org.heartfulness.avtc.model.TimeSlot timeSlot)]  synchronization method as well. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 19:39:25,119 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [timeSlots] collection in the [org.heartfulness.avtc.model.Team] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 19:39:25,122 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Service] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 19:39:25,124 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [Departments] attribute in the [org.heartfulness.avtc.model.Service] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 19:39:25,124 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [Departments] bidirectional association in the [org.heartfulness.avtc.model.Service] entity requires both ends to be synchronized. Consider adding the [addDepartment(org.heartfulness.avtc.model.Department department)] and [removeDepartment(org.heartfulness.avtc.model.Department department)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 19:39:25,124 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [Departments] collection in the [org.heartfulness.avtc.model.Service] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 19:39:25,128 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [teams] attribute in the [org.heartfulness.avtc.model.Service] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 19:39:25,128 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [teams] bidirectional association in the [org.heartfulness.avtc.model.Service] entity requires both ends to be synchronized. Consider adding the [addTeam(org.heartfulness.avtc.model.Team team)] and [removeTeam(org.heartfulness.avtc.model.Team team)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 19:39:25,128 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [teams] collection in the [org.heartfulness.avtc.model.Service] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 19:39:25,132 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.TimeSlot] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 19:39:25,136 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [scheduleExceptions] attribute in the [org.heartfulness.avtc.model.TimeSlot] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 19:39:25,137 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [scheduleExceptions] bidirectional association in the [org.heartfulness.avtc.model.TimeSlot] entity requires both ends to be synchronized. Only the [addScheduleException(org.heartfulness.avtc.model.ScheduleException scheduleException)] could be found. Consider adding the [removeScheduleException(org.heartfulness.avtc.model.ScheduleException scheduleException)]  synchronization method as well. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 19:39:25,137 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [scheduleExceptions] collection in the [org.heartfulness.avtc.model.TimeSlot] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 19:39:25,143 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [teams] attribute in the [org.heartfulness.avtc.model.TimeSlot] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 19:39:25,143 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - ManyToManyCascadeRemoveEvent - The [teams] many-to-many association in the [org.heartfulness.avtc.model.TimeSlot] entity cascades the REMOVE operation. Cascading the REMOVE operation is not needed since the other side is also a parent association. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#ManyToManyCascadeRemoveEvent
2021-08-08 19:39:25,144 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [teams] collection in the [org.heartfulness.avtc.model.TimeSlot] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 19:39:25,153 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.ScheduleException] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 19:39:25,161 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [agent] attribute in the [org.heartfulness.avtc.model.ScheduleException] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 19:39:25,165 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [slot] attribute in the [org.heartfulness.avtc.model.ScheduleException] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 19:39:25,168 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Schedule] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 19:39:25,170 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [agent] attribute in the [org.heartfulness.avtc.model.Schedule] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 19:39:25,173 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - LargeColumnEvent - The [endTime] attribute in the [org.heartfulness.avtc.model.Schedule] entity is mapped to a large column type. Consider using either compact types or moving the large columns to separate tables or using multiple entities mapped to the same database table so that you can choose which properties are to be fetched from the database based on the entity type. You should use the @Basic(fetch=LAZY) annotation and activate the bytecode enhancement lazy loading mechanism as, otherwise, the column is fetched eagerly when loading the entity. You should use the @DynamicUpdate annotation so that the UPDATE statement contains only the columns that have been modified by the currently running Persistence Context. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#LargeColumnEvent
2021-08-08 19:39:25,175 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - LargeColumnEvent - The [startTime] attribute in the [org.heartfulness.avtc.model.Schedule] entity is mapped to a large column type. Consider using either compact types or moving the large columns to separate tables or using multiple entities mapped to the same database table so that you can choose which properties are to be fetched from the database based on the entity type. You should use the @Basic(fetch=LAZY) annotation and activate the bytecode enhancement lazy loading mechanism as, otherwise, the column is fetched eagerly when loading the entity. You should use the @DynamicUpdate annotation so that the UPDATE statement contains only the columns that have been modified by the currently running Persistence Context. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#LargeColumnEvent
2021-08-08 19:39:25,175 INFO org.springframework.test.context.support.AbstractTestContextBootstrapper [main] Loaded default TestExecutionListener class names from location [META-INF/spring.factories]: [org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener, org.springframework.boot.test.autoconfigure.webservices.client.MockWebServiceServerTestExecutionListener, org.springframework.test.context.web.ServletTestExecutionListener, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener, org.springframework.test.context.event.ApplicationEventsTestExecutionListener, org.springframework.test.context.support.DependencyInjectionTestExecutionListener, org.springframework.test.context.support.DirtiesContextTestExecutionListener, org.springframework.test.context.transaction.TransactionalTestExecutionListener, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener, org.springframework.test.context.event.EventPublishingTestExecutionListener, org.springframework.security.test.context.support.WithSecurityContextTestExecutionListener, org.springframework.security.test.context.support.ReactorContextTestExecutionListener]
2021-08-08 19:39:25,178 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Logger] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 19:39:25,180 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [agent] attribute in the [org.heartfulness.avtc.model.Logger] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 19:39:25,191 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Call] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 19:39:25,193 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [agent] attribute in the [org.heartfulness.avtc.model.Call] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 19:39:25,196 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - EnumTypeStringEvent - The [callStatus] enum attribute in the [org.heartfulness.avtc.model.Call] entity uses the EnumType.STRING strategy, which has a bigger memory footprint than EnumType.ORDINAL. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EnumTypeStringEvent
2021-08-08 19:39:25,199 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [caller] attribute in the [org.heartfulness.avtc.model.Call] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 19:39:25,203 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - EnumTypeStringEvent - The [category] enum attribute in the [org.heartfulness.avtc.model.Call] entity uses the EnumType.STRING strategy, which has a bigger memory footprint than EnumType.ORDINAL. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EnumTypeStringEvent
2021-08-08 19:39:25,222 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [leasing] bidirectional association in the [org.heartfulness.avtc.model.Call] entity requires both ends to be synchronized. Consider adding the [addAgent(org.heartfulness.avtc.model.Agent agent)] and [removeAgent(org.heartfulness.avtc.model.Agent agent)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 19:39:25,223 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [leasing] collection in the [org.heartfulness.avtc.model.Call] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 19:39:25,239 INFO org.springframework.test.context.support.AbstractTestContextBootstrapper [main] Using TestExecutionListeners: [org.springframework.test.context.web.ServletTestExecutionListener@64f857e7, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener@1095f122, org.springframework.test.context.event.ApplicationEventsTestExecutionListener@58c540cf, org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener@3d6300e8, org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener@1b822fcc, org.springframework.test.context.support.DirtiesContextTestExecutionListener@24a1c17f, org.springframework.test.context.transaction.TransactionalTestExecutionListener@56102e1c, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener@73511076, org.springframework.test.context.event.EventPublishingTestExecutionListener@7927bd9f, org.springframework.security.test.context.support.WithSecurityContextTestExecutionListener@532721fd, org.springframework.security.test.context.support.ReactorContextTestExecutionListener@410954b, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener@7fb9f71f, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener@3b366632, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener@51f49060, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener@514eedd8, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener@617fe9e1, org.springframework.boot.test.autoconfigure.webservices.client.MockWebServiceServerTestExecutionListener@6970140a]
2021-08-08 19:39:25,242 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Agent] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 19:39:25,249 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [calls] bidirectional association in the [org.heartfulness.avtc.model.Agent] entity requires both ends to be synchronized. Consider adding the [addCall(org.heartfulness.avtc.model.Call call)] and [removeCall(org.heartfulness.avtc.model.Call call)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 19:39:25,250 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [calls] collection in the [org.heartfulness.avtc.model.Agent] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 19:39:25,269 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [departments] attribute in the [org.heartfulness.avtc.model.Agent] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 19:39:25,269 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - ManyToManyCascadeRemoveEvent - The [departments] many-to-many association in the [org.heartfulness.avtc.model.Agent] entity cascades the REMOVE operation. Cascading the REMOVE operation is not needed since the other side is also a parent association. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#ManyToManyCascadeRemoveEvent
2021-08-08 19:39:25,269 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [departments] collection in the [org.heartfulness.avtc.model.Agent] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 19:39:25,293 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [leasedBy] attribute in the [org.heartfulness.avtc.model.Agent] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 19:39:25,300 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [loggerSet] bidirectional association in the [org.heartfulness.avtc.model.Agent] entity requires both ends to be synchronized. Consider adding the [addLogger(org.heartfulness.avtc.model.Logger logger)] and [removeLogger(org.heartfulness.avtc.model.Logger logger)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 19:39:25,300 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [loggerSet] collection in the [org.heartfulness.avtc.model.Agent] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 19:39:25,321 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - EnumTypeStringEvent - The [role] enum attribute in the [org.heartfulness.avtc.model.Agent] entity uses the EnumType.STRING strategy, which has a bigger memory footprint than EnumType.ORDINAL. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EnumTypeStringEvent
2021-08-08 19:39:25,325 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [scheduleExceptions] attribute in the [org.heartfulness.avtc.model.Agent] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 19:39:25,326 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [scheduleExceptions] bidirectional association in the [org.heartfulness.avtc.model.Agent] entity requires both ends to be synchronized. Consider adding the [addScheduleException(org.heartfulness.avtc.model.ScheduleException scheduleException)] and [removeScheduleException(org.heartfulness.avtc.model.ScheduleException scheduleException)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 19:39:25,327 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [scheduleExceptions] collection in the [org.heartfulness.avtc.model.Agent] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 19:39:25,330 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [schedules] bidirectional association in the [org.heartfulness.avtc.model.Agent] entity requires both ends to be synchronized. Only the [addSchedule(org.heartfulness.avtc.model.Schedule schedule)] could be found. Consider adding the [removeSchedule(org.heartfulness.avtc.model.Schedule schedule)]  synchronization method as well. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 19:39:25,331 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [schedules] collection in the [org.heartfulness.avtc.model.Agent] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 19:39:25,350 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - ManyToManyCascadeRemoveEvent - The [teams] many-to-many association in the [org.heartfulness.avtc.model.Agent] entity cascades the REMOVE operation. Cascading the REMOVE operation is not needed since the other side is also a parent association. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#ManyToManyCascadeRemoveEvent
2021-08-08 19:39:25,351 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [teams] collection in the [org.heartfulness.avtc.model.Agent] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 19:39:25,361 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [teamManaged] attribute in the [org.heartfulness.avtc.model.Agent] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 19:39:25,362 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - OneToOneParentSideEvent - The [teamManaged] one-to-one association in the [class org.heartfulness.avtc.model.Agent] entity is mapped as the parent-side of this relationship. The parent-side of a one-to-one association is fetched eagerly unless bytecode enhancement lazy loading is enabled and the association is annotated with @LazyToOne(LazyToOneOption.NO_PROXY). For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#OneToOneParentSideEvent
2021-08-08 19:39:25,367 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Department] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 19:39:25,370 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [agents] bidirectional association in the [org.heartfulness.avtc.model.Department] entity requires both ends to be synchronized. Only the [addAgent(org.heartfulness.avtc.model.Agent agent)] could be found. Consider adding the [removeAgent(org.heartfulness.avtc.model.Agent agent)]  synchronization method as well. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 19:39:25,371 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [agents] collection in the [org.heartfulness.avtc.model.Department] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 19:39:25,375 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [language] attribute in the [org.heartfulness.avtc.model.Department] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 19:39:25,380 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [service] attribute in the [org.heartfulness.avtc.model.Department] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 19:39:25,385 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Language] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 19:39:25,387 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [Departments] attribute in the [org.heartfulness.avtc.model.Language] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 19:39:25,388 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [Departments] bidirectional association in the [org.heartfulness.avtc.model.Language] entity requires both ends to be synchronized. Consider adding the [addDepartment(org.heartfulness.avtc.model.Department department)] and [removeDepartment(org.heartfulness.avtc.model.Department department)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 19:39:25,389 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [Departments] collection in the [org.heartfulness.avtc.model.Language] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 19:39:25,393 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [callers] attribute in the [org.heartfulness.avtc.model.Language] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 19:39:25,394 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [callers] bidirectional association in the [org.heartfulness.avtc.model.Language] entity requires both ends to be synchronized. Consider adding the [addCaller(org.heartfulness.avtc.model.Caller caller)] and [removeCaller(org.heartfulness.avtc.model.Caller caller)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 19:39:25,395 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [callers] collection in the [org.heartfulness.avtc.model.Language] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 19:39:25,401 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [teams] attribute in the [org.heartfulness.avtc.model.Language] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 19:39:25,402 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [teams] bidirectional association in the [org.heartfulness.avtc.model.Language] entity requires both ends to be synchronized. Consider adding the [addTeam(org.heartfulness.avtc.model.Team team)] and [removeTeam(org.heartfulness.avtc.model.Team team)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 19:39:25,403 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [teams] collection in the [org.heartfulness.avtc.model.Language] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 19:39:25,407 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Caller] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 19:39:25,413 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - EnumTypeStringEvent - The [ageGroup] enum attribute in the [org.heartfulness.avtc.model.Caller] entity uses the EnumType.STRING strategy, which has a bigger memory footprint than EnumType.ORDINAL. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EnumTypeStringEvent
2021-08-08 19:39:25,419 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - EagerFetchingEvent - The [calls] attribute in the [org.heartfulness.avtc.model.Caller] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 19:39:25,420 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [calls] bidirectional association in the [org.heartfulness.avtc.model.Caller] entity requires both ends to be synchronized. Only the [addCall(org.heartfulness.avtc.model.Call call)] could be found. Consider adding the [removeCall(org.heartfulness.avtc.model.Call call)]  synchronization method as well. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 19:39:25,420 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [calls] collection in the [org.heartfulness.avtc.model.Caller] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 19:39:25,422 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - EnumTypeStringEvent - The [category] enum attribute in the [org.heartfulness.avtc.model.Caller] entity uses the EnumType.STRING strategy, which has a bigger memory footprint than EnumType.ORDINAL. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EnumTypeStringEvent
2021-08-08 19:39:25,459 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [languages] collection in the [org.heartfulness.avtc.model.Caller] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 19:39:25,503 INFO org.hibernate.dialect.Dialect [restartedMain] HHH000400: Using dialect: org.hibernate.dialect.MySQL57Dialect
2021-08-08 19:39:25,504 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - DialectVersionEvent - Your application is using the [org.hibernate.dialect.MySQL55Dialect] Hibernate-specific Dialect. Consider using the [org.hibernate.dialect.MySQL57Dialect] instead, as it's closer to your current database server version [MySQL 5.7]. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#DialectVersionEvent
2021-08-08 19:39:25,506 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - SkipAutoCommitCheckEvent - You should set the [hibernate.connection.provider_disables_autocommit] configuration property to [true] while also making sure that the underlying DataSource is configured to disable the auto-commit flag whenever a new Connection is being acquired. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#SkipAutoCommitCheckEvent
2021-08-08 19:39:25,510 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - JdbcBatchSizeEvent - If you set the [hibernate.jdbc.batch_size] configuration property to a value greater than 1 (usually between 5 and 30), Hibernate can then execute SQL statements in batches, therefore reducing the number of database network roundtrips. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#JdbcBatchSizeEvent
2021-08-08 19:39:25,514 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] BLOCKER - SchemaGenerationEvent - You should not set the [hibernate.hbm2ddl.auto] configuration property to the value of [update], as Hibernate will then manage the database schema for you. Instead, you should use an incremental schema migration tool (e.g., Flyway, Liquibase), which allows you to use any database-specific DDL construct. By storing the migration scripts in the Version Control System along with the application source code, you will always remember why a certain schema change was done. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#SchemaGenerationEvent
2021-08-08 19:39:25,518 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - QueryPaginationCollectionFetchingEvent - You should set the [hibernate.query.fail_on_pagination_over_collection_fetch] configuration property to the value of [true], as Hibernate can then prevent in-memory pagination when join fetching a child entity collection. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#QueryPaginationCollectionFetchingEvent
2021-08-08 19:39:25,519 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - DefaultQueryPlanCacheMaxSizeEvent - You should set the [hibernate.query.plan_cache_max_size] configuration property to a value that allows you to hold all JPQL, Criteria API, or SQL queries executed with Hibernate. The default query plan cache size is [2048] and might not be enough for a non-trivial application. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#DefaultQueryPlanCacheMaxSizeEvent
2021-08-08 19:39:25,525 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - JdbcStatementCacheSizeEvent - The JDBC statement cache is disabled. You should consider enabling it, as follows. You should set the [cachePrepStmts] JDBC configuration property to the value of [true] and the [prepStmtCacheSize] property to the value of [256] . Consider lowering the statement cache size if you don't have enough memory and increasing it if you have plenty of memory and need to execute lots of distinct SQL statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#JdbcStatementCacheSizeEvent
2021-08-08 19:39:25,528 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] 90 issues were found: 1 BLOCKER, 50 CRITICAL, 9 MAJOR, 30 MINOR
2021-08-08 19:39:25,604 INFO org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration [restartedMain] 

Using generated security password: 601dc5ea-3faa-4bcc-8ce6-6f808a8255d0

2021-08-08 19:39:25,723 INFO org.springframework.security.web.DefaultSecurityFilterChain [restartedMain] Will secure any request with [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@60493e66, org.springframework.security.web.context.SecurityContextPersistenceFilter@7af71d75, org.springframework.security.web.header.HeaderWriterFilter@170da232, org.springframework.web.filter.CorsFilter@3453360a, org.springframework.security.web.authentication.logout.LogoutFilter@666c4c11, org.heartfulness.avtc.security.auth.SecurityFilter@49b1e2ef, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@7f440a0c, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@5222be4, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@476d0cf1, org.springframework.security.web.session.SessionManagementFilter@756a9b7c, org.springframework.security.web.access.ExceptionTranslationFilter@1282e689, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@cdf517]
2021-08-08 19:39:26,076 INFO org.springframework.boot.StartupInfoLogger [main] Starting AvtcApplicationTests using Java 11.0.10 on DESKTOP-BIBH7GP with PID 21188 (started by sonna in C:\Users\sonna\IdeaProjects\avtc)
2021-08-08 19:39:26,077 DEBUG org.springframework.boot.StartupInfoLogger [main] Running with Spring Boot v2.5.0, Spring v5.3.7
2021-08-08 19:39:26,083 INFO org.springframework.boot.SpringApplication [main] No active profile set, falling back to default profiles: default
2021-08-08 19:39:26,111 INFO org.hibernate.validator.internal.util.Version [background-preinit] HV000001: Hibernate Validator 6.2.0.Final
2021-08-08 19:39:27,192 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [restartedMain] LiveReload server is running on port 35729
2021-08-08 19:39:27,228 INFO org.apache.juli.logging.DirectJDKLog [restartedMain] Starting ProtocolHandler ["http-nio-8082"]
2021-08-08 19:39:27,237 INFO org.springframework.boot.web.embedded.tomcat.TomcatWebServer [restartedMain] Tomcat started on port(s): 8082 (http) with context path ''
2021-08-08 19:39:27,249 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Started AvtcApplication in 6.676 seconds (JVM running for 8290.514)
2021-08-08 19:39:27,250 INFO org.springframework.boot.availability.ApplicationAvailabilityBean [restartedMain] Application availability state LivenessState changed to CORRECT
2021-08-08 19:39:27,289 INFO org.springframework.boot.devtools.autoconfigure.ConditionEvaluationDeltaLoggingListener [restartedMain] Condition evaluation unchanged
2021-08-08 19:39:27,290 INFO org.springframework.boot.availability.ApplicationAvailabilityBean [restartedMain] Application availability state ReadinessState changed to ACCEPTING_TRAFFIC
2021-08-08 19:39:27,297 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 19:39:27,343 WARN org.springframework.core.log.CompositeLog [background-preinit] For Jackson Kotlin classes support please add "com.fasterxml.jackson.module:jackson-module-kotlin" to the classpath
2021-08-08 19:39:28,356 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2021-08-08 19:39:28,638 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 264 ms. Found 12 JPA repository interfaces.
2021-08-08 19:39:29,986 INFO org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [main] Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@6cbb175' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-08-08 19:39:30,050 INFO org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [main] Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-08-08 19:39:30,617 INFO org.hibernate.jpa.internal.util.LogHelper [main] HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2021-08-08 19:39:30,880 INFO org.hibernate.Version [main] HHH000412: Hibernate Core {5.2.17.Final}
2021-08-08 19:39:30,885 INFO org.hibernate.cfg.Environment [main] HHH000206: hibernate.properties not found
2021-08-08 19:39:31,004 INFO org.hibernate.annotations.common.reflection.java.JavaReflectionManager [main] HCANN000001: Hibernate Commons Annotations {5.0.1.Final}
2021-08-08 19:39:31,325 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Starting...
2021-08-08 19:39:32,696 INFO com.zaxxer.hikari.HikariDataSource [main] HikariPool-1 - Start completed.
2021-08-08 19:39:32,747 INFO org.hibernate.dialect.Dialect [main] HHH000400: Using dialect: org.hibernate.dialect.MySQL55Dialect
2021-08-08 19:39:35,168 INFO org.springframework.orm.jpa.AbstractEntityManagerFactoryBean [main] Initialized JPA EntityManagerFactory for persistence unit 'default'
2021-08-08 19:39:36,850 INFO org.hibernate.hql.internal.QueryTranslatorFactoryInitiator [main] HHH000397: Using ASTQueryTranslatorFactory
2021-08-08 19:39:38,080 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [main] 
 _    _                           _     _
| |  | |                         (_)   | |
| |__| |_   _ _ __   ___ _ __ ___ _ ___| |_ ___ _ __   ___ ___
|  __  | | | | '_ \ / _ \ '__/ __| / __| __/ _ \ '_ \ / __/ _ \
| |  | | |_| | |_) |  __/ |  \__ \ \__ \ ||  __/ | | | (_|  __/
|_|  |_|\__, | .__/ \___|_|  |___/_|___/\__\___|_| |_|\___\___|
         __/ | |
        |___/|_|

           ____        _   _           _
          / __ \      | | (_)         (_)
         | |  | |_ __ | |_ _ _ __ ___  _ _______ _ __
         | |  | | '_ \| __| | '_ ` _ \| |_  / _ \ '__|
         | |__| | |_) | |_| | | | | | | |/ /  __/ |
          \____/| .__/ \__|_|_| |_| |_|_/___\___|_|
                | |
                |_|

2021-08-08 19:39:38,149 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [main] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Service] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 19:39:38,158 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - EagerFetchingEvent - The [Departments] attribute in the [org.heartfulness.avtc.model.Service] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 19:39:38,162 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - BidirectionalSynchronizationEvent - The [Departments] bidirectional association in the [org.heartfulness.avtc.model.Service] entity requires both ends to be synchronized. Consider adding the [addDepartment(org.heartfulness.avtc.model.Department department)] and [removeDepartment(org.heartfulness.avtc.model.Department department)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 19:39:38,165 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [main] MINOR - NullCollectionEvent - The [Departments] collection in the [org.heartfulness.avtc.model.Service] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 19:39:38,174 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - EagerFetchingEvent - The [teams] attribute in the [org.heartfulness.avtc.model.Service] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 19:39:38,175 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - BidirectionalSynchronizationEvent - The [teams] bidirectional association in the [org.heartfulness.avtc.model.Service] entity requires both ends to be synchronized. Consider adding the [addTeam(org.heartfulness.avtc.model.Team team)] and [removeTeam(org.heartfulness.avtc.model.Team team)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 19:39:38,176 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [main] MINOR - NullCollectionEvent - The [teams] collection in the [org.heartfulness.avtc.model.Service] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 19:39:38,180 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [main] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Team] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 19:39:38,184 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - EagerFetchingEvent - The [agents] attribute in the [org.heartfulness.avtc.model.Team] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 19:39:38,187 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - ManyToManyCascadeRemoveEvent - The [agents] many-to-many association in the [org.heartfulness.avtc.model.Team] entity cascades the REMOVE operation. Cascading the REMOVE operation is not needed since the other side is also a parent association. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#ManyToManyCascadeRemoveEvent
2021-08-08 19:39:38,188 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [main] MINOR - NullCollectionEvent - The [agents] collection in the [org.heartfulness.avtc.model.Team] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 19:39:38,194 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - EagerFetchingEvent - The [language] attribute in the [org.heartfulness.avtc.model.Team] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 19:39:38,197 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - EagerFetchingEvent - The [manager] attribute in the [org.heartfulness.avtc.model.Team] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 19:39:38,201 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - OneToOneWithoutMapsIdEvent - The [manager] one-to-one association in the [org.heartfulness.avtc.model.Team] entity is using a separate Foreign Key to reference the parent record. Consider using @MapsId so that the identifier is shared with the parent row. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#OneToOneWithoutMapsIdEvent
2021-08-08 19:39:38,205 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - EagerFetchingEvent - The [service] attribute in the [org.heartfulness.avtc.model.Team] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 19:39:38,208 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - EagerFetchingEvent - The [timeSlots] attribute in the [org.heartfulness.avtc.model.Team] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 19:39:38,209 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - ManyToManyCascadeRemoveEvent - The [timeSlots] many-to-many association in the [org.heartfulness.avtc.model.Team] entity cascades the REMOVE operation. Cascading the REMOVE operation is not needed since the other side is also a parent association. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#ManyToManyCascadeRemoveEvent
2021-08-08 19:39:38,210 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - BidirectionalSynchronizationEvent - The [timeSlots] bidirectional association in the [org.heartfulness.avtc.model.Team] entity requires both ends to be synchronized. Only the [addTimeSlot(org.heartfulness.avtc.model.TimeSlot timeSlot)] could be found. Consider adding the [removeTimeSlot(org.heartfulness.avtc.model.TimeSlot timeSlot)]  synchronization method as well. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 19:39:38,211 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [main] MINOR - NullCollectionEvent - The [timeSlots] collection in the [org.heartfulness.avtc.model.Team] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 19:39:38,215 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [main] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.TimeSlot] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 19:39:38,221 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - EagerFetchingEvent - The [scheduleExceptions] attribute in the [org.heartfulness.avtc.model.TimeSlot] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 19:39:38,222 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - BidirectionalSynchronizationEvent - The [scheduleExceptions] bidirectional association in the [org.heartfulness.avtc.model.TimeSlot] entity requires both ends to be synchronized. Only the [addScheduleException(org.heartfulness.avtc.model.ScheduleException scheduleException)] could be found. Consider adding the [removeScheduleException(org.heartfulness.avtc.model.ScheduleException scheduleException)]  synchronization method as well. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 19:39:38,223 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [main] MINOR - NullCollectionEvent - The [scheduleExceptions] collection in the [org.heartfulness.avtc.model.TimeSlot] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 19:39:38,229 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - EagerFetchingEvent - The [teams] attribute in the [org.heartfulness.avtc.model.TimeSlot] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 19:39:38,231 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - ManyToManyCascadeRemoveEvent - The [teams] many-to-many association in the [org.heartfulness.avtc.model.TimeSlot] entity cascades the REMOVE operation. Cascading the REMOVE operation is not needed since the other side is also a parent association. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#ManyToManyCascadeRemoveEvent
2021-08-08 19:39:38,231 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [main] MINOR - NullCollectionEvent - The [teams] collection in the [org.heartfulness.avtc.model.TimeSlot] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 19:39:38,240 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [main] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.ScheduleException] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 19:39:38,245 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - EagerFetchingEvent - The [agent] attribute in the [org.heartfulness.avtc.model.ScheduleException] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 19:39:38,251 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - EagerFetchingEvent - The [slot] attribute in the [org.heartfulness.avtc.model.ScheduleException] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 19:39:38,256 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [main] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Schedule] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 19:39:38,259 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - EagerFetchingEvent - The [agent] attribute in the [org.heartfulness.avtc.model.Schedule] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 19:39:38,264 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [main] MAJOR - LargeColumnEvent - The [endTime] attribute in the [org.heartfulness.avtc.model.Schedule] entity is mapped to a large column type. Consider using either compact types or moving the large columns to separate tables or using multiple entities mapped to the same database table so that you can choose which properties are to be fetched from the database based on the entity type. You should use the @Basic(fetch=LAZY) annotation and activate the bytecode enhancement lazy loading mechanism as, otherwise, the column is fetched eagerly when loading the entity. You should use the @DynamicUpdate annotation so that the UPDATE statement contains only the columns that have been modified by the currently running Persistence Context. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#LargeColumnEvent
2021-08-08 19:39:38,268 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [main] MAJOR - LargeColumnEvent - The [startTime] attribute in the [org.heartfulness.avtc.model.Schedule] entity is mapped to a large column type. Consider using either compact types or moving the large columns to separate tables or using multiple entities mapped to the same database table so that you can choose which properties are to be fetched from the database based on the entity type. You should use the @Basic(fetch=LAZY) annotation and activate the bytecode enhancement lazy loading mechanism as, otherwise, the column is fetched eagerly when loading the entity. You should use the @DynamicUpdate annotation so that the UPDATE statement contains only the columns that have been modified by the currently running Persistence Context. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#LargeColumnEvent
2021-08-08 19:39:38,271 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [main] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Logger] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 19:39:38,274 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - EagerFetchingEvent - The [agent] attribute in the [org.heartfulness.avtc.model.Logger] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 19:39:38,279 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [main] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Call] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 19:39:38,281 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - EagerFetchingEvent - The [agent] attribute in the [org.heartfulness.avtc.model.Call] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 19:39:38,285 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [main] MAJOR - EnumTypeStringEvent - The [callStatus] enum attribute in the [org.heartfulness.avtc.model.Call] entity uses the EnumType.STRING strategy, which has a bigger memory footprint than EnumType.ORDINAL. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EnumTypeStringEvent
2021-08-08 19:39:38,287 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - EagerFetchingEvent - The [caller] attribute in the [org.heartfulness.avtc.model.Call] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 19:39:38,290 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [main] MAJOR - EnumTypeStringEvent - The [category] enum attribute in the [org.heartfulness.avtc.model.Call] entity uses the EnumType.STRING strategy, which has a bigger memory footprint than EnumType.ORDINAL. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EnumTypeStringEvent
2021-08-08 19:39:38,304 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - BidirectionalSynchronizationEvent - The [leasing] bidirectional association in the [org.heartfulness.avtc.model.Call] entity requires both ends to be synchronized. Consider adding the [addAgent(org.heartfulness.avtc.model.Agent agent)] and [removeAgent(org.heartfulness.avtc.model.Agent agent)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 19:39:38,305 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [main] MINOR - NullCollectionEvent - The [leasing] collection in the [org.heartfulness.avtc.model.Call] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 19:39:38,322 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [main] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Agent] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 19:39:38,331 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - BidirectionalSynchronizationEvent - The [calls] bidirectional association in the [org.heartfulness.avtc.model.Agent] entity requires both ends to be synchronized. Consider adding the [addCall(org.heartfulness.avtc.model.Call call)] and [removeCall(org.heartfulness.avtc.model.Call call)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 19:39:38,332 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [main] MINOR - NullCollectionEvent - The [calls] collection in the [org.heartfulness.avtc.model.Agent] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 19:39:38,349 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - EagerFetchingEvent - The [departments] attribute in the [org.heartfulness.avtc.model.Agent] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 19:39:38,351 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - ManyToManyCascadeRemoveEvent - The [departments] many-to-many association in the [org.heartfulness.avtc.model.Agent] entity cascades the REMOVE operation. Cascading the REMOVE operation is not needed since the other side is also a parent association. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#ManyToManyCascadeRemoveEvent
2021-08-08 19:39:38,351 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [main] MINOR - NullCollectionEvent - The [departments] collection in the [org.heartfulness.avtc.model.Agent] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 19:39:38,367 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - EagerFetchingEvent - The [leasedBy] attribute in the [org.heartfulness.avtc.model.Agent] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 19:39:38,373 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - BidirectionalSynchronizationEvent - The [loggerSet] bidirectional association in the [org.heartfulness.avtc.model.Agent] entity requires both ends to be synchronized. Consider adding the [addLogger(org.heartfulness.avtc.model.Logger logger)] and [removeLogger(org.heartfulness.avtc.model.Logger logger)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 19:39:38,374 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [main] MINOR - NullCollectionEvent - The [loggerSet] collection in the [org.heartfulness.avtc.model.Agent] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 19:39:38,387 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [main] MAJOR - EnumTypeStringEvent - The [role] enum attribute in the [org.heartfulness.avtc.model.Agent] entity uses the EnumType.STRING strategy, which has a bigger memory footprint than EnumType.ORDINAL. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EnumTypeStringEvent
2021-08-08 19:39:38,390 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - EagerFetchingEvent - The [scheduleExceptions] attribute in the [org.heartfulness.avtc.model.Agent] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 19:39:38,391 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - BidirectionalSynchronizationEvent - The [scheduleExceptions] bidirectional association in the [org.heartfulness.avtc.model.Agent] entity requires both ends to be synchronized. Consider adding the [addScheduleException(org.heartfulness.avtc.model.ScheduleException scheduleException)] and [removeScheduleException(org.heartfulness.avtc.model.ScheduleException scheduleException)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 19:39:38,392 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [main] MINOR - NullCollectionEvent - The [scheduleExceptions] collection in the [org.heartfulness.avtc.model.Agent] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 19:39:38,395 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - BidirectionalSynchronizationEvent - The [schedules] bidirectional association in the [org.heartfulness.avtc.model.Agent] entity requires both ends to be synchronized. Only the [addSchedule(org.heartfulness.avtc.model.Schedule schedule)] could be found. Consider adding the [removeSchedule(org.heartfulness.avtc.model.Schedule schedule)]  synchronization method as well. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 19:39:38,396 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [main] MINOR - NullCollectionEvent - The [schedules] collection in the [org.heartfulness.avtc.model.Agent] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 19:39:38,409 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - ManyToManyCascadeRemoveEvent - The [teams] many-to-many association in the [org.heartfulness.avtc.model.Agent] entity cascades the REMOVE operation. Cascading the REMOVE operation is not needed since the other side is also a parent association. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#ManyToManyCascadeRemoveEvent
2021-08-08 19:39:38,410 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [main] MINOR - NullCollectionEvent - The [teams] collection in the [org.heartfulness.avtc.model.Agent] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 19:39:38,415 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - EagerFetchingEvent - The [teamManaged] attribute in the [org.heartfulness.avtc.model.Agent] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 19:39:38,418 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - OneToOneParentSideEvent - The [teamManaged] one-to-one association in the [class org.heartfulness.avtc.model.Agent] entity is mapped as the parent-side of this relationship. The parent-side of a one-to-one association is fetched eagerly unless bytecode enhancement lazy loading is enabled and the association is annotated with @LazyToOne(LazyToOneOption.NO_PROXY). For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#OneToOneParentSideEvent
2021-08-08 19:39:38,424 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [main] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Department] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 19:39:38,427 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - BidirectionalSynchronizationEvent - The [agents] bidirectional association in the [org.heartfulness.avtc.model.Department] entity requires both ends to be synchronized. Only the [addAgent(org.heartfulness.avtc.model.Agent agent)] could be found. Consider adding the [removeAgent(org.heartfulness.avtc.model.Agent agent)]  synchronization method as well. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 19:39:38,428 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [main] MINOR - NullCollectionEvent - The [agents] collection in the [org.heartfulness.avtc.model.Department] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 19:39:38,430 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - EagerFetchingEvent - The [language] attribute in the [org.heartfulness.avtc.model.Department] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 19:39:38,433 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - EagerFetchingEvent - The [service] attribute in the [org.heartfulness.avtc.model.Department] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 19:39:38,436 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [main] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Language] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 19:39:38,438 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - EagerFetchingEvent - The [Departments] attribute in the [org.heartfulness.avtc.model.Language] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 19:39:38,439 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - BidirectionalSynchronizationEvent - The [Departments] bidirectional association in the [org.heartfulness.avtc.model.Language] entity requires both ends to be synchronized. Consider adding the [addDepartment(org.heartfulness.avtc.model.Department department)] and [removeDepartment(org.heartfulness.avtc.model.Department department)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 19:39:38,440 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [main] MINOR - NullCollectionEvent - The [Departments] collection in the [org.heartfulness.avtc.model.Language] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 19:39:38,442 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - EagerFetchingEvent - The [callers] attribute in the [org.heartfulness.avtc.model.Language] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 19:39:38,443 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - BidirectionalSynchronizationEvent - The [callers] bidirectional association in the [org.heartfulness.avtc.model.Language] entity requires both ends to be synchronized. Consider adding the [addCaller(org.heartfulness.avtc.model.Caller caller)] and [removeCaller(org.heartfulness.avtc.model.Caller caller)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 19:39:38,444 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [main] MINOR - NullCollectionEvent - The [callers] collection in the [org.heartfulness.avtc.model.Language] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 19:39:38,449 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - EagerFetchingEvent - The [teams] attribute in the [org.heartfulness.avtc.model.Language] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 19:39:38,450 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - BidirectionalSynchronizationEvent - The [teams] bidirectional association in the [org.heartfulness.avtc.model.Language] entity requires both ends to be synchronized. Consider adding the [addTeam(org.heartfulness.avtc.model.Team team)] and [removeTeam(org.heartfulness.avtc.model.Team team)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 19:39:38,451 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [main] MINOR - NullCollectionEvent - The [teams] collection in the [org.heartfulness.avtc.model.Language] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 19:39:38,454 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [main] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Caller] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 19:39:38,459 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [main] MAJOR - EnumTypeStringEvent - The [ageGroup] enum attribute in the [org.heartfulness.avtc.model.Caller] entity uses the EnumType.STRING strategy, which has a bigger memory footprint than EnumType.ORDINAL. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EnumTypeStringEvent
2021-08-08 19:39:38,465 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - EagerFetchingEvent - The [calls] attribute in the [org.heartfulness.avtc.model.Caller] entity uses eager fetching. Consider using lazy fetching which, not only that is more efficient, but is way more flexible when it comes to fetching data. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EagerFetchingEvent
2021-08-08 19:39:38,465 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - BidirectionalSynchronizationEvent - The [calls] bidirectional association in the [org.heartfulness.avtc.model.Caller] entity requires both ends to be synchronized. Only the [addCall(org.heartfulness.avtc.model.Call call)] could be found. Consider adding the [removeCall(org.heartfulness.avtc.model.Call call)]  synchronization method as well. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 19:39:38,466 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [main] MINOR - NullCollectionEvent - The [calls] collection in the [org.heartfulness.avtc.model.Caller] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 19:39:38,469 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [main] MAJOR - EnumTypeStringEvent - The [category] enum attribute in the [org.heartfulness.avtc.model.Caller] entity uses the EnumType.STRING strategy, which has a bigger memory footprint than EnumType.ORDINAL. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EnumTypeStringEvent
2021-08-08 19:39:38,491 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [main] MINOR - NullCollectionEvent - The [languages] collection in the [org.heartfulness.avtc.model.Caller] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 19:39:38,559 INFO org.hibernate.dialect.Dialect [main] HHH000400: Using dialect: org.hibernate.dialect.MySQL57Dialect
2021-08-08 19:39:38,563 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [main] MAJOR - DialectVersionEvent - Your application is using the [org.hibernate.dialect.MySQL55Dialect] Hibernate-specific Dialect. Consider using the [org.hibernate.dialect.MySQL57Dialect] instead, as it's closer to your current database server version [MySQL 5.7]. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#DialectVersionEvent
2021-08-08 19:39:38,569 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [main] MAJOR - SkipAutoCommitCheckEvent - You should set the [hibernate.connection.provider_disables_autocommit] configuration property to [true] while also making sure that the underlying DataSource is configured to disable the auto-commit flag whenever a new Connection is being acquired. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#SkipAutoCommitCheckEvent
2021-08-08 19:39:38,580 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - JdbcBatchSizeEvent - If you set the [hibernate.jdbc.batch_size] configuration property to a value greater than 1 (usually between 5 and 30), Hibernate can then execute SQL statements in batches, therefore reducing the number of database network roundtrips. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#JdbcBatchSizeEvent
2021-08-08 19:39:38,590 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] BLOCKER - SchemaGenerationEvent - You should not set the [hibernate.hbm2ddl.auto] configuration property to the value of [update], as Hibernate will then manage the database schema for you. Instead, you should use an incremental schema migration tool (e.g., Flyway, Liquibase), which allows you to use any database-specific DDL construct. By storing the migration scripts in the Version Control System along with the application source code, you will always remember why a certain schema change was done. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#SchemaGenerationEvent
2021-08-08 19:39:38,597 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - QueryPaginationCollectionFetchingEvent - You should set the [hibernate.query.fail_on_pagination_over_collection_fetch] configuration property to the value of [true], as Hibernate can then prevent in-memory pagination when join fetching a child entity collection. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#QueryPaginationCollectionFetchingEvent
2021-08-08 19:39:38,599 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - DefaultQueryPlanCacheMaxSizeEvent - You should set the [hibernate.query.plan_cache_max_size] configuration property to a value that allows you to hold all JPQL, Criteria API, or SQL queries executed with Hibernate. The default query plan cache size is [2048] and might not be enough for a non-trivial application. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#DefaultQueryPlanCacheMaxSizeEvent
2021-08-08 19:39:38,609 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [main] CRITICAL - JdbcStatementCacheSizeEvent - The JDBC statement cache is disabled. You should consider enabling it, as follows. You should set the [cachePrepStmts] JDBC configuration property to the value of [true] and the [prepStmtCacheSize] property to the value of [256] . Consider lowering the statement cache size if you don't have enough memory and increasing it if you have plenty of memory and need to execute lots of distinct SQL statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#JdbcStatementCacheSizeEvent
2021-08-08 19:39:38,611 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [main] 90 issues were found: 1 BLOCKER, 50 CRITICAL, 9 MAJOR, 30 MINOR
2021-08-08 19:39:38,830 INFO org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration [main] 

Using generated security password: 79a2a5f7-a066-4ff3-a8ed-69c53c24280a

2021-08-08 19:39:39,482 INFO org.springframework.security.web.DefaultSecurityFilterChain [main] Will secure any request with [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@7db63a01, org.springframework.security.web.context.SecurityContextPersistenceFilter@75708130, org.springframework.security.web.header.HeaderWriterFilter@61c42e54, org.springframework.web.filter.CorsFilter@423791, org.springframework.security.web.authentication.logout.LogoutFilter@588614f9, org.heartfulness.avtc.security.auth.SecurityFilter@267a8777, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@1d160161, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@2d6e09f0, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@3aac31b7, org.springframework.security.web.session.SessionManagementFilter@5101b9, org.springframework.security.web.access.ExceptionTranslationFilter@61e4a072, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@5319efc0]
2021-08-08 19:39:43,651 INFO org.springframework.boot.StartupInfoLogger [main] Started AvtcApplicationTests in 18.291 seconds (JVM running for 21.707)
2021-08-08 19:39:43,656 INFO org.springframework.boot.availability.ApplicationAvailabilityBean [main] Application availability state LivenessState changed to CORRECT
2021-08-08 19:39:43,662 INFO org.springframework.boot.availability.ApplicationAvailabilityBean [main] Application availability state ReadinessState changed to ACCEPTING_TRAFFIC
2021-08-08 19:39:43,908 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 19:41:07,311 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 19:42:47,320 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 19:44:27,343 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 19:46:07,361 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 19:47:47,371 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 19:49:27,392 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 19:51:07,405 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 19:52:47,420 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 19:54:27,436 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 19:56:07,451 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 19:57:47,466 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 19:59:27,478 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 20:01:07,486 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 20:02:47,501 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 20:04:27,570 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 20:06:07,587 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 20:07:47,601 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 20:09:27,621 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 20:11:07,632 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 20:12:47,654 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 20:14:27,680 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 20:16:07,699 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 20:17:47,721 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 20:19:27,732 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 20:21:07,760 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 20:22:47,774 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 20:24:27,783 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 20:26:07,803 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 20:27:47,821 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 20:29:27,833 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 20:31:07,851 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 20:32:47,859 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 20:34:27,890 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 20:36:07,906 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 20:37:47,919 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 20:39:27,961 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 20:41:07,983 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 20:42:47,998 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 20:44:28,019 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 20:46:08,043 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 20:47:48,068 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 20:49:28,113 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 20:54:27,591 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting AvtcApplication using Java 11.0.10 on DESKTOP-BIBH7GP with PID 17468 (C:\Users\sonna\IdeaProjects\avtc\target\classes started by sonna in C:\Users\sonna\IdeaProjects\avtc)
2021-08-08 20:54:27,588 INFO org.hibernate.validator.internal.util.Version [background-preinit] HV000001: Hibernate Validator 6.2.0.Final
2021-08-08 20:54:27,597 DEBUG org.springframework.boot.StartupInfoLogger [restartedMain] Running with Spring Boot v2.5.0, Spring v5.3.7
2021-08-08 20:54:27,598 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2021-08-08 20:54:27,677 INFO org.springframework.boot.logging.DeferredLog [restartedMain] The Class-Path manifest attribute in C:\Users\sonna\.m2\repository\org\glassfish\hk2\hk2\2.6.1\hk2-2.6.1.jar referenced one or more files that do not exist: file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/hk2-utils.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/jakarta.annotation-api.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/jakarta.inject.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/hk2-api.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/aopalliance-repackaged.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/hk2-core.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/hk2-locator.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/javassist.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/hk2-runlevel.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/class-model.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/asm.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/asm-analysis.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/asm-commons.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/asm-tree.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/asm-util.jar
2021-08-08 20:54:27,678 INFO org.springframework.boot.logging.DeferredLog [restartedMain] The Class-Path manifest attribute in C:\Users\sonna\.m2\repository\io\grpc\grpc-netty-shaded\1.23.0\grpc-netty-shaded-1.23.0.jar referenced one or more files that do not exist: file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/grpc-core-1.23.0.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/grpc-api-1.23.0.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/gson-2.7.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/annotations-4.1.1.4.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/perfmark-api-0.17.0.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/opencensus-contrib-grpc-metrics-0.21.0.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/opencensus-api-0.21.0.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/grpc-context-1.23.0.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/error_prone_annotations-2.3.2.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/jsr305-3.0.2.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/animal-sniffer-annotations-1.17.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/guava-26.0-android.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/checker-compat-qual-2.5.2.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/j2objc-annotations-1.1.jar
2021-08-08 20:54:27,679 INFO org.springframework.boot.logging.DeferredLog [restartedMain] Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2021-08-08 20:54:27,679 INFO org.springframework.boot.logging.DeferredLog [restartedMain] For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2021-08-08 20:54:28,146 WARN org.springframework.core.log.CompositeLog [background-preinit] For Jackson Kotlin classes support please add "com.fasterxml.jackson.module:jackson-module-kotlin" to the classpath
2021-08-08 20:54:29,335 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [restartedMain] Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2021-08-08 20:54:29,626 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [restartedMain] Finished Spring Data repository scanning in 274 ms. Found 12 JPA repository interfaces.
2021-08-08 20:54:30,430 INFO org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [restartedMain] Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@b6f3ce3' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-08-08 20:54:30,446 INFO org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [restartedMain] Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-08-08 20:54:31,185 INFO org.springframework.boot.web.embedded.tomcat.TomcatWebServer [restartedMain] Tomcat initialized with port(s): 8082 (http)
2021-08-08 20:54:31,206 INFO org.apache.juli.logging.DirectJDKLog [restartedMain] Initializing ProtocolHandler ["http-nio-8082"]
2021-08-08 20:54:31,207 INFO org.apache.juli.logging.DirectJDKLog [restartedMain] Starting service [Tomcat]
2021-08-08 20:54:31,208 INFO org.apache.juli.logging.DirectJDKLog [restartedMain] Starting Servlet engine: [Apache Tomcat/9.0.46]
2021-08-08 20:54:31,519 INFO org.apache.juli.logging.DirectJDKLog [restartedMain] Initializing Spring embedded WebApplicationContext
2021-08-08 20:54:31,520 INFO org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext [restartedMain] Root WebApplicationContext: initialization completed in 3839 ms
2021-08-08 20:54:31,997 DEBUG org.springframework.web.filter.GenericFilterBean [restartedMain] Filter 'securityFilter' configured for use
2021-08-08 20:54:32,356 INFO org.hibernate.jpa.internal.util.LogHelper [restartedMain] HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2021-08-08 20:54:32,537 INFO org.hibernate.Version [restartedMain] HHH000412: Hibernate Core {5.2.17.Final}
2021-08-08 20:54:32,542 INFO org.hibernate.cfg.Environment [restartedMain] HHH000206: hibernate.properties not found
2021-08-08 20:54:32,648 INFO org.hibernate.annotations.common.reflection.java.JavaReflectionManager [restartedMain] HCANN000001: Hibernate Commons Annotations {5.0.1.Final}
2021-08-08 20:54:33,003 INFO com.zaxxer.hikari.HikariDataSource [restartedMain] HikariPool-1 - Starting...
2021-08-08 20:54:33,645 INFO com.zaxxer.hikari.HikariDataSource [restartedMain] HikariPool-1 - Start completed.
2021-08-08 20:54:33,672 INFO org.hibernate.dialect.Dialect [restartedMain] HHH000400: Using dialect: org.hibernate.dialect.MySQL55Dialect
2021-08-08 20:54:35,519 INFO org.springframework.orm.jpa.AbstractEntityManagerFactoryBean [restartedMain] Initialized JPA EntityManagerFactory for persistence unit 'default'
2021-08-08 20:54:36,885 INFO org.hibernate.hql.internal.QueryTranslatorFactoryInitiator [restartedMain] HHH000397: Using ASTQueryTranslatorFactory
2021-08-08 20:54:37,747 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] 
 _    _                           _     _
| |  | |                         (_)   | |
| |__| |_   _ _ __   ___ _ __ ___ _ ___| |_ ___ _ __   ___ ___
|  __  | | | | '_ \ / _ \ '__/ __| / __| __/ _ \ '_ \ / __/ _ \
| |  | | |_| | |_) |  __/ |  \__ \ \__ \ ||  __/ | | | (_|  __/
|_|  |_|\__, | .__/ \___|_|  |___/_|___/\__\___|_| |_|\___\___|
         __/ | |
        |___/|_|

           ____        _   _           _
          / __ \      | | (_)         (_)
         | |  | |_ __ | |_ _ _ __ ___  _ _______ _ __
         | |  | | '_ \| __| | '_ ` _ \| |_  / _ \ '__|
         | |__| | |_) | |_| | | | | | | |/ /  __/ |
          \____/| .__/ \__|_|_| |_| |_|_/___\___|_|
                | |
                |_|

2021-08-08 20:54:37,794 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [agents] collection in the [org.heartfulness.avtc.model.Team] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 20:54:37,811 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [timeSlots] collection in the [org.heartfulness.avtc.model.Team] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 20:54:37,819 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Service] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 20:54:37,822 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [departments] collection in the [org.heartfulness.avtc.model.Service] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 20:54:37,827 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [teams] collection in the [org.heartfulness.avtc.model.Service] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 20:54:37,831 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.TimeSlot] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 20:54:37,836 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [scheduleExceptions] collection in the [org.heartfulness.avtc.model.TimeSlot] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 20:54:37,842 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - ManyToManyCascadeRemoveEvent - The [teams] many-to-many association in the [org.heartfulness.avtc.model.TimeSlot] entity cascades the REMOVE operation. Cascading the REMOVE operation is not needed since the other side is also a parent association. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#ManyToManyCascadeRemoveEvent
2021-08-08 20:54:37,843 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [teams] collection in the [org.heartfulness.avtc.model.TimeSlot] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 20:54:37,849 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.ScheduleException] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 20:54:37,862 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Schedule] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 20:54:37,867 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - LargeColumnEvent - The [endTime] attribute in the [org.heartfulness.avtc.model.Schedule] entity is mapped to a large column type. Consider using either compact types or moving the large columns to separate tables or using multiple entities mapped to the same database table so that you can choose which properties are to be fetched from the database based on the entity type. You should use the @Basic(fetch=LAZY) annotation and activate the bytecode enhancement lazy loading mechanism as, otherwise, the column is fetched eagerly when loading the entity. You should use the @DynamicUpdate annotation so that the UPDATE statement contains only the columns that have been modified by the currently running Persistence Context. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#LargeColumnEvent
2021-08-08 20:54:37,870 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - LargeColumnEvent - The [startTime] attribute in the [org.heartfulness.avtc.model.Schedule] entity is mapped to a large column type. Consider using either compact types or moving the large columns to separate tables or using multiple entities mapped to the same database table so that you can choose which properties are to be fetched from the database based on the entity type. You should use the @Basic(fetch=LAZY) annotation and activate the bytecode enhancement lazy loading mechanism as, otherwise, the column is fetched eagerly when loading the entity. You should use the @DynamicUpdate annotation so that the UPDATE statement contains only the columns that have been modified by the currently running Persistence Context. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#LargeColumnEvent
2021-08-08 20:54:37,873 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Logger] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 20:54:37,883 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Call] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 20:54:37,904 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [leasing] collection in the [org.heartfulness.avtc.model.Call] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 20:54:37,919 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Agent] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 20:54:37,925 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [calls] collection in the [org.heartfulness.avtc.model.Agent] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 20:54:37,939 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [departments] collection in the [org.heartfulness.avtc.model.Agent] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 20:54:37,961 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [loggerSet] collection in the [org.heartfulness.avtc.model.Agent] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 20:54:37,982 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [scheduleExceptions] collection in the [org.heartfulness.avtc.model.Agent] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 20:54:37,986 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [schedules] bidirectional association in the [org.heartfulness.avtc.model.Agent] entity requires both ends to be synchronized. Only the [addSchedule(org.heartfulness.avtc.model.Schedule schedule)] could be found. Consider adding the [removeSchedule(org.heartfulness.avtc.model.Schedule schedule)]  synchronization method as well. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 20:54:37,986 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [schedules] collection in the [org.heartfulness.avtc.model.Agent] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 20:54:38,000 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [teams] collection in the [org.heartfulness.avtc.model.Agent] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 20:54:38,009 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - OneToOneParentSideEvent - The [teamManaged] one-to-one association in the [class org.heartfulness.avtc.model.Agent] entity is mapped as the parent-side of this relationship. The parent-side of a one-to-one association is fetched eagerly unless bytecode enhancement lazy loading is enabled and the association is annotated with @LazyToOne(LazyToOneOption.NO_PROXY). For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#OneToOneParentSideEvent
2021-08-08 20:54:38,013 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Department] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 20:54:38,016 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [agents] bidirectional association in the [org.heartfulness.avtc.model.Department] entity requires both ends to be synchronized. Only the [addAgent(org.heartfulness.avtc.model.Agent agent)] could be found. Consider adding the [removeAgent(org.heartfulness.avtc.model.Agent agent)]  synchronization method as well. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 20:54:38,017 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [agents] collection in the [org.heartfulness.avtc.model.Department] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 20:54:38,024 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Language] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 20:54:38,026 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [Departments] bidirectional association in the [org.heartfulness.avtc.model.Language] entity requires both ends to be synchronized. Consider adding the [addDepartment(org.heartfulness.avtc.model.Department department)] and [removeDepartment(org.heartfulness.avtc.model.Department department)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 20:54:38,026 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [Departments] collection in the [org.heartfulness.avtc.model.Language] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 20:54:38,029 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [callers] bidirectional association in the [org.heartfulness.avtc.model.Language] entity requires both ends to be synchronized. Consider adding the [addCaller(org.heartfulness.avtc.model.Caller caller)] and [removeCaller(org.heartfulness.avtc.model.Caller caller)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 20:54:38,031 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [callers] collection in the [org.heartfulness.avtc.model.Language] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 20:54:38,035 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [teams] bidirectional association in the [org.heartfulness.avtc.model.Language] entity requires both ends to be synchronized. Consider adding the [addTeam(org.heartfulness.avtc.model.Team team)] and [removeTeam(org.heartfulness.avtc.model.Team team)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 20:54:38,036 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [teams] collection in the [org.heartfulness.avtc.model.Language] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 20:54:38,039 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Caller] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 20:54:38,044 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - EnumTypeStringEvent - The [ageGroup] enum attribute in the [org.heartfulness.avtc.model.Caller] entity uses the EnumType.STRING strategy, which has a bigger memory footprint than EnumType.ORDINAL. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EnumTypeStringEvent
2021-08-08 20:54:38,052 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [calls] bidirectional association in the [org.heartfulness.avtc.model.Caller] entity requires both ends to be synchronized. Only the [addCall(org.heartfulness.avtc.model.Call call)] could be found. Consider adding the [removeCall(org.heartfulness.avtc.model.Call call)]  synchronization method as well. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 20:54:38,053 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [calls] collection in the [org.heartfulness.avtc.model.Caller] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 20:54:38,055 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - EnumTypeStringEvent - The [category] enum attribute in the [org.heartfulness.avtc.model.Caller] entity uses the EnumType.STRING strategy, which has a bigger memory footprint than EnumType.ORDINAL. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EnumTypeStringEvent
2021-08-08 20:54:38,084 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [languages] collection in the [org.heartfulness.avtc.model.Caller] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 20:54:38,129 INFO org.hibernate.dialect.Dialect [restartedMain] HHH000400: Using dialect: org.hibernate.dialect.MySQL57Dialect
2021-08-08 20:54:38,132 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - DialectVersionEvent - Your application is using the [org.hibernate.dialect.MySQL55Dialect] Hibernate-specific Dialect. Consider using the [org.hibernate.dialect.MySQL57Dialect] instead, as it's closer to your current database server version [MySQL 5.7]. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#DialectVersionEvent
2021-08-08 20:54:38,135 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - SkipAutoCommitCheckEvent - You should set the [hibernate.connection.provider_disables_autocommit] configuration property to [true] while also making sure that the underlying DataSource is configured to disable the auto-commit flag whenever a new Connection is being acquired. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#SkipAutoCommitCheckEvent
2021-08-08 20:54:38,145 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - JdbcBatchSizeEvent - If you set the [hibernate.jdbc.batch_size] configuration property to a value greater than 1 (usually between 5 and 30), Hibernate can then execute SQL statements in batches, therefore reducing the number of database network roundtrips. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#JdbcBatchSizeEvent
2021-08-08 20:54:38,151 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] BLOCKER - SchemaGenerationEvent - You should not set the [hibernate.hbm2ddl.auto] configuration property to the value of [update], as Hibernate will then manage the database schema for you. Instead, you should use an incremental schema migration tool (e.g., Flyway, Liquibase), which allows you to use any database-specific DDL construct. By storing the migration scripts in the Version Control System along with the application source code, you will always remember why a certain schema change was done. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#SchemaGenerationEvent
2021-08-08 20:54:38,156 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - QueryPaginationCollectionFetchingEvent - You should set the [hibernate.query.fail_on_pagination_over_collection_fetch] configuration property to the value of [true], as Hibernate can then prevent in-memory pagination when join fetching a child entity collection. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#QueryPaginationCollectionFetchingEvent
2021-08-08 20:54:38,158 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - DefaultQueryPlanCacheMaxSizeEvent - You should set the [hibernate.query.plan_cache_max_size] configuration property to a value that allows you to hold all JPQL, Criteria API, or SQL queries executed with Hibernate. The default query plan cache size is [2048] and might not be enough for a non-trivial application. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#DefaultQueryPlanCacheMaxSizeEvent
2021-08-08 20:54:38,164 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - JdbcStatementCacheSizeEvent - The JDBC statement cache is disabled. You should consider enabling it, as follows. You should set the [cachePrepStmts] JDBC configuration property to the value of [true] and the [prepStmtCacheSize] property to the value of [256] . Consider lowering the statement cache size if you don't have enough memory and increasing it if you have plenty of memory and need to execute lots of distinct SQL statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#JdbcStatementCacheSizeEvent
2021-08-08 20:54:38,166 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] 48 issues were found: 1 BLOCKER, 12 CRITICAL, 6 MAJOR, 29 MINOR
2021-08-08 20:54:38,317 INFO org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration [restartedMain] 

Using generated security password: d3be60b3-0d1e-4b53-aef0-ac191ccdccb4

2021-08-08 20:54:38,762 INFO org.springframework.security.web.DefaultSecurityFilterChain [restartedMain] Will secure any request with [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@23cb2c98, org.springframework.security.web.context.SecurityContextPersistenceFilter@15ee134b, org.springframework.security.web.header.HeaderWriterFilter@6a6ef7ec, org.springframework.web.filter.CorsFilter@13f44675, org.springframework.security.web.authentication.logout.LogoutFilter@5dad3247, org.heartfulness.avtc.security.auth.SecurityFilter@43e0f6, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@7c20c27c, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@755cc93c, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@7bf68c7, org.springframework.security.web.session.SessionManagementFilter@28c2a00f, org.springframework.security.web.access.ExceptionTranslationFilter@4e5f2571, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@9b9927f]
2021-08-08 20:54:41,676 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [restartedMain] LiveReload server is running on port 35729
2021-08-08 20:54:41,728 INFO org.apache.juli.logging.DirectJDKLog [restartedMain] Starting ProtocolHandler ["http-nio-8082"]
2021-08-08 20:54:41,768 INFO org.springframework.boot.web.embedded.tomcat.TomcatWebServer [restartedMain] Tomcat started on port(s): 8082 (http) with context path ''
2021-08-08 20:54:41,794 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Started AvtcApplication in 14.883 seconds (JVM running for 18.326)
2021-08-08 20:54:41,798 INFO org.springframework.boot.availability.ApplicationAvailabilityBean [restartedMain] Application availability state LivenessState changed to CORRECT
2021-08-08 20:54:41,802 INFO org.springframework.boot.availability.ApplicationAvailabilityBean [restartedMain] Application availability state ReadinessState changed to ACCEPTING_TRAFFIC
2021-08-08 20:54:41,940 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 20:55:36,808 INFO org.apache.juli.logging.DirectJDKLog [http-nio-8082-exec-1] Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-08-08 20:55:36,809 INFO org.springframework.web.servlet.FrameworkServlet [http-nio-8082-exec-1] Initializing Servlet 'dispatcherServlet'
2021-08-08 20:55:36,811 INFO org.springframework.web.servlet.FrameworkServlet [http-nio-8082-exec-1] Completed initialization in 2 ms
2021-08-08 20:55:36,863 INFO org.heartfulness.avtc.security.auth.SecurityFilter [http-nio-8082-exec-1] null
2021-08-08 20:55:37,171 ERROR org.apache.juli.logging.DirectJDKLog [http-nio-8082-exec-1] Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.springframework.dao.InvalidDataAccessApiUsageException: For input string: "AWAITING_CONNECTION_TO_AGENT"; nested exception is java.lang.NumberFormatException: For input string: "AWAITING_CONNECTION_TO_AGENT"] with root cause
java.lang.NumberFormatException: For input string: "AWAITING_CONNECTION_TO_AGENT"
	at java.base/jdk.internal.math.FloatingDecimal.readJavaFormatString(FloatingDecimal.java:2054)
	at java.base/jdk.internal.math.FloatingDecimal.parseDouble(FloatingDecimal.java:110)
	at java.base/java.lang.Double.parseDouble(Double.java:543)
	at com.mysql.cj.protocol.a.MysqlTextValueDecoder.getDouble(MysqlTextValueDecoder.java:249)
	at com.mysql.cj.result.AbstractNumericValueFactory.createFromBytes(AbstractNumericValueFactory.java:57)
	at com.mysql.cj.protocol.a.MysqlTextValueDecoder.decodeByteArray(MysqlTextValueDecoder.java:143)
	at com.mysql.cj.protocol.result.AbstractResultsetRow.decodeAndCreateReturnValue(AbstractResultsetRow.java:135)
	at com.mysql.cj.protocol.result.AbstractResultsetRow.getValueFromBytes(AbstractResultsetRow.java:243)
	at com.mysql.cj.protocol.a.result.ByteArrayRow.getValue(ByteArrayRow.java:91)
	at com.mysql.cj.jdbc.result.ResultSetImpl.getObject(ResultSetImpl.java:1316)
	at com.mysql.cj.jdbc.result.ResultSetImpl.getInt(ResultSetImpl.java:822)
	at com.mysql.cj.jdbc.result.ResultSetImpl.getInt(ResultSetImpl.java:843)
	at com.zaxxer.hikari.pool.HikariProxyResultSet.getInt(HikariProxyResultSet.java)
	at org.hibernate.type.EnumType$OrdinalEnumValueMapper.getValue(EnumType.java:337)
	at org.hibernate.type.EnumType.nullSafeGet(EnumType.java:231)
	at org.hibernate.type.CustomType.nullSafeGet(CustomType.java:119)
	at org.hibernate.type.AbstractType.hydrate(AbstractType.java:82)
	at org.hibernate.persister.entity.AbstractEntityPersister.hydrate(AbstractEntityPersister.java:2868)
	at org.hibernate.loader.Loader.loadFromResultSet(Loader.java:1747)
	at org.hibernate.loader.Loader.instanceNotYetLoaded(Loader.java:1673)
	at org.hibernate.loader.Loader.getRow(Loader.java:1562)
	at org.hibernate.loader.Loader.getRowFromResultSet(Loader.java:732)
	at org.hibernate.loader.Loader.processResultSet(Loader.java:991)
	at org.hibernate.loader.Loader.doQuery(Loader.java:949)
	at org.hibernate.loader.Loader.doQueryAndInitializeNonLazyCollections(Loader.java:341)
	at org.hibernate.loader.Loader.doList(Loader.java:2692)
	at org.hibernate.loader.Loader.doList(Loader.java:2675)
	at org.hibernate.loader.Loader.listIgnoreQueryCache(Loader.java:2507)
	at org.hibernate.loader.Loader.list(Loader.java:2502)
	at org.hibernate.loader.hql.QueryLoader.list(QueryLoader.java:502)
	at org.hibernate.hql.internal.ast.QueryTranslatorImpl.list(QueryTranslatorImpl.java:392)
	at org.hibernate.engine.query.spi.HQLQueryPlan.performList(HQLQueryPlan.java:216)
	at org.hibernate.internal.SessionImpl.list(SessionImpl.java:1490)
	at org.hibernate.query.internal.AbstractProducedQuery.doList(AbstractProducedQuery.java:1445)
	at org.hibernate.query.internal.AbstractProducedQuery.list(AbstractProducedQuery.java:1414)
	at org.hibernate.query.internal.AbstractProducedQuery.getSingleResult(AbstractProducedQuery.java:1463)
	at io.hypersistence.optimizer.hibernate.decorator.AbstractHibernate52SessionFactoryDecorator$SessionDecorator$QueryDecorator.getSingleResult(AbstractHibernate52SessionFactoryDecorator.java:937)
	at org.hibernate.query.criteria.internal.compile.CriteriaQueryTypeQueryAdapter.getSingleResult(CriteriaQueryTypeQueryAdapter.java:107)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution$SingleEntityExecution.doExecute(JpaQueryExecution.java:196)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution.execute(JpaQueryExecution.java:88)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.doExecute(AbstractJpaQuery.java:155)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.execute(AbstractJpaQuery.java:143)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:137)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:121)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:159)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:138)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:80)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:145)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)
	at com.sun.proxy.$Proxy130.findByUid(Unknown Source)
	at org.heartfulness.avtc.service.CallServiceImpl.findByUid(CallServiceImpl.java:66)
	at org.heartfulness.avtc.service.InCallService.inCall(InCallService.java:53)
	at org.heartfulness.avtc.controller.NodeController.inCallWebHook(NodeController.java:43)
	at org.heartfulness.avtc.controller.NodeController$$FastClassBySpringCGLIB$$7244677c.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:779)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:692)
	at org.heartfulness.avtc.controller.NodeController$$EnhancerBySpringCGLIB$$be2115f4.inCallWebHook(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:197)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:141)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:894)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1063)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:652)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:327)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:121)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:115)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.heartfulness.avtc.security.auth.SecurityFilter.doFilterInternal(SecurityFilter.java:58)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:110)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:80)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:211)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:183)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:893)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1707)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:834)
2021-08-08 20:56:09,537 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting AvtcApplication using Java 11.0.10 on DESKTOP-BIBH7GP with PID 10680 (C:\Users\sonna\IdeaProjects\avtc\target\classes started by sonna in C:\Users\sonna\IdeaProjects\avtc)
2021-08-08 20:56:09,537 INFO org.hibernate.validator.internal.util.Version [background-preinit] HV000001: Hibernate Validator 6.2.0.Final
2021-08-08 20:56:09,544 DEBUG org.springframework.boot.StartupInfoLogger [restartedMain] Running with Spring Boot v2.5.0, Spring v5.3.7
2021-08-08 20:56:09,545 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2021-08-08 20:56:09,623 INFO org.springframework.boot.logging.DeferredLog [restartedMain] The Class-Path manifest attribute in C:\Users\sonna\.m2\repository\org\glassfish\hk2\hk2\2.6.1\hk2-2.6.1.jar referenced one or more files that do not exist: file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/hk2-utils.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/jakarta.annotation-api.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/jakarta.inject.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/hk2-api.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/aopalliance-repackaged.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/hk2-core.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/hk2-locator.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/javassist.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/hk2-runlevel.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/class-model.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/asm.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/asm-analysis.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/asm-commons.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/asm-tree.jar,file:/C:/Users/sonna/.m2/repository/org/glassfish/hk2/hk2/2.6.1/asm-util.jar
2021-08-08 20:56:09,624 INFO org.springframework.boot.logging.DeferredLog [restartedMain] The Class-Path manifest attribute in C:\Users\sonna\.m2\repository\io\grpc\grpc-netty-shaded\1.23.0\grpc-netty-shaded-1.23.0.jar referenced one or more files that do not exist: file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/grpc-core-1.23.0.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/grpc-api-1.23.0.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/gson-2.7.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/annotations-4.1.1.4.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/perfmark-api-0.17.0.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/opencensus-contrib-grpc-metrics-0.21.0.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/opencensus-api-0.21.0.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/grpc-context-1.23.0.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/error_prone_annotations-2.3.2.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/jsr305-3.0.2.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/animal-sniffer-annotations-1.17.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/guava-26.0-android.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/checker-compat-qual-2.5.2.jar,file:/C:/Users/sonna/.m2/repository/io/grpc/grpc-netty-shaded/1.23.0/j2objc-annotations-1.1.jar
2021-08-08 20:56:09,625 INFO org.springframework.boot.logging.DeferredLog [restartedMain] Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2021-08-08 20:56:09,626 INFO org.springframework.boot.logging.DeferredLog [restartedMain] For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2021-08-08 20:56:10,113 WARN org.springframework.core.log.CompositeLog [background-preinit] For Jackson Kotlin classes support please add "com.fasterxml.jackson.module:jackson-module-kotlin" to the classpath
2021-08-08 20:56:11,232 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [restartedMain] Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2021-08-08 20:56:11,522 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [restartedMain] Finished Spring Data repository scanning in 274 ms. Found 12 JPA repository interfaces.
2021-08-08 20:56:12,309 INFO org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [restartedMain] Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@195a9ee5' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-08-08 20:56:12,324 INFO org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [restartedMain] Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-08-08 20:56:13,007 INFO org.springframework.boot.web.embedded.tomcat.TomcatWebServer [restartedMain] Tomcat initialized with port(s): 8082 (http)
2021-08-08 20:56:13,024 INFO org.apache.juli.logging.DirectJDKLog [restartedMain] Initializing ProtocolHandler ["http-nio-8082"]
2021-08-08 20:56:13,025 INFO org.apache.juli.logging.DirectJDKLog [restartedMain] Starting service [Tomcat]
2021-08-08 20:56:13,025 INFO org.apache.juli.logging.DirectJDKLog [restartedMain] Starting Servlet engine: [Apache Tomcat/9.0.46]
2021-08-08 20:56:13,306 INFO org.apache.juli.logging.DirectJDKLog [restartedMain] Initializing Spring embedded WebApplicationContext
2021-08-08 20:56:13,307 INFO org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext [restartedMain] Root WebApplicationContext: initialization completed in 3678 ms
2021-08-08 20:56:13,722 DEBUG org.springframework.web.filter.GenericFilterBean [restartedMain] Filter 'securityFilter' configured for use
2021-08-08 20:56:14,038 INFO org.hibernate.jpa.internal.util.LogHelper [restartedMain] HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2021-08-08 20:56:14,172 INFO org.hibernate.Version [restartedMain] HHH000412: Hibernate Core {5.2.17.Final}
2021-08-08 20:56:14,176 INFO org.hibernate.cfg.Environment [restartedMain] HHH000206: hibernate.properties not found
2021-08-08 20:56:14,256 INFO org.hibernate.annotations.common.reflection.java.JavaReflectionManager [restartedMain] HCANN000001: Hibernate Commons Annotations {5.0.1.Final}
2021-08-08 20:56:14,557 INFO com.zaxxer.hikari.HikariDataSource [restartedMain] HikariPool-1 - Starting...
2021-08-08 20:56:15,129 INFO com.zaxxer.hikari.HikariDataSource [restartedMain] HikariPool-1 - Start completed.
2021-08-08 20:56:15,153 INFO org.hibernate.dialect.Dialect [restartedMain] HHH000400: Using dialect: org.hibernate.dialect.MySQL55Dialect
2021-08-08 20:56:16,921 WARN org.hibernate.tool.schema.internal.ExceptionHandlerLoggedImpl [restartedMain] GenerationTarget encountered exception accepting command : Error executing DDL via JDBC Statement
org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL via JDBC Statement
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:67)
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.applySqlString(SchemaDropperImpl.java:375)
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.applySqlStrings(SchemaDropperImpl.java:359)
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.dropFromMetadata(SchemaDropperImpl.java:241)
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.performDrop(SchemaDropperImpl.java:154)
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.doDrop(SchemaDropperImpl.java:126)
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.doDrop(SchemaDropperImpl.java:112)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:144)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:72)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:312)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:462)
	at io.hypersistence.optimizer.hibernate.decorator.Hibernate52SessionFactoryBuilderFactory$SessionFactoryDecoratorBuilder.build(Hibernate52SessionFactoryBuilderFactory.java:76)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:892)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:58)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:365)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:341)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1845)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1782)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:602)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:524)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1154)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:908)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:145)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:758)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:438)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:337)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1336)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1325)
	at org.heartfulness.avtc.AvtcApplication.main(AvtcApplication.java:26)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: java.sql.SQLIntegrityConstraintViolationException: Cannot delete or update a parent row: a foreign key constraint fails
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:117)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:762)
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:646)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:54)
	... 40 common frames omitted
2021-08-08 20:56:17,110 WARN org.hibernate.tool.schema.internal.ExceptionHandlerLoggedImpl [restartedMain] GenerationTarget encountered exception accepting command : Error executing DDL via JDBC Statement
org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL via JDBC Statement
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:67)
	at org.hibernate.tool.schema.internal.SchemaCreatorImpl.applySqlString(SchemaCreatorImpl.java:440)
	at org.hibernate.tool.schema.internal.SchemaCreatorImpl.applySqlStrings(SchemaCreatorImpl.java:424)
	at org.hibernate.tool.schema.internal.SchemaCreatorImpl.createFromMetadata(SchemaCreatorImpl.java:315)
	at org.hibernate.tool.schema.internal.SchemaCreatorImpl.performCreation(SchemaCreatorImpl.java:166)
	at org.hibernate.tool.schema.internal.SchemaCreatorImpl.doCreation(SchemaCreatorImpl.java:135)
	at org.hibernate.tool.schema.internal.SchemaCreatorImpl.doCreation(SchemaCreatorImpl.java:121)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:155)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:72)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:312)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:462)
	at io.hypersistence.optimizer.hibernate.decorator.Hibernate52SessionFactoryBuilderFactory$SessionFactoryDecoratorBuilder.build(Hibernate52SessionFactoryBuilderFactory.java:76)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:892)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:58)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:365)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:341)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1845)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1782)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:602)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:524)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1154)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:908)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:145)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:758)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:438)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:337)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1336)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1325)
	at org.heartfulness.avtc.AvtcApplication.main(AvtcApplication.java:26)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: java.sql.SQLSyntaxErrorException: Table 'agent' already exists
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:120)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:762)
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:646)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:54)
	... 40 common frames omitted
2021-08-08 20:56:17,368 WARN org.hibernate.tool.schema.internal.ExceptionHandlerLoggedImpl [restartedMain] GenerationTarget encountered exception accepting command : Error executing DDL via JDBC Statement
org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL via JDBC Statement
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:67)
	at org.hibernate.tool.schema.internal.SchemaCreatorImpl.applySqlString(SchemaCreatorImpl.java:440)
	at org.hibernate.tool.schema.internal.SchemaCreatorImpl.applySqlStrings(SchemaCreatorImpl.java:424)
	at org.hibernate.tool.schema.internal.SchemaCreatorImpl.createFromMetadata(SchemaCreatorImpl.java:349)
	at org.hibernate.tool.schema.internal.SchemaCreatorImpl.performCreation(SchemaCreatorImpl.java:166)
	at org.hibernate.tool.schema.internal.SchemaCreatorImpl.doCreation(SchemaCreatorImpl.java:135)
	at org.hibernate.tool.schema.internal.SchemaCreatorImpl.doCreation(SchemaCreatorImpl.java:121)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:155)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:72)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:312)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:462)
	at io.hypersistence.optimizer.hibernate.decorator.Hibernate52SessionFactoryBuilderFactory$SessionFactoryDecoratorBuilder.build(Hibernate52SessionFactoryBuilderFactory.java:76)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:892)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:58)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:365)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:341)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1845)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1782)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:602)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:524)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1154)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:908)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:145)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:758)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:438)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:337)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1336)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1325)
	at org.heartfulness.avtc.AvtcApplication.main(AvtcApplication.java:26)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: java.sql.SQLSyntaxErrorException: Duplicate key name 'UK_6whjd0q6hscb57w12fb3bl19t'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:120)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:762)
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:646)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:54)
	... 40 common frames omitted
2021-08-08 20:56:17,400 WARN org.hibernate.tool.schema.internal.ExceptionHandlerLoggedImpl [restartedMain] GenerationTarget encountered exception accepting command : Error executing DDL via JDBC Statement
org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL via JDBC Statement
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:67)
	at org.hibernate.tool.schema.internal.SchemaCreatorImpl.applySqlString(SchemaCreatorImpl.java:440)
	at org.hibernate.tool.schema.internal.SchemaCreatorImpl.applySqlStrings(SchemaCreatorImpl.java:424)
	at org.hibernate.tool.schema.internal.SchemaCreatorImpl.createFromMetadata(SchemaCreatorImpl.java:375)
	at org.hibernate.tool.schema.internal.SchemaCreatorImpl.performCreation(SchemaCreatorImpl.java:166)
	at org.hibernate.tool.schema.internal.SchemaCreatorImpl.doCreation(SchemaCreatorImpl.java:135)
	at org.hibernate.tool.schema.internal.SchemaCreatorImpl.doCreation(SchemaCreatorImpl.java:121)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:155)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:72)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:312)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:462)
	at io.hypersistence.optimizer.hibernate.decorator.Hibernate52SessionFactoryBuilderFactory$SessionFactoryDecoratorBuilder.build(Hibernate52SessionFactoryBuilderFactory.java:76)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:892)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:58)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:365)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:341)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1845)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1782)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:602)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:524)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1154)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:908)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:145)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:758)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:438)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:337)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1336)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1325)
	at org.heartfulness.avtc.AvtcApplication.main(AvtcApplication.java:26)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: java.sql.SQLIntegrityConstraintViolationException: Cannot add or update a child row: a foreign key constraint fails (`hfn`.`#sql-3678_3be`, CONSTRAINT `FK5k690tkyct9bpjtavcmcyoeti` FOREIGN KEY (`leased_by`) REFERENCES `calls` (`id`))
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:117)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:762)
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:646)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:54)
	... 40 common frames omitted
2021-08-08 20:56:18,194 INFO org.hibernate.tool.schema.internal.SchemaCreatorImpl [restartedMain] HHH000476: Executing import script 'org.hibernate.tool.schema.internal.exec.ScriptSourceInputNonExistentImpl@5e0338bd'
2021-08-08 20:56:18,205 INFO org.springframework.orm.jpa.AbstractEntityManagerFactoryBean [restartedMain] Initialized JPA EntityManagerFactory for persistence unit 'default'
2021-08-08 20:56:19,539 INFO org.hibernate.hql.internal.QueryTranslatorFactoryInitiator [restartedMain] HHH000397: Using ASTQueryTranslatorFactory
2021-08-08 20:56:20,371 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] 
 _    _                           _     _
| |  | |                         (_)   | |
| |__| |_   _ _ __   ___ _ __ ___ _ ___| |_ ___ _ __   ___ ___
|  __  | | | | '_ \ / _ \ '__/ __| / __| __/ _ \ '_ \ / __/ _ \
| |  | | |_| | |_) |  __/ |  \__ \ \__ \ ||  __/ | | | (_|  __/
|_|  |_|\__, | .__/ \___|_|  |___/_|___/\__\___|_| |_|\___\___|
         __/ | |
        |___/|_|

           ____        _   _           _
          / __ \      | | (_)         (_)
         | |  | |_ __ | |_ _ _ __ ___  _ _______ _ __
         | |  | | '_ \| __| | '_ ` _ \| |_  / _ \ '__|
         | |__| | |_) | |_| | | | | | | |/ /  __/ |
          \____/| .__/ \__|_|_| |_| |_|_/___\___|_|
                | |
                |_|

2021-08-08 20:56:20,421 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [agents] collection in the [org.heartfulness.avtc.model.Team] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 20:56:20,434 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [timeSlots] collection in the [org.heartfulness.avtc.model.Team] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 20:56:20,443 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Service] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 20:56:20,446 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [departments] collection in the [org.heartfulness.avtc.model.Service] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 20:56:20,450 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [teams] collection in the [org.heartfulness.avtc.model.Service] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 20:56:20,455 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.TimeSlot] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 20:56:20,460 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [scheduleExceptions] collection in the [org.heartfulness.avtc.model.TimeSlot] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 20:56:20,466 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - ManyToManyCascadeRemoveEvent - The [teams] many-to-many association in the [org.heartfulness.avtc.model.TimeSlot] entity cascades the REMOVE operation. Cascading the REMOVE operation is not needed since the other side is also a parent association. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#ManyToManyCascadeRemoveEvent
2021-08-08 20:56:20,467 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [teams] collection in the [org.heartfulness.avtc.model.TimeSlot] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 20:56:20,474 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.ScheduleException] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 20:56:20,486 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Schedule] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 20:56:20,492 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - LargeColumnEvent - The [endTime] attribute in the [org.heartfulness.avtc.model.Schedule] entity is mapped to a large column type. Consider using either compact types or moving the large columns to separate tables or using multiple entities mapped to the same database table so that you can choose which properties are to be fetched from the database based on the entity type. You should use the @Basic(fetch=LAZY) annotation and activate the bytecode enhancement lazy loading mechanism as, otherwise, the column is fetched eagerly when loading the entity. You should use the @DynamicUpdate annotation so that the UPDATE statement contains only the columns that have been modified by the currently running Persistence Context. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#LargeColumnEvent
2021-08-08 20:56:20,494 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - LargeColumnEvent - The [startTime] attribute in the [org.heartfulness.avtc.model.Schedule] entity is mapped to a large column type. Consider using either compact types or moving the large columns to separate tables or using multiple entities mapped to the same database table so that you can choose which properties are to be fetched from the database based on the entity type. You should use the @Basic(fetch=LAZY) annotation and activate the bytecode enhancement lazy loading mechanism as, otherwise, the column is fetched eagerly when loading the entity. You should use the @DynamicUpdate annotation so that the UPDATE statement contains only the columns that have been modified by the currently running Persistence Context. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#LargeColumnEvent
2021-08-08 20:56:20,498 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Logger] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 20:56:20,509 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Call] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 20:56:20,530 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [leasing] collection in the [org.heartfulness.avtc.model.Call] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 20:56:20,546 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Agent] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 20:56:20,553 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [calls] collection in the [org.heartfulness.avtc.model.Agent] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 20:56:20,567 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [departments] collection in the [org.heartfulness.avtc.model.Agent] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 20:56:20,592 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [loggerSet] collection in the [org.heartfulness.avtc.model.Agent] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 20:56:20,612 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [scheduleExceptions] collection in the [org.heartfulness.avtc.model.Agent] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 20:56:20,616 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [schedules] bidirectional association in the [org.heartfulness.avtc.model.Agent] entity requires both ends to be synchronized. Only the [addSchedule(org.heartfulness.avtc.model.Schedule schedule)] could be found. Consider adding the [removeSchedule(org.heartfulness.avtc.model.Schedule schedule)]  synchronization method as well. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 20:56:20,617 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [schedules] collection in the [org.heartfulness.avtc.model.Agent] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 20:56:20,631 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [teams] collection in the [org.heartfulness.avtc.model.Agent] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 20:56:20,641 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - OneToOneParentSideEvent - The [teamManaged] one-to-one association in the [class org.heartfulness.avtc.model.Agent] entity is mapped as the parent-side of this relationship. The parent-side of a one-to-one association is fetched eagerly unless bytecode enhancement lazy loading is enabled and the association is annotated with @LazyToOne(LazyToOneOption.NO_PROXY). For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#OneToOneParentSideEvent
2021-08-08 20:56:20,645 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Department] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 20:56:20,647 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [agents] bidirectional association in the [org.heartfulness.avtc.model.Department] entity requires both ends to be synchronized. Only the [addAgent(org.heartfulness.avtc.model.Agent agent)] could be found. Consider adding the [removeAgent(org.heartfulness.avtc.model.Agent agent)]  synchronization method as well. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 20:56:20,648 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [agents] collection in the [org.heartfulness.avtc.model.Department] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 20:56:20,655 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Language] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 20:56:20,659 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [Departments] bidirectional association in the [org.heartfulness.avtc.model.Language] entity requires both ends to be synchronized. Consider adding the [addDepartment(org.heartfulness.avtc.model.Department department)] and [removeDepartment(org.heartfulness.avtc.model.Department department)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 20:56:20,660 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [Departments] collection in the [org.heartfulness.avtc.model.Language] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 20:56:20,662 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [callers] bidirectional association in the [org.heartfulness.avtc.model.Language] entity requires both ends to be synchronized. Consider adding the [addCaller(org.heartfulness.avtc.model.Caller caller)] and [removeCaller(org.heartfulness.avtc.model.Caller caller)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 20:56:20,662 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [callers] collection in the [org.heartfulness.avtc.model.Language] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 20:56:20,667 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [teams] bidirectional association in the [org.heartfulness.avtc.model.Language] entity requires both ends to be synchronized. Consider adding the [addTeam(org.heartfulness.avtc.model.Team team)] and [removeTeam(org.heartfulness.avtc.model.Team team)] synchronization methods. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 20:56:20,667 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [teams] collection in the [org.heartfulness.avtc.model.Language] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 20:56:20,670 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - IdentityGeneratorEvent - The [id] identifier attribute in the [org.heartfulness.avtc.model.Caller] entity uses the [IdentityGenerator] strategy, which prevents Hibernate from enabling JDBC batch inserts. Since the database does not support the SEQUENCE identifier strategy, you need to use plain JDBC or some other data access framework to batch insert statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#IdentityGeneratorEvent
2021-08-08 20:56:20,676 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - EnumTypeStringEvent - The [ageGroup] enum attribute in the [org.heartfulness.avtc.model.Caller] entity uses the EnumType.STRING strategy, which has a bigger memory footprint than EnumType.ORDINAL. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EnumTypeStringEvent
2021-08-08 20:56:20,683 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - BidirectionalSynchronizationEvent - The [calls] bidirectional association in the [org.heartfulness.avtc.model.Caller] entity requires both ends to be synchronized. Only the [addCall(org.heartfulness.avtc.model.Call call)] could be found. Consider adding the [removeCall(org.heartfulness.avtc.model.Call call)]  synchronization method as well. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#BidirectionalSynchronizationEvent
2021-08-08 20:56:20,683 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [calls] collection in the [org.heartfulness.avtc.model.Caller] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 20:56:20,685 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - EnumTypeStringEvent - The [category] enum attribute in the [org.heartfulness.avtc.model.Caller] entity uses the EnumType.STRING strategy, which has a bigger memory footprint than EnumType.ORDINAL. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EnumTypeStringEvent
2021-08-08 20:56:20,716 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MINOR - NullCollectionEvent - The [languages] collection in the [org.heartfulness.avtc.model.Caller] entity is [null] by default. You should always initialize collections since an empty collection better indicates the absence of child elements, rather than a null collection reference. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#NullCollectionEvent
2021-08-08 20:56:20,762 INFO org.hibernate.dialect.Dialect [restartedMain] HHH000400: Using dialect: org.hibernate.dialect.MySQL57Dialect
2021-08-08 20:56:20,764 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - DialectVersionEvent - Your application is using the [org.hibernate.dialect.MySQL55Dialect] Hibernate-specific Dialect. Consider using the [org.hibernate.dialect.MySQL57Dialect] instead, as it's closer to your current database server version [MySQL 5.7]. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#DialectVersionEvent
2021-08-08 20:56:20,769 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] MAJOR - SkipAutoCommitCheckEvent - You should set the [hibernate.connection.provider_disables_autocommit] configuration property to [true] while also making sure that the underlying DataSource is configured to disable the auto-commit flag whenever a new Connection is being acquired. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#SkipAutoCommitCheckEvent
2021-08-08 20:56:20,779 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - JdbcBatchSizeEvent - If you set the [hibernate.jdbc.batch_size] configuration property to a value greater than 1 (usually between 5 and 30), Hibernate can then execute SQL statements in batches, therefore reducing the number of database network roundtrips. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#JdbcBatchSizeEvent
2021-08-08 20:56:20,786 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] BLOCKER - SchemaGenerationEvent - You should not set the [hibernate.hbm2ddl.auto] configuration property to the value of [create], as Hibernate will then manage the database schema for you. Instead, you should use an incremental schema migration tool (e.g., Flyway, Liquibase), which allows you to use any database-specific DDL construct. By storing the migration scripts in the Version Control System along with the application source code, you will always remember why a certain schema change was done. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#SchemaGenerationEvent
2021-08-08 20:56:20,791 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - QueryPaginationCollectionFetchingEvent - You should set the [hibernate.query.fail_on_pagination_over_collection_fetch] configuration property to the value of [true], as Hibernate can then prevent in-memory pagination when join fetching a child entity collection. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#QueryPaginationCollectionFetchingEvent
2021-08-08 20:56:20,792 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - DefaultQueryPlanCacheMaxSizeEvent - You should set the [hibernate.query.plan_cache_max_size] configuration property to a value that allows you to hold all JPQL, Criteria API, or SQL queries executed with Hibernate. The default query plan cache size is [2048] and might not be enough for a non-trivial application. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#DefaultQueryPlanCacheMaxSizeEvent
2021-08-08 20:56:20,800 ERROR io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] CRITICAL - JdbcStatementCacheSizeEvent - The JDBC statement cache is disabled. You should consider enabling it, as follows. You should set the [cachePrepStmts] JDBC configuration property to the value of [true] and the [prepStmtCacheSize] property to the value of [256] . Consider lowering the statement cache size if you don't have enough memory and increasing it if you have plenty of memory and need to execute lots of distinct SQL statements. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#JdbcStatementCacheSizeEvent
2021-08-08 20:56:20,803 WARN io.hypersistence.optimizer.util.logger.Slf4jLogger [restartedMain] 48 issues were found: 1 BLOCKER, 12 CRITICAL, 6 MAJOR, 29 MINOR
2021-08-08 20:56:20,962 INFO org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration [restartedMain] 

Using generated security password: 64246349-e7ba-46ae-9a5e-31011d5d34ff

2021-08-08 20:56:21,430 INFO org.springframework.security.web.DefaultSecurityFilterChain [restartedMain] Will secure any request with [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@284cc829, org.springframework.security.web.context.SecurityContextPersistenceFilter@5262dd3f, org.springframework.security.web.header.HeaderWriterFilter@6d084a9c, org.springframework.web.filter.CorsFilter@134ba65, org.springframework.security.web.authentication.logout.LogoutFilter@7fdb1e8b, org.heartfulness.avtc.security.auth.SecurityFilter@6bdcff81, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@711b79a2, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@135b98c5, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@76f0b9df, org.springframework.security.web.session.SessionManagementFilter@42d4b944, org.springframework.security.web.access.ExceptionTranslationFilter@f25e003, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@17f5f6fb]
2021-08-08 20:56:24,566 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [restartedMain] LiveReload server is running on port 35729
2021-08-08 20:56:24,626 INFO org.apache.juli.logging.DirectJDKLog [restartedMain] Starting ProtocolHandler ["http-nio-8082"]
2021-08-08 20:56:24,671 INFO org.springframework.boot.web.embedded.tomcat.TomcatWebServer [restartedMain] Tomcat started on port(s): 8082 (http) with context path ''
2021-08-08 20:56:24,701 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Started AvtcApplication in 15.829 seconds (JVM running for 18.888)
2021-08-08 20:56:24,706 INFO org.springframework.boot.availability.ApplicationAvailabilityBean [restartedMain] Application availability state LivenessState changed to CORRECT
2021-08-08 20:56:24,711 INFO org.springframework.boot.availability.ApplicationAvailabilityBean [restartedMain] Application availability state ReadinessState changed to ACCEPTING_TRAFFIC
2021-08-08 20:56:24,862 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 20:56:42,101 INFO org.apache.juli.logging.DirectJDKLog [http-nio-8082-exec-1] Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-08-08 20:56:42,102 INFO org.springframework.web.servlet.FrameworkServlet [http-nio-8082-exec-1] Initializing Servlet 'dispatcherServlet'
2021-08-08 20:56:42,105 INFO org.springframework.web.servlet.FrameworkServlet [http-nio-8082-exec-1] Completed initialization in 3 ms
2021-08-08 20:56:42,153 INFO org.heartfulness.avtc.security.auth.SecurityFilter [http-nio-8082-exec-1] null
2021-08-08 20:56:42,447 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [http-nio-8082-exec-1] MINOR - EntityAlreadyManagedEvent - The [org.heartfulness.avtc.model.Caller] entity with the identifier value of [1] is already managed by the Hibernate Session, so you don't need to call [merge] for it. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EntityAlreadyManagedEvent
2021-08-08 20:56:42,487 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [http-nio-8082-exec-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 20:57:04,923 INFO org.heartfulness.avtc.security.auth.SecurityFilter [http-nio-8082-exec-3] null
2021-08-08 20:57:05,119 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [http-nio-8082-exec-3] MINOR - EntityAlreadyManagedEvent - The [org.heartfulness.avtc.model.Call] entity with the identifier value of [1] is already managed by the Hibernate Session, so you don't need to call [merge] for it. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#EntityAlreadyManagedEvent
2021-08-08 20:57:05,128 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [http-nio-8082-exec-3] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 20:58:04,876 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 20:59:44,897 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 21:01:24,909 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 21:03:04,931 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 21:04:44,951 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 21:06:24,964 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 21:08:04,989 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 21:09:45,003 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 21:11:25,023 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 21:13:05,044 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 21:14:45,067 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 21:16:25,082 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 21:18:05,102 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 21:19:45,121 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 21:21:25,139 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 21:23:05,153 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 21:24:45,161 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 21:26:25,184 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 21:28:05,208 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 21:29:45,229 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 21:31:25,251 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 21:33:05,274 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 21:34:45,286 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 21:36:25,304 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 21:38:05,321 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 21:39:45,341 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 21:41:25,355 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 21:43:05,373 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 21:44:45,391 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 21:46:25,401 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 21:48:05,417 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 21:49:45,437 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 21:51:25,451 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 21:53:05,474 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 21:54:45,483 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 21:56:25,506 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 21:58:05,529 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 21:59:45,541 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 22:01:25,554 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 22:03:05,591 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 22:04:45,600 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 22:06:25,619 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 22:08:05,636 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 22:09:45,657 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 22:11:25,676 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 22:13:05,684 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 22:14:45,695 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 22:16:25,706 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 22:18:05,716 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 22:19:45,736 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 22:21:25,752 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 22:23:05,766 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 22:24:45,789 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 22:26:25,804 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 22:28:05,813 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 22:29:45,822 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 22:31:25,835 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 22:33:05,847 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 22:34:45,860 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 22:36:25,882 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 22:38:05,893 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 22:39:45,911 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 22:41:25,925 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 22:43:05,943 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 22:44:45,957 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 22:46:25,976 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 22:48:05,988 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 22:49:46,011 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 22:51:26,029 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 22:53:06,040 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 22:54:46,061 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 22:56:26,081 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 22:58:06,101 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 22:59:46,125 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 23:01:26,147 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 23:03:06,161 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 23:04:46,173 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 23:06:26,187 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 23:08:06,207 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 23:09:46,228 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 23:11:26,241 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 23:13:06,265 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
2021-08-08 23:14:46,281 INFO io.hypersistence.optimizer.util.logger.Slf4jLogger [scheduling-1] MINOR - AutoCommittingConnectionEvent - The JDBC Connection was borrowed in auto-commit mode, and Hibernate needs to disable this mode when starting a transaction, and re-enable it prior to releasing the JDBC Connection back to the pool. For more info about this event, check out this User Guide link - https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#AutoCommittingConnectionEvent
